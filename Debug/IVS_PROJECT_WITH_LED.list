
IVS_PROJECT_WITH_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c6c  0800f258  0800f258  00010258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fec4  0800fec4  000112fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fec4  0800fec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fecc  0800fecc  000112fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fecc  0800fecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fed0  0800fed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  0800fed4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112fc  2**0
                  CONTENTS
 10 .bss          00001628  200002fc  200002fc  000112fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001924  20001924  000112fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f9fb  00000000  00000000  0001132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004750  00000000  00000000  00030d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  00035478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000144a  00000000  00000000  00036e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ce0  00000000  00000000  000382d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000245bc  00000000  00000000  0005ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3f36  00000000  00000000  0008456e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001684a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008144  00000000  00000000  001684e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0017062c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002fc 	.word	0x200002fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f240 	.word	0x0800f240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000300 	.word	0x20000300
 80001cc:	0800f240 	.word	0x0800f240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){  //BNO055 có 2 page thanh ghi: PAGE 0 và PAGE 1 → Chuyển qua lại giữa chúng.
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 8000f7e:	2364      	movs	r3, #100	@ 0x64
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2301      	movs	r3, #1
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	2150      	movs	r1, #80	@ 0x50
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <SelectPage+0x3c>)
 8000f92:	f006 fb0b 	bl	80075ac <HAL_I2C_Mem_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <SelectPage+0x2e>
		printf("Register page replacement could not be set\n");
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <SelectPage+0x40>)
 8000f9e:	f00b fc05 	bl	800c7ac <puts>
	}
	HAL_Delay(50);
 8000fa2:	2032      	movs	r0, #50	@ 0x32
 8000fa4:	f003 fef6 	bl	8004d94 <HAL_Delay>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000428 	.word	0x20000428
 8000fb4:	0800f2b8 	.word	0x0800f2b8

08000fb8 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){ //Đọc dữ liệu cảm biến
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	//Dựa vào kiểu dữ liệu được chọn (SENSOR_ACCEL, SENSOR_EULER, v.v.), đọc đúng thanh ghi từ BNO055.
	//Dữ liệu đọc được scale đúng đơn vị(e.g.chia cho 100.0 hoặc 16.0).
	//Dữ liệu gán vào struct sensorData
	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d05f      	beq.n	800108e <ReadData+0xd6>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	222e      	movs	r2, #46	@ 0x2e
 8000fe2:	2150      	movs	r1, #80	@ 0x50
 8000fe4:	48b7      	ldr	r0, [pc, #732]	@ (80012c4 <ReadData+0x30c>)
 8000fe6:	f006 fbdb 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0); // chia cho 100 để quy đổi ra đơn vị chuẩn 
 8000fea:	7a7b      	ldrb	r3, [r7, #9]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7a3b      	ldrb	r3, [r7, #8]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa92 	bl	8000524 <__aeabi_i2d>
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4bb0      	ldr	r3, [pc, #704]	@ (80012c8 <ReadData+0x310>)
 8001006:	f7ff fc21 	bl	800084c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdc9 	bl	8000ba8 <__aeabi_d2f>
 8001016:	4602      	mov	r2, r0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	b21b      	sxth	r3, r3
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4ba4      	ldr	r3, [pc, #656]	@ (80012c8 <ReadData+0x310>)
 8001038:	f7ff fc08 	bl	800084c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb0 	bl	8000ba8 <__aeabi_d2f>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	b21b      	sxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa60 	bl	8000524 <__aeabi_i2d>
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b97      	ldr	r3, [pc, #604]	@ (80012c8 <ReadData+0x310>)
 800106a:	f7ff fbef 	bl	800084c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd97 	bl	8000ba8 <__aeabi_d2f>
 800107a:	4602      	mov	r2, r0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	645a      	str	r2, [r3, #68]	@ 0x44
	        memset(buffer, 0, sizeof(buffer));
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2208      	movs	r2, #8
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00b fcd7 	bl	800ca3c <memset>
	    }

	    if (sensors & SENSOR_QUATERNION) {
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d06c      	beq.n	8001172 <ReadData+0x1ba>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	2308      	movs	r3, #8
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	2220      	movs	r2, #32
 80010ac:	2150      	movs	r1, #80	@ 0x50
 80010ae:	4885      	ldr	r0, [pc, #532]	@ (80012c4 <ReadData+0x30c>)
 80010b0:	f006 fb76 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(1<<14));
 80010b4:	7a7b      	ldrb	r3, [r7, #9]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da02      	bge.n	80010ce <ReadData+0x116>
 80010c8:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80010cc:	333f      	adds	r3, #63	@ 0x3f
 80010ce:	139b      	asrs	r3, r3, #14
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(1<<14));
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7abb      	ldrb	r3, [r7, #10]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da02      	bge.n	80010fa <ReadData+0x142>
 80010f4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80010f8:	333f      	adds	r3, #63	@ 0x3f
 80010fa:	139b      	asrs	r3, r3, #14
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(1<<14));
 800110c:	7b7b      	ldrb	r3, [r7, #13]
 800110e:	b21b      	sxth	r3, r3
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	7b3b      	ldrb	r3, [r7, #12]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	da02      	bge.n	8001126 <ReadData+0x16e>
 8001120:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001124:	333f      	adds	r3, #63	@ 0x3f
 8001126:	139b      	asrs	r3, r3, #14
 8001128:	b21b      	sxth	r3, r3
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(1<<14));
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	b21b      	sxth	r3, r3
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	da02      	bge.n	8001152 <ReadData+0x19a>
 800114c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001150:	333f      	adds	r3, #63	@ 0x3f
 8001152:	139b      	asrs	r3, r3, #14
 8001154:	b21b      	sxth	r3, r3
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	        memset(buffer, 0, sizeof(buffer));
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2208      	movs	r2, #8
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00b fc65 	bl	800ca3c <memset>
	    }

	    if (sensors & SENSOR_LINACC) {
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d05f      	beq.n	800123c <ReadData+0x284>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2306      	movs	r3, #6
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	2228      	movs	r2, #40	@ 0x28
 8001190:	2150      	movs	r1, #80	@ 0x50
 8001192:	484c      	ldr	r0, [pc, #304]	@ (80012c4 <ReadData+0x30c>)
 8001194:	f006 fb04 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8001198:	7a7b      	ldrb	r3, [r7, #9]
 800119a:	b21b      	sxth	r3, r3
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7a3b      	ldrb	r3, [r7, #8]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9bb 	bl	8000524 <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <ReadData+0x310>)
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcf2 	bl	8000ba8 <__aeabi_d2f>
 80011c4:	4602      	mov	r2, r0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	631a      	str	r2, [r3, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <ReadData+0x310>)
 80011e6:	f7ff fb31 	bl	800084c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcd9 	bl	8000ba8 <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	635a      	str	r2, [r3, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 80011fc:	7b7b      	ldrb	r3, [r7, #13]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f989 	bl	8000524 <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <ReadData+0x310>)
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fcc0 	bl	8000ba8 <__aeabi_d2f>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	639a      	str	r2, [r3, #56]	@ 0x38
	        memset(buffer, 0, sizeof(buffer));
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2208      	movs	r2, #8
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fc00 	bl	800ca3c <memset>
	    }

	    if (sensors & SENSOR_GYRO) {
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d066      	beq.n	8001314 <ReadData+0x35c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2306      	movs	r3, #6
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	2214      	movs	r2, #20
 800125a:	2150      	movs	r1, #80	@ 0x50
 800125c:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <ReadData+0x30c>)
 800125e:	f006 fa9f 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001262:	7a7b      	ldrb	r3, [r7, #9]
 8001264:	b21b      	sxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7a3b      	ldrb	r3, [r7, #8]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f956 	bl	8000524 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <ReadData+0x314>)
 800127e:	f7ff fae5 	bl	800084c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc8d 	bl	8000ba8 <__aeabi_d2f>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b21b      	sxth	r3, r3
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7abb      	ldrb	r3, [r7, #10]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f93d 	bl	8000524 <__aeabi_i2d>
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <ReadData+0x314>)
 80012b0:	f7ff facc 	bl	800084c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc74 	bl	8000ba8 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	e005      	b.n	80012d0 <ReadData+0x318>
 80012c4:	20000428 	.word	0x20000428
 80012c8:	40590000 	.word	0x40590000
 80012cc:	40300000 	.word	0x40300000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f91d 	bl	8000524 <__aeabi_i2d>
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4ba3      	ldr	r3, [pc, #652]	@ (800157c <ReadData+0x5c4>)
 80012f0:	f7ff faac 	bl	800084c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc54 	bl	8000ba8 <__aeabi_d2f>
 8001300:	4602      	mov	r2, r0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	615a      	str	r2, [r3, #20]
	        memset(buffer, 0, sizeof(buffer));
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	2208      	movs	r2, #8
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00b fb94 	bl	800ca3c <memset>
	    }
	    if (sensors & SENSOR_ACCEL) {
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	d05f      	beq.n	80013de <ReadData+0x426>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2306      	movs	r3, #6
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	2208      	movs	r2, #8
 8001332:	2150      	movs	r1, #80	@ 0x50
 8001334:	4892      	ldr	r0, [pc, #584]	@ (8001580 <ReadData+0x5c8>)
 8001336:	f006 fa33 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 800133a:	7a7b      	ldrb	r3, [r7, #9]
 800133c:	b21b      	sxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	7a3b      	ldrb	r3, [r7, #8]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21b      	sxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b8b      	ldr	r3, [pc, #556]	@ (8001584 <ReadData+0x5cc>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc21 	bl	8000ba8 <__aeabi_d2f>
 8001366:	4602      	mov	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	b21b      	sxth	r3, r3
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7abb      	ldrb	r3, [r7, #10]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d1 	bl	8000524 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b7f      	ldr	r3, [pc, #508]	@ (8001584 <ReadData+0x5cc>)
 8001388:	f7ff fa60 	bl	800084c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc08 	bl	8000ba8 <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	605a      	str	r2, [r3, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8b8 	bl	8000524 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b72      	ldr	r3, [pc, #456]	@ (8001584 <ReadData+0x5cc>)
 80013ba:	f7ff fa47 	bl	800084c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fbef 	bl	8000ba8 <__aeabi_d2f>
 80013ca:	4602      	mov	r2, r0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
	        memset(buffer, 0, sizeof(buffer));
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2208      	movs	r2, #8
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00b fb2f 	bl	800ca3c <memset>
	    }
	    if (sensors & SENSOR_MAG) {
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05f      	beq.n	80014a8 <ReadData+0x4f0>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2306      	movs	r3, #6
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	220e      	movs	r2, #14
 80013fc:	2150      	movs	r1, #80	@ 0x50
 80013fe:	4860      	ldr	r0, [pc, #384]	@ (8001580 <ReadData+0x5c8>)
 8001400:	f006 f9ce 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001404:	7a7b      	ldrb	r3, [r7, #9]
 8001406:	b21b      	sxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	7a3b      	ldrb	r3, [r7, #8]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b57      	ldr	r3, [pc, #348]	@ (800157c <ReadData+0x5c4>)
 8001420:	f7ff fa14 	bl	800084c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fbbc 	bl	8000ba8 <__aeabi_d2f>
 8001430:	4602      	mov	r2, r0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7abb      	ldrb	r3, [r7, #10]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f86c 	bl	8000524 <__aeabi_i2d>
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <ReadData+0x5c4>)
 8001452:	f7ff f9fb 	bl	800084c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fba3 	bl	8000ba8 <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	61da      	str	r2, [r3, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	b21b      	sxth	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21b      	sxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f853 	bl	8000524 <__aeabi_i2d>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b3e      	ldr	r3, [pc, #248]	@ (800157c <ReadData+0x5c4>)
 8001484:	f7ff f9e2 	bl	800084c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb8a 	bl	8000ba8 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	621a      	str	r2, [r3, #32]
	        memset(buffer, 0, sizeof(buffer));
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2208      	movs	r2, #8
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00b faca 	bl	800ca3c <memset>
	    }
	    if (sensors & SENSOR_EULER) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d05f      	beq.n	8001572 <ReadData+0x5ba>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2306      	movs	r3, #6
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	221a      	movs	r2, #26
 80014c6:	2150      	movs	r1, #80	@ 0x50
 80014c8:	482d      	ldr	r0, [pc, #180]	@ (8001580 <ReadData+0x5c8>)
 80014ca:	f006 f969 	bl	80077a0 <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80014ce:	7a7b      	ldrb	r3, [r7, #9]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7a3b      	ldrb	r3, [r7, #8]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f820 	bl	8000524 <__aeabi_i2d>
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b24      	ldr	r3, [pc, #144]	@ (800157c <ReadData+0x5c4>)
 80014ea:	f7ff f9af 	bl	800084c <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb57 	bl	8000ba8 <__aeabi_d2f>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	b21b      	sxth	r3, r3
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7abb      	ldrb	r3, [r7, #10]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f807 	bl	8000524 <__aeabi_i2d>
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <ReadData+0x5c4>)
 800151c:	f7ff f996 	bl	800084c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb3e 	bl	8000ba8 <__aeabi_d2f>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	b21b      	sxth	r3, r3
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffee 	bl	8000524 <__aeabi_i2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <ReadData+0x5c4>)
 800154e:	f7ff f97d 	bl	800084c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb25 	bl	8000ba8 <__aeabi_d2f>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	62da      	str	r2, [r3, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	2208      	movs	r2, #8
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b fa65 	bl	800ca3c <memset>
	    }
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40300000 	.word	0x40300000
 8001580:	20000428 	.word	0x20000428
 8001584:	40590000 	.word	0x40590000

08001588 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){ //Đặt chế độ hoạt động (e.g. NDOF, IMU, CONFIG_MODE...)
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af04      	add	r7, sp, #16
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fcee 	bl	8000f74 <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 8001598:	2364      	movs	r3, #100	@ 0x64
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	223d      	movs	r2, #61	@ 0x3d
 80015a8:	2150      	movs	r1, #80	@ 0x50
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <Set_Operation_Mode+0x58>)
 80015ac:	f005 fffe 	bl	80075ac <HAL_I2C_Mem_Write>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <Set_Operation_Mode+0x36>
		printf("Operation mode could not be set!\n");
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <Set_Operation_Mode+0x5c>)
 80015b8:	f00b f8f8 	bl	800c7ac <puts>
 80015bc:	e002      	b.n	80015c4 <Set_Operation_Mode+0x3c>
	}
	else printf("Operation mode switching succeeded.\n");
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <Set_Operation_Mode+0x60>)
 80015c0:	f00b f8f4 	bl	800c7ac <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <Set_Operation_Mode+0x4a>
 80015ca:	2013      	movs	r0, #19
 80015cc:	f003 fbe2 	bl	8004d94 <HAL_Delay>

	else HAL_Delay(9);

}
 80015d0:	e002      	b.n	80015d8 <Set_Operation_Mode+0x50>
	else HAL_Delay(9);
 80015d2:	2009      	movs	r0, #9
 80015d4:	f003 fbde 	bl	8004d94 <HAL_Delay>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000428 	.word	0x20000428
 80015e4:	0800f300 	.word	0x0800f300
 80015e8:	0800f324 	.word	0x0800f324

080015ec <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){ //Cấu hình power mode: Normal, Low-power, Suspend.
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	2301      	movs	r3, #1
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	223e      	movs	r2, #62	@ 0x3e
 8001606:	2150      	movs	r1, #80	@ 0x50
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <SetPowerMODE+0x44>)
 800160a:	f005 ffcf 	bl	80075ac <HAL_I2C_Mem_Write>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <SetPowerMODE+0x48>)
 8001616:	f00b f8c9 	bl	800c7ac <puts>
 800161a:	e002      	b.n	8001622 <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 800161c:	4806      	ldr	r0, [pc, #24]	@ (8001638 <SetPowerMODE+0x4c>)
 800161e:	f00b f8c5 	bl	800c7ac <puts>
	}
	HAL_Delay(50);
 8001622:	2032      	movs	r0, #50	@ 0x32
 8001624:	f003 fbb6 	bl	8004d94 <HAL_Delay>

}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000428 	.word	0x20000428
 8001634:	0800f348 	.word	0x0800f348
 8001638:	0800f368 	.word	0x0800f368

0800163c <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) { //Chọn xung clock nội/ngoại.
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af04      	add	r7, sp, #16
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 8001646:	2364      	movs	r3, #100	@ 0x64
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2301      	movs	r3, #1
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	223f      	movs	r2, #63	@ 0x3f
 8001656:	2150      	movs	r1, #80	@ 0x50
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <Clock_Source+0x2c>)
 800165a:	f005 ffa7 	bl	80075ac <HAL_I2C_Mem_Write>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000428 	.word	0x20000428

0800166c <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){ // Chuyển đổi trục (Axis remap)
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af04      	add	r7, sp, #16
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]

	//Gán lại trục X–Y–Z hoặc đảo dấu (khi lắp cảm biến không đúng hướng).
	//Ví dụ : nếu gắn nghiêng 90°, có thể đổi trục để kết quả đúng.

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 800167c:	2364      	movs	r3, #100	@ 0x64
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	2241      	movs	r2, #65	@ 0x41
 800168c:	2150      	movs	r1, #80	@ 0x50
 800168e:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <BNO055_Axis+0x54>)
 8001690:	f005 ff8c 	bl	80075ac <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001694:	2014      	movs	r0, #20
 8001696:	f003 fb7d 	bl	8004d94 <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	2242      	movs	r2, #66	@ 0x42
 80016aa:	2150      	movs	r1, #80	@ 0x50
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <BNO055_Axis+0x54>)
 80016ae:	f005 ff7d 	bl	80075ac <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	@ 0x64
 80016b4:	f003 fb6e 	bl	8004d94 <HAL_Delay>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000428 	.word	0x20000428

080016c4 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 80016ce:	2364      	movs	r3, #100	@ 0x64
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	2208      	movs	r2, #8
 80016de:	2150      	movs	r1, #80	@ 0x50
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <SET_Accel_Range+0x30>)
 80016e2:	f005 ff63 	bl	80075ac <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	@ 0x64
 80016e8:	f003 fb54 	bl	8004d94 <HAL_Delay>

}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000428 	.word	0x20000428

080016f8 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(void){  //Khởi tạo toàn bộ cảm biến
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af04      	add	r7, sp, #16
	//Đặt page = 0, chọn clock, map trục, chọn đơn vị(m / s² hay g…)
	//Đặt chế độ nguồn
	//Đặt chế độ hoạt động chính(ví dụ NDOF)
    BNO055_Init_t Init;

    Init.Unit_Sel     = UNIT_ORI_WINDOWS | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2;
 80016fe:	2300      	movs	r3, #0
 8001700:	723b      	strb	r3, [r7, #8]
    Init.Axis         = DEFAULT_AXIS_REMAP;
 8001702:	2324      	movs	r3, #36	@ 0x24
 8001704:	727b      	strb	r3, [r7, #9]
    Init.Axis_sign    = DEFAULT_AXIS_SIGN;
 8001706:	2300      	movs	r3, #0
 8001708:	72bb      	strb	r3, [r7, #10]
    Init.Mode         = BNO055_NORMAL_MODE;
 800170a:	2300      	movs	r3, #0
 800170c:	72fb      	strb	r3, [r7, #11]
    Init.OP_Modes     = NDOF;
 800170e:	230c      	movs	r3, #12
 8001710:	733b      	strb	r3, [r7, #12]
    Init.Clock_Source = CLOCK_INTERNAL;
 8001712:	2300      	movs	r3, #0
 8001714:	737b      	strb	r3, [r7, #13]
    Init.ACC_Range    = Range_2G;
 8001716:	2300      	movs	r3, #0
 8001718:	73bb      	strb	r3, [r7, #14]

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE); // cấu hình 
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff34 	bl	8001588 <Set_Operation_Mode>
	HAL_Delay(50);
 8001720:	2032      	movs	r0, #50	@ 0x32
 8001722:	f003 fb37 	bl	8004d94 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fc24 	bl	8000f74 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffc8 	bl	80016c4 <SET_Accel_Range>
	HAL_Delay(50);
 8001734:	2032      	movs	r0, #50	@ 0x32
 8001736:	f003 fb2d 	bl	8004d94 <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fc1a 	bl	8000f74 <SelectPage>
	HAL_Delay(50);
 8001740:	2032      	movs	r0, #50	@ 0x32
 8001742:	f003 fb27 	bl	8004d94 <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 8001746:	2364      	movs	r3, #100	@ 0x64
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	2238      	movs	r2, #56	@ 0x38
 8001756:	2150      	movs	r1, #80	@ 0x50
 8001758:	481e      	ldr	r0, [pc, #120]	@ (80017d4 <BNO055_Init+0xdc>)
 800175a:	f006 f821 	bl	80077a0 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 800175e:	2032      	movs	r0, #50	@ 0x32
 8001760:	f003 fb18 	bl	8004d94 <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <BNO055_Init+0x80>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff65 	bl	800163c <Clock_Source>
		HAL_Delay(100);
 8001772:	2064      	movs	r0, #100	@ 0x64
 8001774:	f003 fb0e 	bl	8004d94 <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8001778:	7a7b      	ldrb	r3, [r7, #9]
 800177a:	7aba      	ldrb	r2, [r7, #10]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff74 	bl	800166c <BNO055_Axis>
	HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	@ 0x64
 8001786:	f003 fb05 	bl	8004d94 <HAL_Delay>

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 800178a:	2364      	movs	r3, #100	@ 0x64
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	223b      	movs	r2, #59	@ 0x3b
 800179c:	2150      	movs	r1, #80	@ 0x50
 800179e:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <BNO055_Init+0xdc>)
 80017a0:	f005 ff04 	bl	80075ac <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80017a4:	2064      	movs	r0, #100	@ 0x64
 80017a6:	f003 faf5 	bl	8004d94 <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff1d 	bl	80015ec <SetPowerMODE>
	HAL_Delay(100);
 80017b2:	2064      	movs	r0, #100	@ 0x64
 80017b4:	f003 faee 	bl	8004d94 <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fee4 	bl	8001588 <Set_Operation_Mode>
	HAL_Delay(100);
 80017c0:	2064      	movs	r0, #100	@ 0x64
 80017c2:	f003 fae7 	bl	8004d94 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 80017c6:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <BNO055_Init+0xe0>)
 80017c8:	f00a fff0 	bl	800c7ac <puts>
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000428 	.word	0x20000428
 80017d8:	0800f388 	.word	0x0800f388

080017dc <BNO055_SendEulerCAN>:

    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_SendEulerCAN(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09a      	sub	sp, #104	@ 0x68
 80017e0:	af00      	add	r7, sp, #0
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fbe5 	bl	8000fb8 <ReadData>

    // Giữ 2 chữ số thập phân
    int16_t roll  = (int16_t)(sensorData.Euler.Z *100);
 80017ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017f2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001890 <BNO055_SendEulerCAN+0xb4>
 80017f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fe:	ee17 3a90 	vmov	r3, s15
 8001802:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int16_t pitch = (int16_t)(sensorData.Euler.Y *100);
 8001806:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800180a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001890 <BNO055_SendEulerCAN+0xb4>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001816:	ee17 3a90 	vmov	r3, s15
 800181a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    int16_t yaw   = (int16_t)((sensorData.Euler.X) *100);
 800181e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001822:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001890 <BNO055_SendEulerCAN+0xb4>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
//
    // Nhân 100 để đưa về dạng int16_t gửi CAN
//    int16_t yaw = (int16_t)(yaw_deg * 100);


    uint8_t data[8] = {
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001842:	121b      	asrs	r3, r3, #8
 8001844:	b21b      	sxth	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	703b      	strb	r3, [r7, #0]
 800184a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800184e:	b2db      	uxtb	r3, r3
 8001850:	707b      	strb	r3, [r7, #1]
 8001852:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001856:	121b      	asrs	r3, r3, #8
 8001858:	b21b      	sxth	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	70bb      	strb	r3, [r7, #2]
 800185e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001862:	b2db      	uxtb	r3, r3
 8001864:	70fb      	strb	r3, [r7, #3]
 8001866:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800186a:	121b      	asrs	r3, r3, #8
 800186c:	b21b      	sxth	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	713b      	strb	r3, [r7, #4]
 8001872:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001876:	b2db      	uxtb	r3, r3
 8001878:	717b      	strb	r3, [r7, #5]
            (pitch >> 8) & 0xFF, pitch & 0xFF,
			(yaw >> 8) & 0xFF,   yaw & 0xFF,
//			yaw & 0xFF,         // byte thấp
//			0, 0, 0, 0, 0, 0    // phần còn lại không dùng
    };
    CAN_SendTopicData(TOPIC_ID_IMU_EULER, data, 8);
 800187a:	463b      	mov	r3, r7
 800187c:	2208      	movs	r2, #8
 800187e:	4619      	mov	r1, r3
 8001880:	2012      	movs	r0, #18
 8001882:	f000 fca5 	bl	80021d0 <CAN_SendTopicData>
}
 8001886:	bf00      	nop
 8001888:	3768      	adds	r7, #104	@ 0x68
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	42c80000 	.word	0x42c80000

08001894 <BNO055_PrintEulerDebug>:
            sensorData.Gyro.X, sensorData.Gyro.Y, sensorData.Gyro.Z);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_PrintEulerDebug(void)
{
 8001894:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001898:	b0be      	sub	sp, #248	@ 0xf8
 800189a:	af04      	add	r7, sp, #16
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 800189c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80018a0:	2140      	movs	r1, #64	@ 0x40
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb88 	bl	8000fb8 <ReadData>

    float roll  = sensorData.Euler.Z;
 80018a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    float pitch = sensorData.Euler.Y;
 80018b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float yaw   = sensorData.Euler.X;
 80018b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
//        yaw -= 360.0f;
//    else if (yaw < -180.0f)
//        yaw += 360.0f;

    char msg[128];
    sprintf(msg, "DEBUG: Roll=%.2f°, Pitch=%.2f°, Yaw=%.2f°\r\n", roll, pitch, yaw);
 80018c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80018c4:	f7fe fe40 	bl	8000548 <__aeabi_f2d>
 80018c8:	4680      	mov	r8, r0
 80018ca:	4689      	mov	r9, r1
 80018cc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	1d38      	adds	r0, r7, #4
 80018e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018ea:	e9cd 4500 	strd	r4, r5, [sp]
 80018ee:	4642      	mov	r2, r8
 80018f0:	464b      	mov	r3, r9
 80018f2:	490a      	ldr	r1, [pc, #40]	@ (800191c <BNO055_PrintEulerDebug+0x88>)
 80018f4:	f00a ff98 	bl	800c828 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fcb8 	bl	8000270 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	1d39      	adds	r1, r7, #4
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <BNO055_PrintEulerDebug+0x8c>)
 800190c:	f009 fa18 	bl	800ad40 <HAL_UART_Transmit>

}
 8001910:	bf00      	nop
 8001912:	37e8      	adds	r7, #232	@ 0xe8
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800191a:	bf00      	nop
 800191c:	0800f710 	.word	0x0800f710
 8001920:	200006cc 	.word	0x200006cc

08001924 <CAN_DebugStatus>:
#include "display.h"
#include "rfid.h"
extern UART_HandleTypeDef huart1;
extern CAN_HandleTypeDef hcan1;
void CAN_DebugStatus(void)
{
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b0b2      	sub	sp, #200	@ 0xc8
 8001928:	af04      	add	r7, sp, #16
    char msg[128];
    uint32_t msr = hcan1.Instance->MSR;
 800192a:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint32_t esr = hcan1.Instance->ESR;
 8001934:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // In trạng thái FIFO
    uint32_t fifo0_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800193e:	2100      	movs	r1, #0
 8001940:	4843      	ldr	r0, [pc, #268]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 8001942:	f004 fb13 	bl	8005f6c <HAL_CAN_GetRxFifoFillLevel>
 8001946:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t fifo1_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 800194a:	2101      	movs	r1, #1
 800194c:	4840      	ldr	r0, [pc, #256]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 800194e:	f004 fb0d 	bl	8005f6c <HAL_CAN_GetRxFifoFillLevel>
 8001952:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    snprintf(msg, sizeof(msg),
 8001956:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800195a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001970:	4a38      	ldr	r2, [pc, #224]	@ (8001a54 <CAN_DebugStatus+0x130>)
 8001972:	2180      	movs	r1, #128	@ 0x80
 8001974:	f00a ff22 	bl	800c7bc <sniprintf>
             "\r\n[CAN DEBUG]\r\nMSR=0x%08lX\r\nESR=0x%08lX\r\nFIFO0=%lu, FIFO1=%lu\r\n",
             msr, esr, fifo0_level, fifo1_level);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc77 	bl	8000270 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	4832      	ldr	r0, [pc, #200]	@ (8001a58 <CAN_DebugStatus+0x134>)
 8001990:	f009 f9d6 	bl	800ad40 <HAL_UART_Transmit>

    // Giải thích các trạng thái nếu cần
    if (esr & CAN_ESR_BOFF) {
 8001994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <CAN_DebugStatus+0x8a>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ CAN BUS-OFF\r\n", 17, HAL_MAX_DELAY);
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	2211      	movs	r2, #17
 80019a6:	492d      	ldr	r1, [pc, #180]	@ (8001a5c <CAN_DebugStatus+0x138>)
 80019a8:	482b      	ldr	r0, [pc, #172]	@ (8001a58 <CAN_DebugStatus+0x134>)
 80019aa:	f009 f9c9 	bl	800ad40 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EPVF) {
 80019ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <CAN_DebugStatus+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ Error Passive\r\n", 19, HAL_MAX_DELAY);
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2213      	movs	r2, #19
 80019c0:	4927      	ldr	r1, [pc, #156]	@ (8001a60 <CAN_DebugStatus+0x13c>)
 80019c2:	4825      	ldr	r0, [pc, #148]	@ (8001a58 <CAN_DebugStatus+0x134>)
 80019c4:	f009 f9bc 	bl	800ad40 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EWGF) {
 80019c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <CAN_DebugStatus+0xbe>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ Error Warning\r\n", 19, HAL_MAX_DELAY);
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2213      	movs	r2, #19
 80019da:	4922      	ldr	r1, [pc, #136]	@ (8001a64 <CAN_DebugStatus+0x140>)
 80019dc:	481e      	ldr	r0, [pc, #120]	@ (8001a58 <CAN_DebugStatus+0x134>)
 80019de:	f009 f9af 	bl	800ad40 <HAL_UART_Transmit>
    }

    if ((esr & CAN_ESR_LEC_Msk) != 0) {
 80019e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02b      	beq.n	8001a46 <CAN_DebugStatus+0x122>
        const char* lec_msgs[] = {
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <CAN_DebugStatus+0x144>)
 80019f0:	1d3c      	adds	r4, r7, #4
 80019f2:	461d      	mov	r5, r3
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            "No Error", "Stuff Error", "Form Error", "Ack Error",
            "Bit recessive Error", "Bit dominant Error", "CRC Error", "Unknown"
        };
        uint8_t lec = (esr & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos;
 8001a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        snprintf(msg, sizeof(msg), "❌ Last Error Code (LEC): %s\r\n", lec_msgs[lec]);
 8001a10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	33b8      	adds	r3, #184	@ 0xb8
 8001a18:	443b      	add	r3, r7
 8001a1a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001a1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <CAN_DebugStatus+0x148>)
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	f00a fec9 	bl	800c7bc <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fc1e 	bl	8000270 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <CAN_DebugStatus+0x134>)
 8001a42:	f009 f97d 	bl	800ad40 <HAL_UART_Transmit>
    }
}
 8001a46:	bf00      	nop
 8001a48:	37b8      	adds	r7, #184	@ 0xb8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200003d0 	.word	0x200003d0
 8001a54:	0800f740 	.word	0x0800f740
 8001a58:	200006cc 	.word	0x200006cc
 8001a5c:	0800f780 	.word	0x0800f780
 8001a60:	0800f798 	.word	0x0800f798
 8001a64:	0800f7b0 	.word	0x0800f7b0
 8001a68:	0800f854 	.word	0x0800f854
 8001a6c:	0800f7c8 	.word	0x0800f7c8

08001a70 <MQ135_Config>:
// Biến bên ngoài dùng cho lấy mẫu ADC qua ngắt
extern uint32_t ADC_SAMPLES[1000];
extern uint32_t NUM_SAMPLES;
extern volatile uint8_t mq135_done;

void MQ135_Config(MQ135_HandleTypeDef *mq, ADC_HandleTypeDef *hadc) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    mq->hadc = hadc;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
    mq->rl_value = 10.0f;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <MQ135_Config+0x44>)
 8001a84:	605a      	str	r2, [r3, #4]
    mq->ro_clean_air = 10.0f;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <MQ135_Config+0x44>)
 8001a8a:	609a      	str	r2, [r3, #8]
    mq->a = 116.6020682f;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <MQ135_Config+0x48>)
 8001a90:	60da      	str	r2, [r3, #12]
    mq->b = -2.769034857f;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <MQ135_Config+0x4c>)
 8001a96:	611a      	str	r2, [r3, #16]
    mq->vref = 3.3f;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <MQ135_Config+0x50>)
 8001a9c:	615a      	str	r2, [r3, #20]
    mq->resolution = 4096.0f;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001aa4:	619a      	str	r2, [r3, #24]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	41200000 	.word	0x41200000
 8001ab8:	42e93442 	.word	0x42e93442
 8001abc:	c03137de 	.word	0xc03137de
 8001ac0:	40533333 	.word	0x40533333

08001ac4 <MQ135_CorrectionFactor>:

float MQ135_CorrectionFactor(float temp, float hum) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ace:	edc7 0a00 	vstr	s1, [r7]
    return MQ135_CORA * temp * temp
 8001ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001b24 <MQ135_CorrectionFactor+0x60>
 8001ada:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
         - MQ135_CORB * temp
 8001ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aea:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001b28 <MQ135_CorrectionFactor+0x64>
 8001aee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
         + MQ135_CORC
 8001af6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001b2c <MQ135_CorrectionFactor+0x68>
 8001afa:	ee37 7a87 	vadd.f32	s14, s15, s14
         - (hum - 33.0f) * MQ135_CORD;
 8001afe:	edd7 7a00 	vldr	s15, [r7]
 8001b02:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001b30 <MQ135_CorrectionFactor+0x6c>
 8001b06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b0a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001b34 <MQ135_CorrectionFactor+0x70>
 8001b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	39b78034 	.word	0x39b78034
 8001b28:	3cdea897 	.word	0x3cdea897
 8001b2c:	3fb29bd0 	.word	0x3fb29bd0
 8001b30:	42040000 	.word	0x42040000
 8001b34:	3aebedfa 	.word	0x3aebedfa

08001b38 <MQ135_ReadRs>:

float MQ135_ReadRs(MQ135_HandleTypeDef *mq) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    float rs = 0.0f;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
    mq135_done = 0;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <MQ135_ReadRs+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
    NUM_SAMPLES = MQ135_READ_SAMPLES;
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <MQ135_ReadRs+0xc0>)
 8001b4e:	2264      	movs	r2, #100	@ 0x64
 8001b50:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start_IT(mq->hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f984 	bl	8004e64 <HAL_ADC_Start_IT>
    while (!mq135_done);  // đợi hoàn tất lấy mẫu
 8001b5c:	bf00      	nop
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <MQ135_ReadRs+0xbc>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0fa      	beq.n	8001b5e <MQ135_ReadRs+0x26>

    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e02c      	b.n	8001bc8 <MQ135_ReadRs+0x90>
        float v = ADC_SAMPLES[j] * mq->vref / mq->resolution;
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <MQ135_ReadRs+0xc4>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	edc7 7a03 	vstr	s15, [r7, #12]
        rs += ((mq->vref - v) * mq->rl_value) / v;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001baa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7a05 	vstr	s15, [r7, #20]
    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MQ135_ReadRs+0xc0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3cd      	bcc.n	8001b6e <MQ135_ReadRs+0x36>
    }

    return rs / NUM_SAMPLES;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MQ135_ReadRs+0xc0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8001be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001be6:	eef0 7a66 	vmov.f32	s15, s13
}
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20001764 	.word	0x20001764
 8001bf8:	20001760 	.word	0x20001760
 8001bfc:	200007c0 	.word	0x200007c0

08001c00 <MQ135_ReadCorrectedPPM>:

float MQ135_ReadCorrectedPPM(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	ed2d 8b02 	vpush	{d8}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c10:	edc7 0a01 	vstr	s1, [r7, #4]
    float rs = MQ135_ReadRs(mq);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff ff8f 	bl	8001b38 <MQ135_ReadRs>
 8001c1a:	ed87 0a07 	vstr	s0, [r7, #28]
    float corr = MQ135_CorrectionFactor(temp, hum);
 8001c1e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c22:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c26:	f7ff ff4d 	bl	8001ac4 <MQ135_CorrectionFactor>
 8001c2a:	ed87 0a06 	vstr	s0, [r7, #24]
    float rsc = rs / corr;
 8001c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c32:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3a:	edc7 7a05 	vstr	s15, [r7, #20]
    return mq->a * powf(rsc / mq->ro_clean_air, mq->b);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	ed93 8a03 	vldr	s16, [r3, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	eeb0 0a66 	vmov.f32	s0, s13
 8001c60:	f00c ff26 	bl	800eab0 <powf>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
 8001c68:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	ecbd 8b02 	vpop	{d8}
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MQ135_CalibrateRo>:

void MQ135_CalibrateRo(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	ed2d 8b02 	vpush	{d8}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c8c:	edc7 0a01 	vstr	s1, [r7, #4]
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff ff51 	bl	8001b38 <MQ135_ReadRs>
 8001c96:	eeb0 8a40 	vmov.f32	s16, s0
        powf((MQ135_ATMOCO2 / mq->a), (1.0f / mq->b));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001cdc <MQ135_CalibrateRo+0x60>
 8001ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001cb2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001cb6:	eef0 0a66 	vmov.f32	s1, s13
 8001cba:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbe:	f00c fef7 	bl	800eab0 <powf>
 8001cc2:	eef0 7a40 	vmov.f32	s15, s0
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001cc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	ecbd 8b02 	vpop	{d8}
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	43c80000 	.word	0x43c80000

08001ce0 <MQ135_Send_CAN>:

void MQ135_Send_CAN(MQ135_HandleTypeDef *mq, float temp, float hum, UART_HandleTypeDef *huart, uint16_t topic) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09e      	sub	sp, #120	@ 0x78
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6178      	str	r0, [r7, #20]
 8001ce8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cec:	edc7 0a03 	vstr	s1, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
    float ppm = MQ135_ReadCorrectedPPM(mq, temp, hum);
 8001cf6:	edd7 0a03 	vldr	s1, [r7, #12]
 8001cfa:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff7e 	bl	8001c00 <MQ135_ReadCorrectedPPM>
 8001d04:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    uint16_t v = (uint16_t)ppm;
 8001d08:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d10:	ee17 3a90 	vmov	r3, s15
 8001d14:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    char buf[80];
    sprintf(buf, "PPM: %.1f\r\n", ppm);
 8001d18:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	f107 0020 	add.w	r0, r7, #32
 8001d26:	4913      	ldr	r1, [pc, #76]	@ (8001d74 <MQ135_Send_CAN+0x94>)
 8001d28:	f00a fd7e 	bl	800c828 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa9d 	bl	8000270 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f107 0120 	add.w	r1, r7, #32
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f008 fffc 	bl	800ad40 <HAL_UART_Transmit>

    uint8_t payload[2] = { (v >> 8) & 0xFF, v & 0xFF };
 8001d48:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	773b      	strb	r3, [r7, #28]
 8001d54:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	777b      	strb	r3, [r7, #29]
    CAN_SendTopicData(topic, payload, 2);
 8001d5c:	f107 011c 	add.w	r1, r7, #28
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fa33 	bl	80021d0 <CAN_SendTopicData>
}
 8001d6a:	bf00      	nop
 8001d6c:	3778      	adds	r7, #120	@ 0x78
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800f874 	.word	0x0800f874

08001d78 <RC522_SPI_Transfer>:
 * Des		cription: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b096      	sub	sp, #88	@ 0x58
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001d82:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 8001d86:	1df9      	adds	r1, r7, #7
 8001d88:	2364      	movs	r3, #100	@ 0x64
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <RC522_SPI_Transfer+0x28>)
 8001d90:	f007 f88f 	bl	8008eb2 <HAL_SPI_TransmitReceive>
	 char debug[64];

	return rx_data;
 8001d94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3750      	adds	r7, #80	@ 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000047c 	.word	0x2000047c

08001da4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	@ 0x80
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <Write_MFRC522+0x48>)
 8001dba:	f005 f99b 	bl	80070f4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffd4 	bl	8001d78 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffd0 	bl	8001d78 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2180      	movs	r1, #128	@ 0x80
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <Write_MFRC522+0x48>)
 8001dde:	f005 f989 	bl	80070f4 <HAL_GPIO_WritePin>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020800 	.word	0x40020800

08001df0 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	4810      	ldr	r0, [pc, #64]	@ (8001e40 <Read_MFRC522+0x50>)
 8001e00:	f005 f978 	bl	80070f4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffac 	bl	8001d78 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff ffa9 	bl	8001d78 <RC522_SPI_Transfer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <Read_MFRC522+0x50>)
 8001e30:	f005 f960 	bl	80070f4 <HAL_GPIO_WritePin>
	
	return val;	
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020800 	.word	0x40020800

08001e44 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffca 	bl	8001df0 <Read_MFRC522>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff99 	bl	8001da4 <Write_MFRC522>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	460a      	mov	r2, r1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	4613      	mov	r3, r2
 8001e88:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ffaf 	bl	8001df0 <Read_MFRC522>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001e96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff79 	bl	8001da4 <Write_MFRC522>
} 
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001ebe:	2014      	movs	r0, #20
 8001ec0:	f7ff ff96 	bl	8001df0 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	2014      	movs	r0, #20
 8001ec8:	f7ff ffbc 	bl	8001e44 <SetBitMask>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff ff64 	bl	8001da4 <Write_MFRC522>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2180      	movs	r1, #128	@ 0x80
 8001ee8:	4812      	ldr	r0, [pc, #72]	@ (8001f34 <MFRC522_Init+0x54>)
 8001eea:	f005 f903 	bl	80070f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <MFRC522_Init+0x58>)
 8001ef4:	f005 f8fe 	bl	80070f4 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001ef8:	f7ff ffea 	bl	8001ed0 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001efc:	218d      	movs	r1, #141	@ 0x8d
 8001efe:	202a      	movs	r0, #42	@ 0x2a
 8001f00:	f7ff ff50 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001f04:	213e      	movs	r1, #62	@ 0x3e
 8001f06:	202b      	movs	r0, #43	@ 0x2b
 8001f08:	f7ff ff4c 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8001f0c:	211e      	movs	r1, #30
 8001f0e:	202d      	movs	r0, #45	@ 0x2d
 8001f10:	f7ff ff48 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001f14:	2100      	movs	r1, #0
 8001f16:	202c      	movs	r0, #44	@ 0x2c
 8001f18:	f7ff ff44 	bl	8001da4 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001f1c:	2140      	movs	r1, #64	@ 0x40
 8001f1e:	2015      	movs	r0, #21
 8001f20:	f7ff ff40 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001f24:	213d      	movs	r1, #61	@ 0x3d
 8001f26:	2011      	movs	r0, #17
 8001f28:	f7ff ff3c 	bl	8001da4 <Write_MFRC522>

	AntennaOn();
 8001f2c:	f7ff ffc5 	bl	8001eba <AntennaOn>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020400 	.word	0x40020400

08001f3c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001f52:	2300      	movs	r3, #0
 8001f54:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d006      	beq.n	8001f6e <MFRC522_ToCard+0x32>
 8001f60:	2b0e      	cmp	r3, #14
 8001f62:	d109      	bne.n	8001f78 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001f64:	2312      	movs	r3, #18
 8001f66:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001f68:	2310      	movs	r3, #16
 8001f6a:	777b      	strb	r3, [r7, #29]
			break;
 8001f6c:	e005      	b.n	8001f7a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001f6e:	2377      	movs	r3, #119	@ 0x77
 8001f70:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001f72:	2330      	movs	r3, #48	@ 0x30
 8001f74:	777b      	strb	r3, [r7, #29]
			break;
 8001f76:	e000      	b.n	8001f7a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001f78:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001f7a:	7fbb      	ldrb	r3, [r7, #30]
 8001f7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	2002      	movs	r0, #2
 8001f86:	f7ff ff0d 	bl	8001da4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	2004      	movs	r0, #4
 8001f8e:	f7ff ff74 	bl	8001e7a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	200a      	movs	r0, #10
 8001f96:	f7ff ff55 	bl	8001e44 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff ff01 	bl	8001da4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	e00a      	b.n	8001fbe <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2009      	movs	r0, #9
 8001fb4:	f7ff fef6 	bl	8001da4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3f0      	bcc.n	8001fa8 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff feea 	bl	8001da4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d103      	bne.n	8001fde <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	200d      	movs	r0, #13
 8001fda:	f7ff ff33 	bl	8001e44 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001fde:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fe2:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001fe4:	2004      	movs	r0, #4
 8001fe6:	f7ff ff03 	bl	8001df0 <Read_MFRC522>
 8001fea:	4603      	mov	r3, r0
 8001fec:	773b      	strb	r3, [r7, #28]
        i--;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <MFRC522_ToCard+0xd4>
 8001ffa:	7f3b      	ldrb	r3, [r7, #28]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <MFRC522_ToCard+0xd4>
 8002004:	7f3a      	ldrb	r2, [r7, #28]
 8002006:	7f7b      	ldrb	r3, [r7, #29]
 8002008:	4013      	ands	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0e9      	beq.n	8001fe4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	200d      	movs	r0, #13
 8002014:	f7ff ff31 	bl	8001e7a <ClearBitMask>
	
    if (i != 0)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d052      	beq.n	80020c4 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800201e:	2006      	movs	r0, #6
 8002020:	f7ff fee6 	bl	8001df0 <Read_MFRC522>
 8002024:	4603      	mov	r3, r0
 8002026:	f003 031b 	and.w	r3, r3, #27
 800202a:	2b00      	cmp	r3, #0
 800202c:	d148      	bne.n	80020c0 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8002032:	7f3a      	ldrb	r2, [r7, #28]
 8002034:	7fbb      	ldrb	r3, [r7, #30]
 8002036:	4013      	ands	r3, r2
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8002042:	2301      	movs	r3, #1
 8002044:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d13b      	bne.n	80020c4 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800204c:	200a      	movs	r0, #10
 800204e:	f7ff fecf 	bl	8001df0 <Read_MFRC522>
 8002052:	4603      	mov	r3, r0
 8002054:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002056:	200c      	movs	r0, #12
 8002058:	f7ff feca 	bl	8001df0 <Read_MFRC522>
 800205c:	4603      	mov	r3, r0
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800206a:	7f3b      	ldrb	r3, [r7, #28]
 800206c:	3b01      	subs	r3, #1
 800206e:	00da      	lsls	r2, r3, #3
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	4413      	add	r3, r2
 8002074:	461a      	mov	r2, r3
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e004      	b.n	8002086 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 800207c:	7f3b      	ldrb	r3, [r7, #28]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	461a      	mov	r2, r3
 8002082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002084:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002086:	7f3b      	ldrb	r3, [r7, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 800208c:	2301      	movs	r3, #1
 800208e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8002090:	7f3b      	ldrb	r3, [r7, #28]
 8002092:	2b10      	cmp	r3, #16
 8002094:	d901      	bls.n	800209a <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8002096:	2310      	movs	r3, #16
 8002098:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	e00a      	b.n	80020b6 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	18d4      	adds	r4, r2, r3
 80020a6:	2009      	movs	r0, #9
 80020a8:	f7ff fea2 	bl	8001df0 <Read_MFRC522>
 80020ac:	4603      	mov	r3, r0
 80020ae:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	7f3b      	ldrb	r3, [r7, #28]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3f0      	bcc.n	80020a0 <MFRC522_ToCard+0x164>
 80020be:	e001      	b.n	80020c4 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 80020c0:	2302      	movs	r3, #2
 80020c2:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}

080020ce <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	4603      	mov	r3, r0
 80020d6:	6039      	str	r1, [r7, #0]
 80020d8:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80020da:	2107      	movs	r1, #7
 80020dc:	200d      	movs	r0, #13
 80020de:	f7ff fe61 	bl	8001da4 <Write_MFRC522>
	
	TagType[0] = reqMode;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	200c      	movs	r0, #12
 80020f6:	f7ff ff21 	bl	8001f3c <MFRC522_ToCard>
 80020fa:	4603      	mov	r3, r0
 80020fc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <MFRC522_Request+0x3c>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d001      	beq.n	800210e <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 800210a:	2302      	movs	r3, #2
 800210c:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af02      	add	r7, sp, #8
 800211e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8002120:	2300      	movs	r3, #0
 8002122:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002124:	2100      	movs	r1, #0
 8002126:	200d      	movs	r0, #13
 8002128:	f7ff fe3c 	bl	8001da4 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2293      	movs	r2, #147	@ 0x93
 8002130:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	2220      	movs	r2, #32
 8002138:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	200c      	movs	r0, #12
 8002148:	f7ff fef8 	bl	8001f3c <MFRC522_ToCard>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	73bb      	strb	r3, [r7, #14]
 800215a:	e009      	b.n	8002170 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	7b7b      	ldrb	r3, [r7, #13]
 8002166:	4053      	eors	r3, r2
 8002168:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	3301      	adds	r3, #1
 800216e:	73bb      	strb	r3, [r7, #14]
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d9f2      	bls.n	800215c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	7b7a      	ldrb	r2, [r7, #13]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8002184:	2302      	movs	r3, #2
 8002186:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
} 
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern volatile uint8_t can_rx_flag;
extern volatile uint32_t can_rx_count ;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit(&huart1, (uint8_t*)"INTERRUPT OK\r\n", 15, HAL_MAX_DELAY);
        HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData) ;
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800219e:	4a09      	ldr	r2, [pc, #36]	@ (80021c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80021a0:	2100      	movs	r1, #0
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f003 fdc0 	bl	8005d28 <HAL_CAN_GetRxMessage>
                  can_rx_flag = 1;  // báo về main xử lý
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
                  can_rx_count++;  // tăng biến đếm khi nhận
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200007a0 	.word	0x200007a0
 80021c4:	20000784 	.word	0x20000784
 80021c8:	200007a8 	.word	0x200007a8
 80021cc:	200007b4 	.word	0x200007b4

080021d0 <CAN_SendTopicData>:

    return status;
}

HAL_StatusTypeDef CAN_SendTopicData(uint16_t topic_id, uint8_t *data, uint8_t len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	4613      	mov	r3, r2
 80021de:	717b      	strb	r3, [r7, #5]
    uint32_t TxMailbox;

    if (len > 8) len = 8;
 80021e0:	797b      	ldrb	r3, [r7, #5]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d901      	bls.n	80021ea <CAN_SendTopicData+0x1a>
 80021e6:	2308      	movs	r3, #8
 80021e8:	717b      	strb	r3, [r7, #5]

    TxHeader.StdId = topic_id;
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <CAN_SendTopicData+0x5c>)
 80021ee:	6013      	str	r3, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <CAN_SendTopicData+0x5c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <CAN_SendTopicData+0x5c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = len;
 80021fc:	797b      	ldrb	r3, [r7, #5]
 80021fe:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <CAN_SendTopicData+0x5c>)
 8002200:	6113      	str	r3, [r2, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <CAN_SendTopicData+0x5c>)
 8002204:	2200      	movs	r2, #0
 8002206:	751a      	strb	r2, [r3, #20]
    }
    snprintf(log + offset, sizeof(log) - offset, "\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t*)log, strlen(log), 1);
#endif

    can_tx_count++;
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <CAN_SendTopicData+0x60>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <CAN_SendTopicData+0x60>)
 8002210:	6013      	str	r3, [r2, #0]
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox);
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4904      	ldr	r1, [pc, #16]	@ (800222c <CAN_SendTopicData+0x5c>)
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <CAN_SendTopicData+0x64>)
 800221c:	f003 fcb4 	bl	8005b88 <HAL_CAN_AddTxMessage>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000076c 	.word	0x2000076c
 8002230:	200007b0 	.word	0x200007b0
 8002234:	200003d0 	.word	0x200003d0

08002238 <Send_All_SensorData_CAN>:
extern uint32_t imu_timer;
extern volatile uint8_t timer10ms_flag ;


void Send_All_SensorData_CAN(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	static uint32_t last_us_trigger_time=0 ;
    if (timer10ms_flag) {
 800223c:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <Send_All_SensorData_CAN+0x94>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <Send_All_SensorData_CAN+0x18>
        timer10ms_flag = 0;
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <Send_All_SensorData_CAN+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
        BNO055_SendEulerCAN();
 800224c:	f7ff fac6 	bl	80017dc <BNO055_SendEulerCAN>
    }

    if (HAL_GetTick() - debug_timer >= 10) {
 8002250:	f002 fd94 	bl	8004d7c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <Send_All_SensorData_CAN+0x98>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b09      	cmp	r3, #9
 800225e:	d906      	bls.n	800226e <Send_All_SensorData_CAN+0x36>
        BNO055_PrintEulerDebug();
 8002260:	f7ff fb18 	bl	8001894 <BNO055_PrintEulerDebug>
        debug_timer = HAL_GetTick();
 8002264:	f002 fd8a 	bl	8004d7c <HAL_GetTick>
 8002268:	4603      	mov	r3, r0
 800226a:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <Send_All_SensorData_CAN+0x98>)
 800226c:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - last_us_trigger_time >= 200) {
 800226e:	f002 fd85 	bl	8004d7c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <Send_All_SensorData_CAN+0x9c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2bc7      	cmp	r3, #199	@ 0xc7
 800227c:	d90a      	bls.n	8002294 <Send_All_SensorData_CAN+0x5c>
            US01_TriggerAll_Sequential();      // Blocking đo 4 cảm biến
 800227e:	f002 fcb4 	bl	8004bea <US01_TriggerAll_Sequential>
            PrintAllDistances();               // UART in khoảng cách
 8002282:	f002 fccb 	bl	8004c1c <PrintAllDistances>
            US01_SendAllDistances_CAN();       // Gửi qua CAN
 8002286:	f002 fc77 	bl	8004b78 <US01_SendAllDistances_CAN>
            last_us_trigger_time = HAL_GetTick();
 800228a:	f002 fd77 	bl	8004d7c <HAL_GetTick>
 800228e:	4603      	mov	r3, r0
 8002290:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <Send_All_SensorData_CAN+0x9c>)
 8002292:	6013      	str	r3, [r2, #0]
        }



    static uint32_t last_mq135_time = 0;
    if (HAL_GetTick() - last_mq135_time >= 1000) {
 8002294:	f002 fd72 	bl	8004d7c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <Send_All_SensorData_CAN+0xa0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a4:	d30d      	bcc.n	80022c2 <Send_All_SensorData_CAN+0x8a>
        MQ135_Send_CAN(&mq135, 25.0f, 50.0f, &huart1, TOPIC_ID_MQ135);  // Dùng hàm DMA mới
 80022a6:	2211      	movs	r2, #17
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <Send_All_SensorData_CAN+0xa4>)
 80022aa:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80022e0 <Send_All_SensorData_CAN+0xa8>
 80022ae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80022b2:	480c      	ldr	r0, [pc, #48]	@ (80022e4 <Send_All_SensorData_CAN+0xac>)
 80022b4:	f7ff fd14 	bl	8001ce0 <MQ135_Send_CAN>
        last_mq135_time = HAL_GetTick();
 80022b8:	f002 fd60 	bl	8004d7c <HAL_GetTick>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <Send_All_SensorData_CAN+0xa0>)
 80022c0:	6013      	str	r3, [r2, #0]
    }
    checkRFIDAndControlRelay();
 80022c2:	f001 fab3 	bl	800382c <checkRFIDAndControlRelay>
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200007bc 	.word	0x200007bc
 80022d0:	200007ac 	.word	0x200007ac
 80022d4:	20000318 	.word	0x20000318
 80022d8:	2000031c 	.word	0x2000031c
 80022dc:	200006cc 	.word	0x200006cc
 80022e0:	42480000 	.word	0x42480000
 80022e4:	20000750 	.word	0x20000750

080022e8 <check_it>:
    char adc[32];
    sprintf(adc, "ADC VALUE: %d\r\n", adc_value);
    HAL_UART_Transmit(&huart1, (uint8_t*)adc, strlen(adc), HAL_MAX_DELAY);
}

void check_it(TIM_HandleTypeDef *htimx) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	@ 0x50
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    char *timer_name = "UNKNOWN";
 80022f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <check_it+0x7c>)
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (htimx->Instance == TIM1) timer_name = "TIM1";
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <check_it+0x80>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d102      	bne.n	8002304 <check_it+0x1c>
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <check_it+0x84>)
 8002300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002302:	e016      	b.n	8002332 <check_it+0x4a>
    else if (htimx->Instance == TIM2) timer_name = "TIM2";
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230c:	d102      	bne.n	8002314 <check_it+0x2c>
 800230e:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <check_it+0x88>)
 8002310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002312:	e00e      	b.n	8002332 <check_it+0x4a>
    else if (htimx->Instance == TIM4) timer_name = "TIM4";
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <check_it+0x8c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d102      	bne.n	8002324 <check_it+0x3c>
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <check_it+0x90>)
 8002320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002322:	e006      	b.n	8002332 <check_it+0x4a>
    else if (htimx->Instance == TIM8) timer_name = "TIM8";
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <check_it+0x94>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <check_it+0x4a>
 800232e:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <check_it+0x98>)
 8002330:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char msg[64];
    snprintf(msg, sizeof(msg), ">> [INTERRUPT] Callback from %s\r\n", timer_name);
 8002332:	f107 000c 	add.w	r0, r7, #12
 8002336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002338:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <check_it+0x9c>)
 800233a:	2140      	movs	r1, #64	@ 0x40
 800233c:	f00a fa3e 	bl	800c7bc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4618      	mov	r0, r3
 8002346:	f7fd ff93 	bl	8000270 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b29a      	uxth	r2, r3
 800234e:	f107 010c 	add.w	r1, r7, #12
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	480c      	ldr	r0, [pc, #48]	@ (8002388 <check_it+0xa0>)
 8002358:	f008 fcf2 	bl	800ad40 <HAL_UART_Transmit>
}
 800235c:	bf00      	nop
 800235e:	3750      	adds	r7, #80	@ 0x50
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0800f8dc 	.word	0x0800f8dc
 8002368:	40010000 	.word	0x40010000
 800236c:	0800f8e4 	.word	0x0800f8e4
 8002370:	0800f8ec 	.word	0x0800f8ec
 8002374:	40000800 	.word	0x40000800
 8002378:	0800f8f4 	.word	0x0800f8f4
 800237c:	40010400 	.word	0x40010400
 8002380:	0800f8fc 	.word	0x0800f8fc
 8002384:	0800f904 	.word	0x0800f904
 8002388:	200006cc 	.word	0x200006cc

0800238c <Process_Ultrasonic_And_Control_Relay>:
#include "ultrasonic_sensor.h"
#include "can_tranceive.h"
#include "can_topic.h"
#include "led_control.h"
void Process_Ultrasonic_And_Control_Relay(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
    static uint8_t initialized = 0;

    uint32_t Truoc2 = US01_GetDistance(0);
 8002392:	2000      	movs	r0, #0
 8002394:	f002 fbc4 	bl	8004b20 <US01_GetDistance>
 8002398:	61b8      	str	r0, [r7, #24]
    uint32_t Truoc1 = US01_GetDistance(2);
 800239a:	2002      	movs	r0, #2
 800239c:	f002 fbc0 	bl	8004b20 <US01_GetDistance>
 80023a0:	6178      	str	r0, [r7, #20]
    uint32_t Trai   = US01_GetDistance(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f002 fbbc 	bl	8004b20 <US01_GetDistance>
 80023a8:	6138      	str	r0, [r7, #16]
    uint32_t Phai   = US01_GetDistance(3);
 80023aa:	2003      	movs	r0, #3
 80023ac:	f002 fbb8 	bl	8004b20 <US01_GetDistance>
 80023b0:	60f8      	str	r0, [r7, #12]

    if (!initialized) {
 80023b2:	4b57      	ldr	r3, [pc, #348]	@ (8002510 <Process_Ultrasonic_And_Control_Relay+0x184>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <Process_Ultrasonic_And_Control_Relay+0x4a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // Đỏ OFF
 80023ba:	2200      	movs	r2, #0
 80023bc:	2104      	movs	r1, #4
 80023be:	4855      	ldr	r0, [pc, #340]	@ (8002514 <Process_Ultrasonic_And_Control_Relay+0x188>)
 80023c0:	f004 fe98 	bl	80070f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Xanh ON
 80023c4:	2201      	movs	r2, #1
 80023c6:	2108      	movs	r1, #8
 80023c8:	4852      	ldr	r0, [pc, #328]	@ (8002514 <Process_Ultrasonic_And_Control_Relay+0x188>)
 80023ca:	f004 fe93 	bl	80070f4 <HAL_GPIO_WritePin>
        initialized = 1;
 80023ce:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <Process_Ultrasonic_And_Control_Relay+0x184>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e098      	b.n	8002508 <Process_Ultrasonic_And_Control_Relay+0x17c>
        return;
    }

    // Kiểm tra các vùng
    bool Truoc_OK  = (Truoc1 < 30 && Truoc1 != 0) || (Truoc2 < 30 && Truoc2 != 0);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b1d      	cmp	r3, #29
 80023da:	d802      	bhi.n	80023e2 <Process_Ultrasonic_And_Control_Relay+0x56>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <Process_Ultrasonic_And_Control_Relay+0x62>
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b1d      	cmp	r3, #29
 80023e6:	d804      	bhi.n	80023f2 <Process_Ultrasonic_And_Control_Relay+0x66>
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <Process_Ultrasonic_And_Control_Relay+0x66>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <Process_Ultrasonic_And_Control_Relay+0x68>
 80023f2:	2300      	movs	r3, #0
 80023f4:	72fb      	strb	r3, [r7, #11]
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	72fb      	strb	r3, [r7, #11]
    bool HaiBen_OK = (Trai   < 25 && Trai   != 0) || (Phai   < 25 && Phai   != 0);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b18      	cmp	r3, #24
 8002402:	d802      	bhi.n	800240a <Process_Ultrasonic_And_Control_Relay+0x7e>
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <Process_Ultrasonic_And_Control_Relay+0x8a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b18      	cmp	r3, #24
 800240e:	d804      	bhi.n	800241a <Process_Ultrasonic_And_Control_Relay+0x8e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <Process_Ultrasonic_And_Control_Relay+0x8e>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <Process_Ultrasonic_And_Control_Relay+0x90>
 800241a:	2300      	movs	r3, #0
 800241c:	72bb      	strb	r3, [r7, #10]
 800241e:	7abb      	ldrb	r3, [r7, #10]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	72bb      	strb	r3, [r7, #10]
    bool BaBen_OK  = Truoc_OK && HaiBen_OK;
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <Process_Ultrasonic_And_Control_Relay+0xaa>
 800242c:	7abb      	ldrb	r3, [r7, #10]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <Process_Ultrasonic_And_Control_Relay+0xaa>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <Process_Ultrasonic_And_Control_Relay+0xac>
 8002436:	2300      	movs	r3, #0
 8002438:	727b      	strb	r3, [r7, #9]
 800243a:	7a7b      	ldrb	r3, [r7, #9]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	727b      	strb	r3, [r7, #9]
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
                     (Truoc2 < 25 && Truoc2 != 0) &&
                     (Trai   < 20 && Trai   != 0) &&
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b18      	cmp	r3, #24
 8002446:	d816      	bhi.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b18      	cmp	r3, #24
 8002452:	d810      	bhi.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Truoc2 < 25 && Truoc2 != 0) &&
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b13      	cmp	r3, #19
 800245e:	d80a      	bhi.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Trai   < 20 && Trai   != 0) &&
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b13      	cmp	r3, #19
 800246a:	d804      	bhi.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Phai   < 20 && Phai   != 0);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Trai   < 20 && Trai   != 0) &&
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <Process_Ultrasonic_And_Control_Relay+0xec>
 8002476:	2300      	movs	r3, #0
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
 8002478:	723b      	strb	r3, [r7, #8]
 800247a:	7a3b      	ldrb	r3, [r7, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	723b      	strb	r3, [r7, #8]

    uint8_t signal = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	77fb      	strb	r3, [r7, #31]

    // Xác định giá trị gửi
    if (TatCa_OK) {
 8002486:	7a3b      	ldrb	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <Process_Ultrasonic_And_Control_Relay+0x106>
        signal = 0x03;
 800248c:	2303      	movs	r3, #3
 800248e:	77fb      	strb	r3, [r7, #31]
 8002490:	e00d      	b.n	80024ae <Process_Ultrasonic_And_Control_Relay+0x122>
    } else if (BaBen_OK) {
 8002492:	7a7b      	ldrb	r3, [r7, #9]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <Process_Ultrasonic_And_Control_Relay+0x112>
        signal = 0x02;
 8002498:	2302      	movs	r3, #2
 800249a:	77fb      	strb	r3, [r7, #31]
 800249c:	e007      	b.n	80024ae <Process_Ultrasonic_And_Control_Relay+0x122>
    } else if (Truoc_OK) {
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <Process_Ultrasonic_And_Control_Relay+0x11e>
        signal = 0x01;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
 80024a8:	e001      	b.n	80024ae <Process_Ultrasonic_And_Control_Relay+0x122>
    } else {
        signal = 0x00; // Ra khỏi 3 trường hợp trên
 80024aa:	2300      	movs	r3, #0
 80024ac:	77fb      	strb	r3, [r7, #31]
    }

    // Điều khiển đèn
    if (TatCa_OK || BaBen_OK || Truoc_OK || HaiBen_OK) {
 80024ae:	7a3b      	ldrb	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <Process_Ultrasonic_And_Control_Relay+0x13a>
 80024b4:	7a7b      	ldrb	r3, [r7, #9]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <Process_Ultrasonic_And_Control_Relay+0x13a>
 80024ba:	7afb      	ldrb	r3, [r7, #11]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <Process_Ultrasonic_And_Control_Relay+0x13a>
 80024c0:	7abb      	ldrb	r3, [r7, #10]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <Process_Ultrasonic_And_Control_Relay+0x150>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Đỏ ON
 80024c6:	2201      	movs	r2, #1
 80024c8:	2104      	movs	r1, #4
 80024ca:	4812      	ldr	r0, [pc, #72]	@ (8002514 <Process_Ultrasonic_And_Control_Relay+0x188>)
 80024cc:	f004 fe12 	bl	80070f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // Xanh OFF
 80024d0:	2200      	movs	r2, #0
 80024d2:	2108      	movs	r1, #8
 80024d4:	480f      	ldr	r0, [pc, #60]	@ (8002514 <Process_Ultrasonic_And_Control_Relay+0x188>)
 80024d6:	f004 fe0d 	bl	80070f4 <HAL_GPIO_WritePin>
 80024da:	e009      	b.n	80024f0 <Process_Ultrasonic_And_Control_Relay+0x164>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // Đỏ OFF
 80024dc:	2200      	movs	r2, #0
 80024de:	2104      	movs	r1, #4
 80024e0:	480c      	ldr	r0, [pc, #48]	@ (8002514 <Process_Ultrasonic_And_Control_Relay+0x188>)
 80024e2:	f004 fe07 	bl	80070f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Xanh ON
 80024e6:	2201      	movs	r2, #1
 80024e8:	2108      	movs	r1, #8
 80024ea:	480a      	ldr	r0, [pc, #40]	@ (8002514 <Process_Ultrasonic_And_Control_Relay+0x188>)
 80024ec:	f004 fe02 	bl	80070f4 <HAL_GPIO_WritePin>
    }

    // Luôn gửi giá trị hiện tại
    uint8_t data[8] = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
    data[0] = signal;
 80024f8:	7ffb      	ldrb	r3, [r7, #31]
 80024fa:	703b      	strb	r3, [r7, #0]
    CAN_SendTopicData(TOPIC_ID_SENSOR, data, 8);
 80024fc:	463b      	mov	r3, r7
 80024fe:	2208      	movs	r2, #8
 8002500:	4619      	mov	r1, r3
 8002502:	2022      	movs	r0, #34	@ 0x22
 8002504:	f7ff fe64 	bl	80021d0 <CAN_SendTopicData>
}
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000320 	.word	0x20000320
 8002514:	40020000 	.word	0x40020000

08002518 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8002522:	4a38      	ldr	r2, [pc, #224]	@ (8002604 <HD44780_Init+0xec>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <HD44780_Init+0xf0>)
 800252a:	2208      	movs	r2, #8
 800252c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800252e:	4b37      	ldr	r3, [pc, #220]	@ (800260c <HD44780_Init+0xf4>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002534:	4b33      	ldr	r3, [pc, #204]	@ (8002604 <HD44780_Init+0xec>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d907      	bls.n	800254c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800253c:	4b33      	ldr	r3, [pc, #204]	@ (800260c <HD44780_Init+0xf4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b31      	ldr	r3, [pc, #196]	@ (800260c <HD44780_Init+0xf4>)
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e006      	b.n	800255a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800254c:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <HD44780_Init+0xf4>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <HD44780_Init+0xf4>)
 8002558:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800255a:	f000 f94b 	bl	80027f4 <DelayInit>
  HAL_Delay(50);
 800255e:	2032      	movs	r0, #50	@ 0x32
 8002560:	f002 fc18 	bl	8004d94 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8002564:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <HD44780_Init+0xf0>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f909 	bl	8002780 <ExpanderWrite>
  HAL_Delay(1000);
 800256e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002572:	f002 fc0f 	bl	8004d94 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8002576:	2030      	movs	r0, #48	@ 0x30
 8002578:	f000 f8f1 	bl	800275e <Write4Bits>
  DelayUS(4500);
 800257c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002580:	f000 f962 	bl	8002848 <DelayUS>

  Write4Bits(0x03 << 4);
 8002584:	2030      	movs	r0, #48	@ 0x30
 8002586:	f000 f8ea 	bl	800275e <Write4Bits>
  DelayUS(4500);
 800258a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800258e:	f000 f95b 	bl	8002848 <DelayUS>

  Write4Bits(0x03 << 4);
 8002592:	2030      	movs	r0, #48	@ 0x30
 8002594:	f000 f8e3 	bl	800275e <Write4Bits>
  DelayUS(4500);
 8002598:	f241 1094 	movw	r0, #4500	@ 0x1194
 800259c:	f000 f954 	bl	8002848 <DelayUS>

  Write4Bits(0x02 << 4);
 80025a0:	2020      	movs	r0, #32
 80025a2:	f000 f8dc 	bl	800275e <Write4Bits>
  DelayUS(100);
 80025a6:	2064      	movs	r0, #100	@ 0x64
 80025a8:	f000 f94e 	bl	8002848 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80025ac:	4b17      	ldr	r3, [pc, #92]	@ (800260c <HD44780_Init+0xf4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f043 0320 	orr.w	r3, r3, #32
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f894 	bl	80026e4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HD44780_Init+0xf8>)
 80025be:	2204      	movs	r2, #4
 80025c0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80025c2:	f000 f843 	bl	800264c <HD44780_Display>
  HD44780_Clear();
 80025c6:	f000 f82b 	bl	8002620 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80025ca:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HD44780_Init+0xfc>)
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80025d0:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HD44780_Init+0xfc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f882 	bl	80026e4 <SendCommand>
  DelayUS(4500);
 80025e0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80025e4:	f000 f930 	bl	8002848 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80025e8:	490b      	ldr	r1, [pc, #44]	@ (8002618 <HD44780_Init+0x100>)
 80025ea:	2000      	movs	r0, #0
 80025ec:	f000 f844 	bl	8002678 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80025f0:	490a      	ldr	r1, [pc, #40]	@ (800261c <HD44780_Init+0x104>)
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 f840 	bl	8002678 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80025f8:	f000 f81d 	bl	8002636 <HD44780_Home>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000324 	.word	0x20000324
 8002608:	20000325 	.word	0x20000325
 800260c:	20000321 	.word	0x20000321
 8002610:	20000322 	.word	0x20000322
 8002614:	20000323 	.word	0x20000323
 8002618:	20000000 	.word	0x20000000
 800261c:	20000008 	.word	0x20000008

08002620 <HD44780_Clear>:

void HD44780_Clear()
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002624:	2001      	movs	r0, #1
 8002626:	f000 f85d 	bl	80026e4 <SendCommand>
  DelayUS(2000);
 800262a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800262e:	f000 f90b 	bl	8002848 <DelayUS>
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}

08002636 <HD44780_Home>:

void HD44780_Home()
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800263a:	2002      	movs	r0, #2
 800263c:	f000 f852 	bl	80026e4 <SendCommand>
  DelayUS(2000);
 8002640:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002644:	f000 f900 	bl	8002848 <DelayUS>
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HD44780_Display+0x28>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HD44780_Display+0x28>)
 800265c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800265e:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <HD44780_Display+0x28>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f83b 	bl	80026e4 <SendCommand>
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000322 	.word	0x20000322

08002678 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002698:	b25b      	sxtb	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f821 	bl	80026e4 <SendCommand>
  for (int i=0; i<8; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e009      	b.n	80026bc <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f825 	bl	8002700 <SendChar>
  for (int i=0; i<8; i++)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b07      	cmp	r3, #7
 80026c0:	ddf2      	ble.n	80026a8 <HD44780_CreateSpecialChar+0x30>
  }
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80026d0:	4b03      	ldr	r3, [pc, #12]	@ (80026e0 <HD44780_Backlight+0x14>)
 80026d2:	2208      	movs	r2, #8
 80026d4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 f852 	bl	8002780 <ExpanderWrite>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000325 	.word	0x20000325

080026e4 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f812 	bl	800271c <Send>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f804 	bl	800271c <Send>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	460a      	mov	r2, r1
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	4613      	mov	r3, r2
 800272a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f023 030f 	bic.w	r3, r3, #15
 8002732:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	79bb      	ldrb	r3, [r7, #6]
 800273e:	4313      	orrs	r3, r2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f80b 	bl	800275e <Write4Bits>
  Write4Bits((lownib)|mode);
 8002748:	7bba      	ldrb	r2, [r7, #14]
 800274a:	79bb      	ldrb	r3, [r7, #6]
 800274c:	4313      	orrs	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f804 	bl	800275e <Write4Bits>
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f808 	bl	8002780 <ExpanderWrite>
  PulseEnable(value);
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f820 	bl	80027b8 <PulseEnable>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <ExpanderWrite+0x30>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	4313      	orrs	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002796:	f107 020f 	add.w	r2, r7, #15
 800279a:	230a      	movs	r3, #10
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	214e      	movs	r1, #78	@ 0x4e
 80027a2:	4804      	ldr	r0, [pc, #16]	@ (80027b4 <ExpanderWrite+0x34>)
 80027a4:	f004 fe04 	bl	80073b0 <HAL_I2C_Master_Transmit>
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000325 	.word	0x20000325
 80027b4:	20000428 	.word	0x20000428

080027b8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ffd8 	bl	8002780 <ExpanderWrite>
  DelayUS(20);
 80027d0:	2014      	movs	r0, #20
 80027d2:	f000 f839 	bl	8002848 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ffce 	bl	8002780 <ExpanderWrite>
  DelayUS(20);
 80027e4:	2014      	movs	r0, #20
 80027e6:	f000 f82f 	bl	8002848 <DelayUS>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <DelayInit>:

static void DelayInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <DelayInit+0x4c>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <DelayInit+0x4c>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002802:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <DelayInit+0x4c>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <DelayInit+0x4c>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800280e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <DelayInit+0x50>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0b      	ldr	r2, [pc, #44]	@ (8002844 <DelayInit+0x50>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <DelayInit+0x50>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a08      	ldr	r2, [pc, #32]	@ (8002844 <DelayInit+0x50>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <DelayInit+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800282e:	bf00      	nop
  __ASM volatile ("NOP");
 8002830:	bf00      	nop
  __ASM volatile ("NOP");
 8002832:	bf00      	nop
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000edf0 	.word	0xe000edf0
 8002844:	e0001000 	.word	0xe0001000

08002848 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <DelayUS+0x44>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0e      	ldr	r2, [pc, #56]	@ (8002890 <DelayUS+0x48>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9a      	lsrs	r2, r3, #18
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <DelayUS+0x4c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <DelayUS+0x4c>)
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d8f6      	bhi.n	800286a <DelayUS+0x22>
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200000f0 	.word	0x200000f0
 8002890:	431bde83 	.word	0x431bde83
 8002894:	e0001000 	.word	0xe0001000

08002898 <HAL_TIM_PeriodElapsedCallback>:
uint32_t ADC_SAMPLES[1000];
uint32_t NUM_SAMPLES = 0;
volatile uint8_t mq135_done = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a05      	ldr	r2, [pc, #20]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d102      	bne.n	80028b0 <HAL_TIM_PeriodElapsedCallback+0x18>
        timer10ms_flag = 1;
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
    }
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40001400 	.word	0x40001400
 80028c0:	200007bc 	.word	0x200007bc

080028c4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    static uint32_t idx = 0;
    ADC_SAMPLES[idx++] = HAL_ADC_GetValue(hadc);
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_ADC_ConvCpltCallback+0x50>)
 80028ce:	681c      	ldr	r4, [r3, #0]
 80028d0:	1c63      	adds	r3, r4, #1
 80028d2:	4a10      	ldr	r2, [pc, #64]	@ (8002914 <HAL_ADC_ConvCpltCallback+0x50>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f002 fcef 	bl	80052ba <HAL_ADC_GetValue>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <HAL_ADC_ConvCpltCallback+0x54>)
 80028e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    if (idx < NUM_SAMPLES) {
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_ADC_ConvCpltCallback+0x50>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <HAL_ADC_ConvCpltCallback+0x58>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d203      	bcs.n	80028f8 <HAL_ADC_ConvCpltCallback+0x34>
        HAL_ADC_Start_IT(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f002 fab7 	bl	8004e64 <HAL_ADC_Start_IT>
    } else {
        HAL_ADC_Stop_IT(hadc);
        mq135_done = 1;
        idx = 0;
    }
}
 80028f6:	e008      	b.n	800290a <HAL_ADC_ConvCpltCallback+0x46>
        HAL_ADC_Stop_IT(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f002 fb91 	bl	8005020 <HAL_ADC_Stop_IT>
        mq135_done = 1;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
        idx = 0;
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_ADC_ConvCpltCallback+0x50>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	bf00      	nop
 8002914:	20001768 	.word	0x20001768
 8002918:	200007c0 	.word	0x200007c0
 800291c:	20001760 	.word	0x20001760
 8002920:	20001764 	.word	0x20001764

08002924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b092      	sub	sp, #72	@ 0x48
 8002928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800292a:	f002 f9c1 	bl	8004cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292e:	f000 f8a5 	bl	8002a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002932:	f000 fd9d 	bl	8003470 <MX_GPIO_Init>
  MX_DMA_Init();
 8002936:	f000 fd7b 	bl	8003430 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800293a:	f000 fd4f 	bl	80033dc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800293e:	f000 fa23 	bl	8002d88 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002942:	f000 f905 	bl	8002b50 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002946:	f000 f955 	bl	8002bf4 <MX_CAN1_Init>
  MX_CRC_Init();
 800294a:	f000 f9dd 	bl	8002d08 <MX_CRC_Init>
  MX_TIM8_Init();
 800294e:	f000 fcd1 	bl	80032f4 <MX_TIM8_Init>
  MX_CAN2_Init();
 8002952:	f000 f9a5 	bl	8002ca0 <MX_CAN2_Init>
  MX_I2C3_Init();
 8002956:	f000 f9eb 	bl	8002d30 <MX_I2C3_Init>
  MX_TIM1_Init();
 800295a:	f000 fa4b 	bl	8002df4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800295e:	f000 fb0d 	bl	8002f7c <MX_TIM2_Init>
  MX_TIM4_Init();
 8002962:	f000 fbeb 	bl	800313c <MX_TIM4_Init>
  MX_TIM6_Init();
 8002966:	f000 fc59 	bl	800321c <MX_TIM6_Init>
  MX_TIM3_Init();
 800296a:	f000 fb77 	bl	800305c <MX_TIM3_Init>
  MX_TIM7_Init();
 800296e:	f000 fc8b 	bl	8003288 <MX_TIM7_Init>
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
//  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
//  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
//  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1);
  MFRC522_Init();
 8002972:	f7ff fab5 	bl	8001ee0 <MFRC522_Init>
  BNO055_Init();
 8002976:	f7fe febf 	bl	80016f8 <BNO055_Init>
  HD44780_Init(2);       // LCD 2 dòng
 800297a:	2002      	movs	r0, #2
 800297c:	f7ff fdcc 	bl	8002518 <HD44780_Init>
  HD44780_Backlight();   // Bật đèn nền
 8002980:	f7ff fea4 	bl	80026cc <HD44780_Backlight>
  MQ135_Config(&mq135, &hadc1);
 8002984:	4930      	ldr	r1, [pc, #192]	@ (8002a48 <main+0x124>)
 8002986:	4831      	ldr	r0, [pc, #196]	@ (8002a4c <main+0x128>)
 8002988:	f7ff f872 	bl	8001a70 <MQ135_Config>
  HAL_CAN_Start(&hcan1);
 800298c:	4830      	ldr	r0, [pc, #192]	@ (8002a50 <main+0x12c>)
 800298e:	f003 f8b7 	bl	8005b00 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8002992:	4830      	ldr	r0, [pc, #192]	@ (8002a54 <main+0x130>)
 8002994:	f003 f8b4 	bl	8005b00 <HAL_CAN_Start>
  CAN_DebugStatus();
 8002998:	f7fe ffc4 	bl	8001924 <CAN_DebugStatus>
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800299c:	492e      	ldr	r1, [pc, #184]	@ (8002a58 <main+0x134>)
 800299e:	482c      	ldr	r0, [pc, #176]	@ (8002a50 <main+0x12c>)
 80029a0:	f002 ffd0 	bl	8005944 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 80029a4:	492c      	ldr	r1, [pc, #176]	@ (8002a58 <main+0x134>)
 80029a6:	482b      	ldr	r0, [pc, #172]	@ (8002a54 <main+0x130>)
 80029a8:	f002 ffcc 	bl	8005944 <HAL_CAN_ConfigFilter>
	    // Cấu hình và hiệu chuẩn MQ135
	    MQ135_Config(&mq135, &hadc1);
 80029ac:	4926      	ldr	r1, [pc, #152]	@ (8002a48 <main+0x124>)
 80029ae:	4827      	ldr	r0, [pc, #156]	@ (8002a4c <main+0x128>)
 80029b0:	f7ff f85e 	bl	8001a70 <MQ135_Config>
	    MQ135_CalibrateRo(&mq135, 25.0f, 50.0f);  // không khí sạch giả lập
 80029b4:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002a5c <main+0x138>
 80029b8:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80029bc:	4823      	ldr	r0, [pc, #140]	@ (8002a4c <main+0x128>)
 80029be:	f7ff f95d 	bl	8001c7c <MQ135_CalibrateRo>
// // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029c2:	2102      	movs	r1, #2
 80029c4:	4822      	ldr	r0, [pc, #136]	@ (8002a50 <main+0x12c>)
 80029c6:	f003 faf9 	bl	8005fbc <HAL_CAN_ActivateNotification>
//  DisplayTopicMenuUART();
  BNO055_SendEulerCAN();
 80029ca:	f7fe ff07 	bl	80017dc <BNO055_SendEulerCAN>
//  checkRFIDAndControlRelay();
  HAL_TIM_Base_Start_IT(&htim7);
 80029ce:	4824      	ldr	r0, [pc, #144]	@ (8002a60 <main+0x13c>)
 80029d0:	f006 fdd4 	bl	800957c <HAL_TIM_Base_Start_IT>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // PA2 = 0 → Relay đỏ kích → NC ngắt → Đèn đỏ tắt
 80029d4:	2200      	movs	r2, #0
 80029d6:	2104      	movs	r1, #4
 80029d8:	4822      	ldr	r0, [pc, #136]	@ (8002a64 <main+0x140>)
 80029da:	f004 fb8b 	bl	80070f4 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // PA3 = 1 → Relay xanh không kích → Đèn xanh sáng
 80029de:	2201      	movs	r2, #1
 80029e0:	2108      	movs	r1, #8
 80029e2:	4820      	ldr	r0, [pc, #128]	@ (8002a64 <main+0x140>)
 80029e4:	f004 fb86 	bl	80070f4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  HandleUARTChoice();
	    Process_Ultrasonic_And_Control_Relay();
 80029e8:	f7ff fcd0 	bl	800238c <Process_Ultrasonic_And_Control_Relay>
//	          last_dlc = curr_dlc;
//	          memcpy(last_data, curr_data, curr_dlc);
//	          first_time = 0;
//	      }
//	  }
	  Send_All_SensorData_CAN();
 80029ec:	f7ff fc24 	bl	8002238 <Send_All_SensorData_CAN>
//	        BNO055_SendEulerCAN();


	    if (HAL_GetTick() - last_tick_can_stat >= 1000) {
 80029f0:	f002 f9c4 	bl	8004d7c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <main+0x144>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a00:	d3f2      	bcc.n	80029e8 <main+0xc4>
	           char msg[64];
	           snprintf(msg, sizeof(msg), "\r\nCAN TX/s: %lu | RX/s: %lu\r\n", can_tx_count, can_rx_count);
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <main+0x148>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <main+0x14c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <main+0x150>)
 8002a12:	2140      	movs	r1, #64	@ 0x40
 8002a14:	f009 fed2 	bl	800c7bc <sniprintf>
	           HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002a18:	463b      	mov	r3, r7
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fc28 	bl	8000270 <strlen>
 8002a20:	4603      	mov	r3, r0
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4639      	mov	r1, r7
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	4813      	ldr	r0, [pc, #76]	@ (8002a78 <main+0x154>)
 8002a2c:	f008 f988 	bl	800ad40 <HAL_UART_Transmit>

	           can_tx_count = 0;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <main+0x148>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
	           can_rx_count = 0;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <main+0x14c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
	           last_tick_can_stat = HAL_GetTick();
 8002a3c:	f002 f99e 	bl	8004d7c <HAL_GetTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <main+0x144>)
 8002a44:	6013      	str	r3, [r2, #0]
	    Process_Ultrasonic_And_Control_Relay();
 8002a46:	e7cf      	b.n	80029e8 <main+0xc4>
 8002a48:	20000328 	.word	0x20000328
 8002a4c:	20000750 	.word	0x20000750
 8002a50:	200003d0 	.word	0x200003d0
 8002a54:	200003f8 	.word	0x200003f8
 8002a58:	20000714 	.word	0x20000714
 8002a5c:	42480000 	.word	0x42480000
 8002a60:	2000063c 	.word	0x2000063c
 8002a64:	40020000 	.word	0x40020000
 8002a68:	200007b8 	.word	0x200007b8
 8002a6c:	200007b0 	.word	0x200007b0
 8002a70:	200007b4 	.word	0x200007b4
 8002a74:	0800f928 	.word	0x0800f928
 8002a78:	200006cc 	.word	0x200006cc

08002a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b094      	sub	sp, #80	@ 0x50
 8002a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	2230      	movs	r2, #48	@ 0x30
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f009 ffd6 	bl	800ca3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <SystemClock_Config+0xcc>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	4a27      	ldr	r2, [pc, #156]	@ (8002b48 <SystemClock_Config+0xcc>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab0:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <SystemClock_Config+0xcc>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	4b22      	ldr	r3, [pc, #136]	@ (8002b4c <SystemClock_Config+0xd0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	@ (8002b4c <SystemClock_Config+0xd0>)
 8002ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <SystemClock_Config+0xd0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002adc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ae6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002aec:	2304      	movs	r3, #4
 8002aee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002af0:	23a8      	movs	r3, #168	@ 0xa8
 8002af2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002af8:	2304      	movs	r3, #4
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	4618      	mov	r0, r3
 8002b02:	f005 fcb5 	bl	8008470 <HAL_RCC_OscConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b0c:	f000 fd9e 	bl	800364c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b10:	230f      	movs	r3, #15
 8002b12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b14:	2302      	movs	r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002b22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f005 ff16 	bl	8008960 <HAL_RCC_ClockConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b3a:	f000 fd87 	bl	800364c <Error_Handler>
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3750      	adds	r7, #80	@ 0x50
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000

08002b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b56:	463b      	mov	r3, r7
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b62:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b64:	4a21      	ldr	r2, [pc, #132]	@ (8002bec <MX_ADC1_Init+0x9c>)
 8002b66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b74:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b76:	2204      	movs	r2, #4
 8002b78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b80:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b90:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <MX_ADC1_Init+0xa0>)
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b9a:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bae:	480e      	ldr	r0, [pc, #56]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002bb0:	f002 f914 	bl	8004ddc <HAL_ADC_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002bba:	f000 fd47 	bl	800364c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bca:	463b      	mov	r3, r7
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4806      	ldr	r0, [pc, #24]	@ (8002be8 <MX_ADC1_Init+0x98>)
 8002bd0:	f002 fb94 	bl	80052fc <HAL_ADC_ConfigChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002bda:	f000 fd37 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000328 	.word	0x20000328
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	0f000001 	.word	0x0f000001

08002bf4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002bf8:	4b26      	ldr	r3, [pc, #152]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002bfa:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <MX_CAN1_Init+0xa4>)
 8002bfc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002bfe:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c00:	2203      	movs	r2, #3
 8002c02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002c04:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002c10:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c12:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8002c16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002c30:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002c42:	4814      	ldr	r0, [pc, #80]	@ (8002c94 <MX_CAN1_Init+0xa0>)
 8002c44:	f002 fd82 	bl	800574c <HAL_CAN_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002c4e:	f000 fcfd 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 14;  // hoặc bank khác chưa dùng
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c5a:	220e      	movs	r2, #14
 8002c5c:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000;       // 0x100 << 5 = 0x0800
 8002c64:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;            // Không cần dùng
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;   // 0x7FF << 5 = 0xFFE0
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank =0;
 8002c88:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <MX_CAN1_Init+0xa8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN1_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200003d0 	.word	0x200003d0
 8002c98:	40006400 	.word	0x40006400
 8002c9c:	20000714 	.word	0x20000714

08002ca0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002ca6:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <MX_CAN2_Init+0x64>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cac:	2210      	movs	r2, #16
 8002cae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002cb0:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002cec:	4804      	ldr	r0, [pc, #16]	@ (8002d00 <MX_CAN2_Init+0x60>)
 8002cee:	f002 fd2d 	bl	800574c <HAL_CAN_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8002cf8:	f000 fca8 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200003f8 	.word	0x200003f8
 8002d04:	40006800 	.word	0x40006800

08002d08 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <MX_CRC_Init+0x20>)
 8002d0e:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <MX_CRC_Init+0x24>)
 8002d10:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <MX_CRC_Init+0x20>)
 8002d14:	f003 fcb9 	bl	800668a <HAL_CRC_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002d1e:	f000 fc95 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000420 	.word	0x20000420
 8002d2c:	40023000 	.word	0x40023000

08002d30 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <MX_I2C3_Init+0x54>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 20;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d3c:	2214      	movs	r2, #20
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d52:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	@ (8002d80 <MX_I2C3_Init+0x50>)
 8002d6e:	f004 f9db 	bl	8007128 <HAL_I2C_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002d78:	f000 fc68 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000428 	.word	0x20000428
 8002d84:	40005c00 	.word	0x40005c00

08002d88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002d8e:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <MX_SPI2_Init+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9a:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da6:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dbc:	2238      	movs	r2, #56	@ 0x38
 8002dbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002dd8:	4804      	ldr	r0, [pc, #16]	@ (8002dec <MX_SPI2_Init+0x64>)
 8002dda:	f005 ffe1 	bl	8008da0 <HAL_SPI_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002de4:	f000 fc32 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000047c 	.word	0x2000047c
 8002df0:	40003800 	.word	0x40003800

08002df4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b09a      	sub	sp, #104	@ 0x68
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	615a      	str	r2, [r3, #20]
 8002e32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	2220      	movs	r2, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f009 fdfe 	bl	800ca3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e40:	4b4c      	ldr	r3, [pc, #304]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e42:	4a4d      	ldr	r2, [pc, #308]	@ (8002f78 <MX_TIM1_Init+0x184>)
 8002e44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002e46:	4b4b      	ldr	r3, [pc, #300]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e48:	2253      	movs	r2, #83	@ 0x53
 8002e4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b49      	ldr	r3, [pc, #292]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8002e52:	4b48      	ldr	r3, [pc, #288]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002e58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5a:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e60:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e66:	4b43      	ldr	r3, [pc, #268]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e6c:	4841      	ldr	r0, [pc, #260]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e6e:	f006 faa5 	bl	80093bc <HAL_TIM_Base_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002e78:	f000 fbe8 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e80:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e86:	4619      	mov	r1, r3
 8002e88:	483a      	ldr	r0, [pc, #232]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e8a:	f007 f8bd 	bl	800a008 <HAL_TIM_ConfigClockSource>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002e94:	f000 fbda 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002e98:	4836      	ldr	r0, [pc, #216]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002e9a:	f006 fc38 	bl	800970e <HAL_TIM_IC_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002ea4:	f000 fbd2 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ea8:	4832      	ldr	r0, [pc, #200]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002eaa:	f006 fbd7 	bl	800965c <HAL_TIM_PWM_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002eb4:	f000 fbca 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ec0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	482b      	ldr	r0, [pc, #172]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002ec8:	f007 fe08 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8002ed2:	f000 fbbb 	bl	800364c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002eda:	2301      	movs	r3, #1
 8002edc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigIC.ICFilter = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ee6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	4821      	ldr	r0, [pc, #132]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002ef0:	f006 ff2c 	bl	8009d4c <HAL_TIM_IC_ConfigChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8002efa:	f000 fba7 	bl	800364c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002efe:	2360      	movs	r3, #96	@ 0x60
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	4814      	ldr	r0, [pc, #80]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002f24:	f006 ffae 	bl	8009e84 <HAL_TIM_PWM_ConfigChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8002f2e:	f000 fb8d 	bl	800364c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	4619      	mov	r1, r3
 8002f54:	4807      	ldr	r0, [pc, #28]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002f56:	f007 fe3d 	bl	800abd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8002f60:	f000 fb74 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f64:	4803      	ldr	r0, [pc, #12]	@ (8002f74 <MX_TIM1_Init+0x180>)
 8002f66:	f001 f945 	bl	80041f4 <HAL_TIM_MspPostInit>

}
 8002f6a:	bf00      	nop
 8002f6c:	3768      	adds	r7, #104	@ 0x68
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200004d4 	.word	0x200004d4
 8002f78:	40010000 	.word	0x40010000

08002f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f82:	f107 0318 	add.w	r3, r7, #24
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f90:	f107 0310 	add.w	r3, r7, #16
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002fae:	4b2a      	ldr	r3, [pc, #168]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fb0:	2253      	movs	r2, #83	@ 0x53
 8002fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb4:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8002fba:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fbc:	f06f 0201 	mvn.w	r2, #1
 8002fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc2:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc8:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fce:	4822      	ldr	r0, [pc, #136]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fd0:	f006 f9f4 	bl	80093bc <HAL_TIM_Base_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002fda:	f000 fb37 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fe4:	f107 0318 	add.w	r3, r7, #24
 8002fe8:	4619      	mov	r1, r3
 8002fea:	481b      	ldr	r0, [pc, #108]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002fec:	f007 f80c 	bl	800a008 <HAL_TIM_ConfigClockSource>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ff6:	f000 fb29 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002ffa:	4817      	ldr	r0, [pc, #92]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8002ffc:	f006 fb87 	bl	800970e <HAL_TIM_IC_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003006:	f000 fb21 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4619      	mov	r1, r3
 8003018:	480f      	ldr	r0, [pc, #60]	@ (8003058 <MX_TIM2_Init+0xdc>)
 800301a:	f007 fd5f 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003024:	f000 fb12 	bl	800364c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003028:	2302      	movs	r3, #2
 800302a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800302c:	2301      	movs	r3, #1
 800302e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003038:	463b      	mov	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	4619      	mov	r1, r3
 800303e:	4806      	ldr	r0, [pc, #24]	@ (8003058 <MX_TIM2_Init+0xdc>)
 8003040:	f006 fe84 	bl	8009d4c <HAL_TIM_IC_ConfigChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800304a:	f000 faff 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	3728      	adds	r7, #40	@ 0x28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000051c 	.word	0x2000051c

0800305c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003062:	f107 0318 	add.w	r3, r7, #24
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800307a:	463b      	mov	r3, r7
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003086:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <MX_TIM3_Init+0xd8>)
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <MX_TIM3_Init+0xdc>)
 800308a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800308c:	4b29      	ldr	r3, [pc, #164]	@ (8003134 <MX_TIM3_Init+0xd8>)
 800308e:	2253      	movs	r2, #83	@ 0x53
 8003090:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <MX_TIM3_Init+0xd8>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8003098:	4b26      	ldr	r3, [pc, #152]	@ (8003134 <MX_TIM3_Init+0xd8>)
 800309a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800309e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a0:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <MX_TIM3_Init+0xd8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <MX_TIM3_Init+0xd8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ac:	4821      	ldr	r0, [pc, #132]	@ (8003134 <MX_TIM3_Init+0xd8>)
 80030ae:	f006 f985 	bl	80093bc <HAL_TIM_Base_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80030b8:	f000 fac8 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030c2:	f107 0318 	add.w	r3, r7, #24
 80030c6:	4619      	mov	r1, r3
 80030c8:	481a      	ldr	r0, [pc, #104]	@ (8003134 <MX_TIM3_Init+0xd8>)
 80030ca:	f006 ff9d 	bl	800a008 <HAL_TIM_ConfigClockSource>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80030d4:	f000 faba 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80030d8:	4816      	ldr	r0, [pc, #88]	@ (8003134 <MX_TIM3_Init+0xd8>)
 80030da:	f006 fb18 	bl	800970e <HAL_TIM_IC_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80030e4:	f000 fab2 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030f0:	f107 0310 	add.w	r3, r7, #16
 80030f4:	4619      	mov	r1, r3
 80030f6:	480f      	ldr	r0, [pc, #60]	@ (8003134 <MX_TIM3_Init+0xd8>)
 80030f8:	f007 fcf0 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003102:	f000 faa3 	bl	800364c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003106:	2300      	movs	r3, #0
 8003108:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800310a:	2301      	movs	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003116:	463b      	mov	r3, r7
 8003118:	2200      	movs	r2, #0
 800311a:	4619      	mov	r1, r3
 800311c:	4805      	ldr	r0, [pc, #20]	@ (8003134 <MX_TIM3_Init+0xd8>)
 800311e:	f006 fe15 	bl	8009d4c <HAL_TIM_IC_ConfigChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003128:	f000 fa90 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800312c:	bf00      	nop
 800312e:	3728      	adds	r7, #40	@ 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000564 	.word	0x20000564
 8003138:	40000400 	.word	0x40000400

0800313c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	@ 0x28
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003142:	f107 0318 	add.w	r3, r7, #24
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800315a:	463b      	mov	r3, r7
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003166:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <MX_TIM4_Init+0xd8>)
 8003168:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <MX_TIM4_Init+0xdc>)
 800316a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800316c:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <MX_TIM4_Init+0xd8>)
 800316e:	2253      	movs	r2, #83	@ 0x53
 8003170:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003172:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <MX_TIM4_Init+0xd8>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8003178:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <MX_TIM4_Init+0xd8>)
 800317a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800317e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003180:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <MX_TIM4_Init+0xd8>)
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003186:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <MX_TIM4_Init+0xd8>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800318c:	4821      	ldr	r0, [pc, #132]	@ (8003214 <MX_TIM4_Init+0xd8>)
 800318e:	f006 f915 	bl	80093bc <HAL_TIM_Base_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003198:	f000 fa58 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800319c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031a0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031a2:	f107 0318 	add.w	r3, r7, #24
 80031a6:	4619      	mov	r1, r3
 80031a8:	481a      	ldr	r0, [pc, #104]	@ (8003214 <MX_TIM4_Init+0xd8>)
 80031aa:	f006 ff2d 	bl	800a008 <HAL_TIM_ConfigClockSource>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80031b4:	f000 fa4a 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80031b8:	4816      	ldr	r0, [pc, #88]	@ (8003214 <MX_TIM4_Init+0xd8>)
 80031ba:	f006 faa8 	bl	800970e <HAL_TIM_IC_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80031c4:	f000 fa42 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	4619      	mov	r1, r3
 80031d6:	480f      	ldr	r0, [pc, #60]	@ (8003214 <MX_TIM4_Init+0xd8>)
 80031d8:	f007 fc80 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80031e2:	f000 fa33 	bl	800364c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031e6:	2300      	movs	r3, #0
 80031e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031ea:	2301      	movs	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031f6:	463b      	mov	r3, r7
 80031f8:	2200      	movs	r2, #0
 80031fa:	4619      	mov	r1, r3
 80031fc:	4805      	ldr	r0, [pc, #20]	@ (8003214 <MX_TIM4_Init+0xd8>)
 80031fe:	f006 fda5 	bl	8009d4c <HAL_TIM_IC_ConfigChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8003208:	f000 fa20 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800320c:	bf00      	nop
 800320e:	3728      	adds	r7, #40	@ 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200005ac 	.word	0x200005ac
 8003218:	40000800 	.word	0x40000800

0800321c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003222:	463b      	mov	r3, r7
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800322a:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <MX_TIM6_Init+0x64>)
 800322c:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <MX_TIM6_Init+0x68>)
 800322e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8003230:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <MX_TIM6_Init+0x64>)
 8003232:	2253      	movs	r2, #83	@ 0x53
 8003234:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003236:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <MX_TIM6_Init+0x64>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 800323c:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <MX_TIM6_Init+0x64>)
 800323e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003242:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003244:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <MX_TIM6_Init+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800324a:	480d      	ldr	r0, [pc, #52]	@ (8003280 <MX_TIM6_Init+0x64>)
 800324c:	f006 f8b6 	bl	80093bc <HAL_TIM_Base_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003256:	f000 f9f9 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003262:	463b      	mov	r3, r7
 8003264:	4619      	mov	r1, r3
 8003266:	4806      	ldr	r0, [pc, #24]	@ (8003280 <MX_TIM6_Init+0x64>)
 8003268:	f007 fc38 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003272:	f000 f9eb 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200005f4 	.word	0x200005f4
 8003284:	40001000 	.word	0x40001000

08003288 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800328e:	463b      	mov	r3, r7
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <MX_TIM7_Init+0x64>)
 8003298:	4a15      	ldr	r2, [pc, #84]	@ (80032f0 <MX_TIM7_Init+0x68>)
 800329a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800329c:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <MX_TIM7_Init+0x64>)
 800329e:	2253      	movs	r2, #83	@ 0x53
 80032a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <MX_TIM7_Init+0x64>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80032a8:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <MX_TIM7_Init+0x64>)
 80032aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032ae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <MX_TIM7_Init+0x64>)
 80032b2:	2280      	movs	r2, #128	@ 0x80
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032b6:	480d      	ldr	r0, [pc, #52]	@ (80032ec <MX_TIM7_Init+0x64>)
 80032b8:	f006 f880 	bl	80093bc <HAL_TIM_Base_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80032c2:	f000 f9c3 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032ce:	463b      	mov	r3, r7
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	@ (80032ec <MX_TIM7_Init+0x64>)
 80032d4:	f007 fc02 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80032de:	f000 f9b5 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000063c 	.word	0x2000063c
 80032f0:	40001400 	.word	0x40001400

080032f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	@ 0x28
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fa:	f107 0318 	add.w	r3, r7, #24
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003308:	f107 0310 	add.w	r3, r7, #16
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003312:	463b      	mov	r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800331e:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003320:	4a2d      	ldr	r2, [pc, #180]	@ (80033d8 <MX_TIM8_Init+0xe4>)
 8003322:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 8003324:	4b2b      	ldr	r3, [pc, #172]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003326:	2253      	movs	r2, #83	@ 0x53
 8003328:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332a:	4b2a      	ldr	r3, [pc, #168]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 8003330:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003332:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003336:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003338:	4b26      	ldr	r3, [pc, #152]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800333e:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003340:	2200      	movs	r2, #0
 8003342:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003344:	4b23      	ldr	r3, [pc, #140]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003346:	2200      	movs	r2, #0
 8003348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800334a:	4822      	ldr	r0, [pc, #136]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 800334c:	f006 f836 	bl	80093bc <HAL_TIM_Base_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8003356:	f000 f979 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800335e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003360:	f107 0318 	add.w	r3, r7, #24
 8003364:	4619      	mov	r1, r3
 8003366:	481b      	ldr	r0, [pc, #108]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003368:	f006 fe4e 	bl	800a008 <HAL_TIM_ConfigClockSource>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003372:	f000 f96b 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8003376:	4817      	ldr	r0, [pc, #92]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003378:	f006 f9c9 	bl	800970e <HAL_TIM_IC_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8003382:	f000 f963 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4619      	mov	r1, r3
 8003394:	480f      	ldr	r0, [pc, #60]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 8003396:	f007 fba1 	bl	800aadc <HAL_TIMEx_MasterConfigSynchronization>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80033a0:	f000 f954 	bl	800364c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033a4:	2300      	movs	r3, #0
 80033a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033a8:	2301      	movs	r3, #1
 80033aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033b4:	463b      	mov	r3, r7
 80033b6:	2200      	movs	r2, #0
 80033b8:	4619      	mov	r1, r3
 80033ba:	4806      	ldr	r0, [pc, #24]	@ (80033d4 <MX_TIM8_Init+0xe0>)
 80033bc:	f006 fcc6 	bl	8009d4c <HAL_TIM_IC_ConfigChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80033c6:	f000 f941 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	@ 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000684 	.word	0x20000684
 80033d8:	40010400 	.word	0x40010400

080033dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033e2:	4a12      	ldr	r2, [pc, #72]	@ (800342c <MX_USART1_UART_Init+0x50>)
 80033e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 8003402:	220c      	movs	r2, #12
 8003404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003412:	4805      	ldr	r0, [pc, #20]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 8003414:	f007 fc44 	bl	800aca0 <HAL_UART_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800341e:	f000 f915 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200006cc 	.word	0x200006cc
 800342c:	40011000 	.word	0x40011000

08003430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <MX_DMA_Init+0x3c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	4a0b      	ldr	r2, [pc, #44]	@ (800346c <MX_DMA_Init+0x3c>)
 8003440:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003444:	6313      	str	r3, [r2, #48]	@ 0x30
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <MX_DMA_Init+0x3c>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2038      	movs	r0, #56	@ 0x38
 8003458:	f003 f8e1 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800345c:	2038      	movs	r0, #56	@ 0x38
 800345e:	f003 f8fa 	bl	8006656 <HAL_NVIC_EnableIRQ>

}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	@ 0x30
 8003474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	4b6a      	ldr	r3, [pc, #424]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	4a69      	ldr	r2, [pc, #420]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 8003490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003494:	6313      	str	r3, [r2, #48]	@ 0x30
 8003496:	4b67      	ldr	r3, [pc, #412]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	4b63      	ldr	r3, [pc, #396]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a62      	ldr	r2, [pc, #392]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b60      	ldr	r3, [pc, #384]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b59      	ldr	r3, [pc, #356]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b55      	ldr	r3, [pc, #340]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	4a54      	ldr	r2, [pc, #336]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ea:	4b52      	ldr	r3, [pc, #328]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b4b      	ldr	r3, [pc, #300]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a46      	ldr	r2, [pc, #280]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b44      	ldr	r3, [pc, #272]	@ (8003634 <MX_GPIO_Init+0x1c4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800352e:	2200      	movs	r2, #0
 8003530:	215c      	movs	r1, #92	@ 0x5c
 8003532:	4841      	ldr	r0, [pc, #260]	@ (8003638 <MX_GPIO_Init+0x1c8>)
 8003534:	f003 fdde 	bl	80070f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003538:	2200      	movs	r2, #0
 800353a:	2101      	movs	r1, #1
 800353c:	483f      	ldr	r0, [pc, #252]	@ (800363c <MX_GPIO_Init+0x1cc>)
 800353e:	f003 fdd9 	bl	80070f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8003542:	2200      	movs	r2, #0
 8003544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003548:	483d      	ldr	r0, [pc, #244]	@ (8003640 <MX_GPIO_Init+0x1d0>)
 800354a:	f003 fdd3 	bl	80070f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8003554:	483b      	ldr	r0, [pc, #236]	@ (8003644 <MX_GPIO_Init+0x1d4>)
 8003556:	f003 fdcd 	bl	80070f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	483a      	ldr	r0, [pc, #232]	@ (8003648 <MX_GPIO_Init+0x1d8>)
 8003560:	f003 fdc8 	bl	80070f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003564:	2302      	movs	r3, #2
 8003566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003568:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800356c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 031c 	add.w	r3, r7, #28
 8003576:	4619      	mov	r1, r3
 8003578:	482f      	ldr	r0, [pc, #188]	@ (8003638 <MX_GPIO_Init+0x1c8>)
 800357a:	f003 fc1f 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 800357e:	2354      	movs	r3, #84	@ 0x54
 8003580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003582:	2301      	movs	r3, #1
 8003584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003586:	2302      	movs	r3, #2
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	2300      	movs	r3, #0
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	f107 031c 	add.w	r3, r7, #28
 8003592:	4619      	mov	r1, r3
 8003594:	4828      	ldr	r0, [pc, #160]	@ (8003638 <MX_GPIO_Init+0x1c8>)
 8003596:	f003 fc11 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800359a:	2308      	movs	r3, #8
 800359c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035a2:	2301      	movs	r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4619      	mov	r1, r3
 80035b0:	4821      	ldr	r0, [pc, #132]	@ (8003638 <MX_GPIO_Init+0x1c8>)
 80035b2:	f003 fc03 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ba:	2301      	movs	r3, #1
 80035bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	4619      	mov	r1, r3
 80035cc:	481b      	ldr	r0, [pc, #108]	@ (800363c <MX_GPIO_Init+0x1cc>)
 80035ce:	f003 fbf5 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d8:	2301      	movs	r3, #1
 80035da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035dc:	2302      	movs	r3, #2
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	4619      	mov	r1, r3
 80035ea:	4815      	ldr	r0, [pc, #84]	@ (8003640 <MX_GPIO_Init+0x1d0>)
 80035ec:	f003 fbe6 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 80035f0:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80035f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f6:	2301      	movs	r3, #1
 80035f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035fa:	2302      	movs	r3, #2
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	2300      	movs	r3, #0
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	4619      	mov	r1, r3
 8003608:	480e      	ldr	r0, [pc, #56]	@ (8003644 <MX_GPIO_Init+0x1d4>)
 800360a:	f003 fbd7 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003612:	2301      	movs	r3, #1
 8003614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361a:	2300      	movs	r3, #0
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4619      	mov	r1, r3
 8003624:	4808      	ldr	r0, [pc, #32]	@ (8003648 <MX_GPIO_Init+0x1d8>)
 8003626:	f003 fbc9 	bl	8006dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800362a:	bf00      	nop
 800362c:	3730      	adds	r7, #48	@ 0x30
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	40021000 	.word	0x40021000
 8003644:	40020c00 	.word	0x40020c00
 8003648:	40020800 	.word	0x40020800

0800364c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003650:	b672      	cpsid	i
}
 8003652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <Error_Handler+0x8>

08003658 <printUserName>:
	    }
}


void printUserName(uint8_t *uid)
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b099      	sub	sp, #100	@ 0x64
 800365c:	af04      	add	r7, sp, #16
 800365e:	6078      	str	r0, [r7, #4]
	   // Không có thẻ
	    if (uid == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d111      	bne.n	800368a <printUserName+0x32>
	    {
	        if (uidcheck)
 8003666:	4b56      	ldr	r3, [pc, #344]	@ (80037c0 <printUserName+0x168>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a2 	beq.w	80037b4 <printUserName+0x15c>
	        {
	            HAL_UART_Transmit(&huart1, (uint8_t*)"Please charge your ID CARD \r\n", 31, HAL_MAX_DELAY);
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	221f      	movs	r2, #31
 8003676:	4953      	ldr	r1, [pc, #332]	@ (80037c4 <printUserName+0x16c>)
 8003678:	4853      	ldr	r0, [pc, #332]	@ (80037c8 <printUserName+0x170>)
 800367a:	f007 fb61 	bl	800ad40 <HAL_UART_Transmit>
	            memset(lastUID, 0, UID_LEN); //Gán toàn bộ giá trị trong mảng lastUID về 0 (zero)
 800367e:	2205      	movs	r2, #5
 8003680:	2100      	movs	r1, #0
 8003682:	4852      	ldr	r0, [pc, #328]	@ (80037cc <printUserName+0x174>)
 8003684:	f009 f9da 	bl	800ca3c <memset>
	        }
	        return;
 8003688:	e094      	b.n	80037b4 <printUserName+0x15c>
	    }

	    //  Nếu là UID giống lần trước thì không in lại
	    if (uidcheck && memcmp(uid, lastUID, UID_LEN) == 0)
 800368a:	4b4d      	ldr	r3, [pc, #308]	@ (80037c0 <printUserName+0x168>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <printUserName+0x4c>
 8003692:	2205      	movs	r2, #5
 8003694:	494d      	ldr	r1, [pc, #308]	@ (80037cc <printUserName+0x174>)
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f009 f9c0 	bl	800ca1c <memcmp>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 808a 	beq.w	80037b8 <printUserName+0x160>
	        return;
	    if (uid!=NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8087 	beq.w	80037ba <printUserName+0x162>
	    {
	    //  UID mới thì cập nhật và xử lý
	    memcpy(lastUID, uid, UID_LEN);
 80036ac:	4b47      	ldr	r3, [pc, #284]	@ (80037cc <printUserName+0x174>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6810      	ldr	r0, [r2, #0]
 80036b2:	6018      	str	r0, [r3, #0]
 80036b4:	7912      	ldrb	r2, [r2, #4]
 80036b6:	711a      	strb	r2, [r3, #4]
	    uidcheck = 1;
 80036b8:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <printUserName+0x168>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < userCount; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c2:	e048      	b.n	8003756 <printUserName+0xfe>
    {
        if (memcmp(uid, userList[i].uid, UID_LEN) == 0)
 80036c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	4a3f      	ldr	r2, [pc, #252]	@ (80037d0 <printUserName+0x178>)
 80036d2:	4413      	add	r3, r2
 80036d4:	2205      	movs	r2, #5
 80036d6:	4619      	mov	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f009 f99f 	bl	800ca1c <memcmp>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d135      	bne.n	8003750 <printUserName+0xf8>
        {
            char msg[64];
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 80036e8:	461e      	mov	r6, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3301      	adds	r3, #1
 80036ee:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 80036f0:	469c      	mov	ip, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3302      	adds	r3, #2
 80036f6:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 80036f8:	4619      	mov	r1, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3303      	adds	r3, #3
 80036fe:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003700:	461c      	mov	r4, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003708:	461d      	mov	r5, r3
                    userList[i].name);
 800370a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	4a2e      	ldr	r2, [pc, #184]	@ (80037d0 <printUserName+0x178>)
 8003718:	4413      	add	r3, r2
 800371a:	3305      	adds	r3, #5
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 800371c:	f107 000c 	add.w	r0, r7, #12
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	9502      	str	r5, [sp, #8]
 8003724:	9401      	str	r4, [sp, #4]
 8003726:	9100      	str	r1, [sp, #0]
 8003728:	4663      	mov	r3, ip
 800372a:	4632      	mov	r2, r6
 800372c:	4929      	ldr	r1, [pc, #164]	@ (80037d4 <printUserName+0x17c>)
 800372e:	f009 f87b 	bl	800c828 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fd9a 	bl	8000270 <strlen>
 800373c:	4603      	mov	r3, r0
 800373e:	b29a      	uxth	r2, r3
 8003740:	f107 010c 	add.w	r1, r7, #12
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	481f      	ldr	r0, [pc, #124]	@ (80037c8 <printUserName+0x170>)
 800374a:	f007 faf9 	bl	800ad40 <HAL_UART_Transmit>
 800374e:	e034      	b.n	80037ba <printUserName+0x162>
    for (int i = 0; i < userCount; i++)
 8003750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003752:	3301      	adds	r3, #1
 8003754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003756:	2206      	movs	r2, #6
 8003758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375a:	4293      	cmp	r3, r2
 800375c:	dbb2      	blt.n	80036c4 <printUserName+0x6c>
        }
    }
    // Không tìm thấy trong danh sách
    char unknown[64];
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003762:	461c      	mov	r4, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3301      	adds	r3, #1
 8003768:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 800376a:	461d      	mov	r5, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3302      	adds	r3, #2
 8003770:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003772:	461a      	mov	r2, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3303      	adds	r3, #3
 8003778:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 800377a:	4619      	mov	r1, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003782:	f107 000c 	add.w	r0, r7, #12
 8003786:	9302      	str	r3, [sp, #8]
 8003788:	9101      	str	r1, [sp, #4]
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	462b      	mov	r3, r5
 800378e:	4622      	mov	r2, r4
 8003790:	4911      	ldr	r1, [pc, #68]	@ (80037d8 <printUserName+0x180>)
 8003792:	f009 f849 	bl	800c828 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)unknown, strlen(unknown), HAL_MAX_DELAY);
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	4618      	mov	r0, r3
 800379c:	f7fc fd68 	bl	8000270 <strlen>
 80037a0:	4603      	mov	r3, r0
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	f107 010c 	add.w	r1, r7, #12
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ac:	4806      	ldr	r0, [pc, #24]	@ (80037c8 <printUserName+0x170>)
 80037ae:	f007 fac7 	bl	800ad40 <HAL_UART_Transmit>
 80037b2:	e002      	b.n	80037ba <printUserName+0x162>
	        return;
 80037b4:	bf00      	nop
 80037b6:	e000      	b.n	80037ba <printUserName+0x162>
	        return;
 80037b8:	bf00      	nop
}
}
 80037ba:	3754      	adds	r7, #84	@ 0x54
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c0:	20001784 	.word	0x20001784
 80037c4:	0800f9d8 	.word	0x0800f9d8
 80037c8:	200006cc 	.word	0x200006cc
 80037cc:	20001774 	.word	0x20001774
 80037d0:	20000010 	.word	0x20000010
 80037d4:	0800f9f8 	.word	0x0800f9f8
 80037d8:	0800fa24 	.word	0x0800fa24

080037dc <isAuthorizedUID>:


bool isAuthorizedUID(uint8_t *uid)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < userCount; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e014      	b.n	8003814 <isAuthorizedUID+0x38>
    {
        if (memcmp(uid, userList[i].uid, 5) == 0)
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003828 <isAuthorizedUID+0x4c>)
 80037f8:	4413      	add	r3, r2
 80037fa:	2205      	movs	r2, #5
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f009 f90c 	bl	800ca1c <memcmp>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <isAuthorizedUID+0x32>
            return true;
 800380a:	2301      	movs	r3, #1
 800380c:	e007      	b.n	800381e <isAuthorizedUID+0x42>
    for (int i = 0; i < userCount; i++)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	2206      	movs	r2, #6
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4293      	cmp	r3, r2
 800381a:	dbe6      	blt.n	80037ea <isAuthorizedUID+0xe>
    }
    return false;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000010 	.word	0x20000010

0800382c <checkRFIDAndControlRelay>:


void checkRFIDAndControlRelay(void)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b094      	sub	sp, #80	@ 0x50
 8003830:	af04      	add	r7, sp, #16
    status = MFRC522_Request(PICC_REQIDL, str);
 8003832:	4959      	ldr	r1, [pc, #356]	@ (8003998 <checkRFIDAndControlRelay+0x16c>)
 8003834:	2026      	movs	r0, #38	@ 0x26
 8003836:	f7fe fc4a 	bl	80020ce <MFRC522_Request>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	4b57      	ldr	r3, [pc, #348]	@ (800399c <checkRFIDAndControlRelay+0x170>)
 8003840:	701a      	strb	r2, [r3, #0]

    if (status == MI_OK && MFRC522_Anticoll(str) == MI_OK)
 8003842:	4b56      	ldr	r3, [pc, #344]	@ (800399c <checkRFIDAndControlRelay+0x170>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d175      	bne.n	8003936 <checkRFIDAndControlRelay+0x10a>
 800384a:	4853      	ldr	r0, [pc, #332]	@ (8003998 <checkRFIDAndControlRelay+0x16c>)
 800384c:	f7fe fc64 	bl	8002118 <MFRC522_Anticoll>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d16f      	bne.n	8003936 <checkRFIDAndControlRelay+0x10a>
    {
        memcpy(currentUID, str, UID_LEN);
 8003856:	4b52      	ldr	r3, [pc, #328]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 8003858:	4a4f      	ldr	r2, [pc, #316]	@ (8003998 <checkRFIDAndControlRelay+0x16c>)
 800385a:	6810      	ldr	r0, [r2, #0]
 800385c:	6018      	str	r0, [r3, #0]
 800385e:	7912      	ldrb	r2, [r2, #4]
 8003860:	711a      	strb	r2, [r3, #4]
        rfidDetected = 1;
 8003862:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <checkRFIDAndControlRelay+0x178>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
        rfidLostCounter = 0;
 8003868:	4b4f      	ldr	r3, [pc, #316]	@ (80039a8 <checkRFIDAndControlRelay+0x17c>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        // UART Debug
        char dbg[64];
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
                currentUID[0], currentUID[1], currentUID[2],
 800386e:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 8003870:	781b      	ldrb	r3, [r3, #0]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003872:	461c      	mov	r4, r3
                currentUID[0], currentUID[1], currentUID[2],
 8003874:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 8003876:	785b      	ldrb	r3, [r3, #1]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003878:	461d      	mov	r5, r3
                currentUID[0], currentUID[1], currentUID[2],
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 800387c:	789b      	ldrb	r3, [r3, #2]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 800387e:	461a      	mov	r2, r3
                currentUID[3], currentUID[4]);
 8003880:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 8003882:	78db      	ldrb	r3, [r3, #3]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003884:	4619      	mov	r1, r3
                currentUID[3], currentUID[4]);
 8003886:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 8003888:	791b      	ldrb	r3, [r3, #4]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 800388a:	4638      	mov	r0, r7
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	9101      	str	r1, [sp, #4]
 8003890:	9200      	str	r2, [sp, #0]
 8003892:	462b      	mov	r3, r5
 8003894:	4622      	mov	r2, r4
 8003896:	4945      	ldr	r1, [pc, #276]	@ (80039ac <checkRFIDAndControlRelay+0x180>)
 8003898:	f008 ffc6 	bl	800c828 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 800389c:	463b      	mov	r3, r7
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc fce6 	bl	8000270 <strlen>
 80038a4:	4603      	mov	r3, r0
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	4639      	mov	r1, r7
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	4840      	ldr	r0, [pc, #256]	@ (80039b0 <checkRFIDAndControlRelay+0x184>)
 80038b0:	f007 fa46 	bl	800ad40 <HAL_UART_Transmit>

//        // ✅ Chỉ gửi CAN nếu là UID mới
        if (!uidcheck || memcmp(currentUID, lastUID, UID_LEN) != 0)
 80038b4:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <checkRFIDAndControlRelay+0x188>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <checkRFIDAndControlRelay+0xa0>
 80038bc:	2205      	movs	r2, #5
 80038be:	493e      	ldr	r1, [pc, #248]	@ (80039b8 <checkRFIDAndControlRelay+0x18c>)
 80038c0:	4837      	ldr	r0, [pc, #220]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 80038c2:	f009 f8ab 	bl	800ca1c <memcmp>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d011      	beq.n	80038f0 <checkRFIDAndControlRelay+0xc4>
        {
            printUserName(currentUID);
 80038cc:	4834      	ldr	r0, [pc, #208]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 80038ce:	f7ff fec3 	bl	8003658 <printUserName>
            memcpy(lastUID, currentUID, UID_LEN);
 80038d2:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <checkRFIDAndControlRelay+0x18c>)
 80038d4:	4a32      	ldr	r2, [pc, #200]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 80038d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038da:	6018      	str	r0, [r3, #0]
 80038dc:	3304      	adds	r3, #4
 80038de:	7019      	strb	r1, [r3, #0]
            uidcheck = 1;
 80038e0:	4b34      	ldr	r3, [pc, #208]	@ (80039b4 <checkRFIDAndControlRelay+0x188>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

            // Gửi CAN
            CAN_SendTopicData(TOPIC_ID_RFID, currentUID, UID_LEN);
 80038e6:	2205      	movs	r2, #5
 80038e8:	492d      	ldr	r1, [pc, #180]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 80038ea:	2010      	movs	r0, #16
 80038ec:	f7fe fc70 	bl	80021d0 <CAN_SendTopicData>
        }

        // ✅ Điều khiển Relay
        if (isAuthorizedUID(currentUID))
 80038f0:	482b      	ldr	r0, [pc, #172]	@ (80039a0 <checkRFIDAndControlRelay+0x174>)
 80038f2:	f7ff ff73 	bl	80037dc <isAuthorizedUID>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <checkRFIDAndControlRelay+0xf0>
        {
            if (!relayOn)
 80038fc:	4b2f      	ldr	r3, [pc, #188]	@ (80039bc <checkRFIDAndControlRelay+0x190>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d042      	beq.n	8003990 <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800390a:	2201      	movs	r2, #1
 800390c:	2110      	movs	r1, #16
 800390e:	482c      	ldr	r0, [pc, #176]	@ (80039c0 <checkRFIDAndControlRelay+0x194>)
 8003910:	f003 fbf0 	bl	80070f4 <HAL_GPIO_WritePin>
                relayOn = true;
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <checkRFIDAndControlRelay+0x190>)
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e039      	b.n	8003990 <checkRFIDAndControlRelay+0x164>
            }
        }
        else
        {
            if (relayOn)
 800391c:	4b27      	ldr	r3, [pc, #156]	@ (80039bc <checkRFIDAndControlRelay+0x190>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d035      	beq.n	8003990 <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003924:	2200      	movs	r2, #0
 8003926:	2110      	movs	r1, #16
 8003928:	4825      	ldr	r0, [pc, #148]	@ (80039c0 <checkRFIDAndControlRelay+0x194>)
 800392a:	f003 fbe3 	bl	80070f4 <HAL_GPIO_WritePin>
                relayOn = false;
 800392e:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <checkRFIDAndControlRelay+0x190>)
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	e02c      	b.n	8003990 <checkRFIDAndControlRelay+0x164>

        return;
    }

    //  Không đọc được thẻ
    rfidLostCounter++;
 8003936:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <checkRFIDAndControlRelay+0x17c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <checkRFIDAndControlRelay+0x17c>)
 800393e:	6013      	str	r3, [r2, #0]
//    if (rfidLostCounter >= RFID_LOST_THRESHOLD)
//    {
        // Chỉ thực hiện reset khi thực sự không còn thẻ
        if (uidcheck)
 8003940:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <checkRFIDAndControlRelay+0x188>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <checkRFIDAndControlRelay+0x15e>
        {
            printUserName(NULL);
 8003948:	2000      	movs	r0, #0
 800394a:	f7ff fe85 	bl	8003658 <printUserName>
            uidcheck = 0;
 800394e:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <checkRFIDAndControlRelay+0x188>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
            memset(lastUID, 0, UID_LEN);
 8003954:	2205      	movs	r2, #5
 8003956:	2100      	movs	r1, #0
 8003958:	4817      	ldr	r0, [pc, #92]	@ (80039b8 <checkRFIDAndControlRelay+0x18c>)
 800395a:	f009 f86f 	bl	800ca3c <memset>
            rfidDetected = 0;
 800395e:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <checkRFIDAndControlRelay+0x178>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

            HAL_UART_Transmit(&huart1,
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	2222      	movs	r2, #34	@ 0x22
 800396a:	4916      	ldr	r1, [pc, #88]	@ (80039c4 <checkRFIDAndControlRelay+0x198>)
 800396c:	4810      	ldr	r0, [pc, #64]	@ (80039b0 <checkRFIDAndControlRelay+0x184>)
 800396e:	f007 f9e7 	bl	800ad40 <HAL_UART_Transmit>
                              (uint8_t*)"[RFID] Không phát hiện thẻ\r\n",
                              strlen("[RFID] Không phát hiện thẻ\r\n"),
                              HAL_MAX_DELAY);

            if (relayOn)
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <checkRFIDAndControlRelay+0x190>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <checkRFIDAndControlRelay+0x15e>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800397a:	2200      	movs	r2, #0
 800397c:	2110      	movs	r1, #16
 800397e:	4810      	ldr	r0, [pc, #64]	@ (80039c0 <checkRFIDAndControlRelay+0x194>)
 8003980:	f003 fbb8 	bl	80070f4 <HAL_GPIO_WritePin>
                relayOn = false;
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <checkRFIDAndControlRelay+0x190>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
            }
        }

        rfidLostCounter = 0;
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <checkRFIDAndControlRelay+0x17c>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
    }
 8003990:	3740      	adds	r7, #64	@ 0x40
 8003992:	46bd      	mov	sp, r7
 8003994:	bdb0      	pop	{r4, r5, r7, pc}
 8003996:	bf00      	nop
 8003998:	20000740 	.word	0x20000740
 800399c:	2000073c 	.word	0x2000073c
 80039a0:	2000176c 	.word	0x2000176c
 80039a4:	20001780 	.word	0x20001780
 80039a8:	2000177c 	.word	0x2000177c
 80039ac:	0800fa58 	.word	0x0800fa58
 80039b0:	200006cc 	.word	0x200006cc
 80039b4:	20001784 	.word	0x20001784
 80039b8:	20001774 	.word	0x20001774
 80039bc:	20001779 	.word	0x20001779
 80039c0:	40020000 	.word	0x40020000
 80039c4:	0800fa80 	.word	0x0800fa80

080039c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <HAL_MspInit+0x58>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <HAL_MspInit+0x58>)
 80039d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_MspInit+0x58>)
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <HAL_MspInit+0x58>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003a20 <HAL_MspInit+0x58>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039fa:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_MspInit+0x58>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2005      	movs	r0, #5
 8003a0c:	f002 fe07 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003a10:	2005      	movs	r0, #5
 8003a12:	f002 fe20 	bl	8006656 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	@ 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_ADC_MspInit+0xe8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d15e      	bne.n	8003b04 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b31      	ldr	r3, [pc, #196]	@ (8003b10 <HAL_ADC_MspInit+0xec>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	4a30      	ldr	r2, [pc, #192]	@ (8003b10 <HAL_ADC_MspInit+0xec>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a56:	4b2e      	ldr	r3, [pc, #184]	@ (8003b10 <HAL_ADC_MspInit+0xec>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b2a      	ldr	r3, [pc, #168]	@ (8003b10 <HAL_ADC_MspInit+0xec>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	4a29      	ldr	r2, [pc, #164]	@ (8003b10 <HAL_ADC_MspInit+0xec>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a72:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <HAL_ADC_MspInit+0xec>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a82:	2303      	movs	r3, #3
 8003a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4820      	ldr	r0, [pc, #128]	@ (8003b14 <HAL_ADC_MspInit+0xf0>)
 8003a92:	f003 f993 	bl	8006dbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003a98:	4a20      	ldr	r2, [pc, #128]	@ (8003b1c <HAL_ADC_MspInit+0xf8>)
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003aae:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ab0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ab4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ab6:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003abc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ac4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003ac6:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003acc:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad2:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ad8:	480f      	ldr	r0, [pc, #60]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003ada:	f002 fdf3 	bl	80066c4 <HAL_DMA_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003ae4:	f7ff fdb2 	bl	800364c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0b      	ldr	r2, [pc, #44]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003aec:	639a      	str	r2, [r3, #56]	@ 0x38
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <HAL_ADC_MspInit+0xf4>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	2012      	movs	r0, #18
 8003afa:	f002 fd90 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003afe:	2012      	movs	r0, #18
 8003b00:	f002 fda9 	bl	8006656 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003b04:	bf00      	nop
 8003b06:	3728      	adds	r7, #40	@ 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40012000 	.word	0x40012000
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020000 	.word	0x40020000
 8003b18:	20000370 	.word	0x20000370
 8003b1c:	40026410 	.word	0x40026410

08003b20 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a56      	ldr	r2, [pc, #344]	@ (8003c98 <HAL_CAN_MspInit+0x178>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d15d      	bne.n	8003bfe <HAL_CAN_MspInit+0xde>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003b42:	4b56      	ldr	r3, [pc, #344]	@ (8003c9c <HAL_CAN_MspInit+0x17c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	4a54      	ldr	r2, [pc, #336]	@ (8003c9c <HAL_CAN_MspInit+0x17c>)
 8003b4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003b4c:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <HAL_CAN_MspInit+0x17c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10d      	bne.n	8003b70 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	4b51      	ldr	r3, [pc, #324]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	4a50      	ldr	r2, [pc, #320]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b64:	4b4e      	ldr	r3, [pc, #312]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	4a49      	ldr	r2, [pc, #292]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003b7a:	f043 0308 	orr.w	r3, r3, #8
 8003b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b80:	4b47      	ldr	r3, [pc, #284]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2302      	movs	r3, #2
 8003b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b94:	2301      	movs	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b9c:	2309      	movs	r3, #9
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	483f      	ldr	r0, [pc, #252]	@ (8003ca4 <HAL_CAN_MspInit+0x184>)
 8003ba8:	f003 f908 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bac:	2302      	movs	r3, #2
 8003bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003bbc:	2309      	movs	r3, #9
 8003bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4837      	ldr	r0, [pc, #220]	@ (8003ca4 <HAL_CAN_MspInit+0x184>)
 8003bc8:	f003 f8f8 	bl	8006dbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2013      	movs	r0, #19
 8003bd2:	f002 fd24 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003bd6:	2013      	movs	r0, #19
 8003bd8:	f002 fd3d 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2100      	movs	r1, #0
 8003be0:	2014      	movs	r0, #20
 8003be2:	f002 fd1c 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003be6:	2014      	movs	r0, #20
 8003be8:	f002 fd35 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2015      	movs	r0, #21
 8003bf2:	f002 fd14 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003bf6:	2015      	movs	r0, #21
 8003bf8:	f002 fd2d 	bl	8006656 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003bfc:	e048      	b.n	8003c90 <HAL_CAN_MspInit+0x170>
  else if(hcan->Instance==CAN2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a29      	ldr	r2, [pc, #164]	@ (8003ca8 <HAL_CAN_MspInit+0x188>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d143      	bne.n	8003c90 <HAL_CAN_MspInit+0x170>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c18:	4b21      	ldr	r3, [pc, #132]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <HAL_CAN_MspInit+0x17c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c9c <HAL_CAN_MspInit+0x17c>)
 8003c2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_CAN_MspInit+0x17c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10d      	bne.n	8003c52 <HAL_CAN_MspInit+0x132>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c46:	4b16      	ldr	r3, [pc, #88]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b12      	ldr	r3, [pc, #72]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <HAL_CAN_MspInit+0x180>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003c6e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003c80:	2309      	movs	r3, #9
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4808      	ldr	r0, [pc, #32]	@ (8003cac <HAL_CAN_MspInit+0x18c>)
 8003c8c:	f003 f896 	bl	8006dbc <HAL_GPIO_Init>
}
 8003c90:	bf00      	nop
 8003c92:	3730      	adds	r7, #48	@ 0x30
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40006400 	.word	0x40006400
 8003c9c:	20001788 	.word	0x20001788
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020c00 	.word	0x40020c00
 8003ca8:	40006800 	.word	0x40006800
 8003cac:	40020400 	.word	0x40020400

08003cb0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <HAL_CRC_MspInit+0x3c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10d      	bne.n	8003cde <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <HAL_CRC_MspInit+0x40>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <HAL_CRC_MspInit+0x40>)
 8003ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <HAL_CRC_MspInit+0x40>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023000 	.word	0x40023000
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a29      	ldr	r2, [pc, #164]	@ (8003db8 <HAL_I2C_MspInit+0xc4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d14b      	bne.n	8003dae <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	4b28      	ldr	r3, [pc, #160]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a27      	ldr	r2, [pc, #156]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d26:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d54:	2312      	movs	r3, #18
 8003d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d60:	2304      	movs	r3, #4
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4815      	ldr	r0, [pc, #84]	@ (8003dc0 <HAL_I2C_MspInit+0xcc>)
 8003d6c:	f003 f826 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d76:	2312      	movs	r3, #18
 8003d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d82:	2304      	movs	r3, #4
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480d      	ldr	r0, [pc, #52]	@ (8003dc4 <HAL_I2C_MspInit+0xd0>)
 8003d8e:	f003 f815 	bl	8006dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003d9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_I2C_MspInit+0xc8>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003dae:	bf00      	nop
 8003db0:	3728      	adds	r7, #40	@ 0x28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40005c00 	.word	0x40005c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020000 	.word	0x40020000

08003dc8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	@ 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a28      	ldr	r2, [pc, #160]	@ (8003e88 <HAL_SPI_MspInit+0xc0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d14a      	bne.n	8003e80 <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	4b27      	ldr	r3, [pc, #156]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4a26      	ldr	r2, [pc, #152]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e16:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e32:	4b16      	ldr	r3, [pc, #88]	@ (8003e8c <HAL_SPI_MspInit+0xc4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e3e:	230c      	movs	r3, #12
 8003e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e4e:	2305      	movs	r3, #5
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e52:	f107 0314 	add.w	r3, r7, #20
 8003e56:	4619      	mov	r1, r3
 8003e58:	480d      	ldr	r0, [pc, #52]	@ (8003e90 <HAL_SPI_MspInit+0xc8>)
 8003e5a:	f002 ffaf 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e70:	2305      	movs	r3, #5
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4806      	ldr	r0, [pc, #24]	@ (8003e94 <HAL_SPI_MspInit+0xcc>)
 8003e7c:	f002 ff9e 	bl	8006dbc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003e80:	bf00      	nop
 8003e82:	3728      	adds	r7, #40	@ 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40003800 	.word	0x40003800
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020400 	.word	0x40020400

08003e98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b094      	sub	sp, #80	@ 0x50
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a97      	ldr	r2, [pc, #604]	@ (8004114 <HAL_TIM_Base_MspInit+0x27c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d14d      	bne.n	8003f56 <HAL_TIM_Base_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ebe:	4b96      	ldr	r3, [pc, #600]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	4a95      	ldr	r2, [pc, #596]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eca:	4b93      	ldr	r3, [pc, #588]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eda:	4b8f      	ldr	r3, [pc, #572]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	4a8e      	ldr	r2, [pc, #568]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ee0:	f043 0310 	orr.w	r3, r3, #16
 8003ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee6:	4b8c      	ldr	r3, [pc, #560]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f00:	2300      	movs	r3, #0
 8003f02:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4883      	ldr	r0, [pc, #524]	@ (800411c <HAL_TIM_Base_MspInit+0x284>)
 8003f10:	f002 ff54 	bl	8006dbc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003f14:	2200      	movs	r2, #0
 8003f16:	2100      	movs	r1, #0
 8003f18:	2018      	movs	r0, #24
 8003f1a:	f002 fb80 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003f1e:	2018      	movs	r0, #24
 8003f20:	f002 fb99 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2100      	movs	r1, #0
 8003f28:	2019      	movs	r0, #25
 8003f2a:	f002 fb78 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f2e:	2019      	movs	r0, #25
 8003f30:	f002 fb91 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003f34:	2200      	movs	r2, #0
 8003f36:	2100      	movs	r1, #0
 8003f38:	201a      	movs	r0, #26
 8003f3a:	f002 fb70 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003f3e:	201a      	movs	r0, #26
 8003f40:	f002 fb89 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	201b      	movs	r0, #27
 8003f4a:	f002 fb68 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003f4e:	201b      	movs	r0, #27
 8003f50:	f002 fb81 	bl	8006656 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f54:	e143      	b.n	80041de <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5e:	d134      	bne.n	8003fca <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f60:	2300      	movs	r3, #0
 8003f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f64:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	4a6b      	ldr	r2, [pc, #428]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f70:	4b69      	ldr	r3, [pc, #420]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f80:	4b65      	ldr	r3, [pc, #404]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	4a64      	ldr	r2, [pc, #400]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f8c:	4b62      	ldr	r3, [pc, #392]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	485b      	ldr	r0, [pc, #364]	@ (8004120 <HAL_TIM_Base_MspInit+0x288>)
 8003fb4:	f002 ff02 	bl	8006dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2100      	movs	r1, #0
 8003fbc:	201c      	movs	r0, #28
 8003fbe:	f002 fb2e 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fc2:	201c      	movs	r0, #28
 8003fc4:	f002 fb47 	bl	8006656 <HAL_NVIC_EnableIRQ>
}
 8003fc8:	e109      	b.n	80041de <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM3)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a55      	ldr	r2, [pc, #340]	@ (8004124 <HAL_TIM_Base_MspInit+0x28c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d134      	bne.n	800403e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff4:	4b48      	ldr	r3, [pc, #288]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	4a47      	ldr	r2, [pc, #284]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004000:	4b45      	ldr	r3, [pc, #276]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800400c:	2310      	movs	r3, #16
 800400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004018:	2300      	movs	r3, #0
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800401c:	2302      	movs	r3, #2
 800401e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004020:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004024:	4619      	mov	r1, r3
 8004026:	4840      	ldr	r0, [pc, #256]	@ (8004128 <HAL_TIM_Base_MspInit+0x290>)
 8004028:	f002 fec8 	bl	8006dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800402c:	2200      	movs	r2, #0
 800402e:	2100      	movs	r1, #0
 8004030:	201d      	movs	r0, #29
 8004032:	f002 faf4 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004036:	201d      	movs	r0, #29
 8004038:	f002 fb0d 	bl	8006656 <HAL_NVIC_EnableIRQ>
}
 800403c:	e0cf      	b.n	80041de <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM4)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3a      	ldr	r2, [pc, #232]	@ (800412c <HAL_TIM_Base_MspInit+0x294>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d135      	bne.n	80040b4 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	4b32      	ldr	r3, [pc, #200]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8004052:	f043 0304 	orr.w	r3, r3, #4
 8004056:	6413      	str	r3, [r2, #64]	@ 0x40
 8004058:	4b2f      	ldr	r3, [pc, #188]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 800406e:	f043 0308 	orr.w	r3, r3, #8
 8004072:	6313      	str	r3, [r2, #48]	@ 0x30
 8004074:	4b28      	ldr	r3, [pc, #160]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004084:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004092:	2302      	movs	r3, #2
 8004094:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004096:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800409a:	4619      	mov	r1, r3
 800409c:	4824      	ldr	r0, [pc, #144]	@ (8004130 <HAL_TIM_Base_MspInit+0x298>)
 800409e:	f002 fe8d 	bl	8006dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80040a2:	2200      	movs	r2, #0
 80040a4:	2100      	movs	r1, #0
 80040a6:	201e      	movs	r0, #30
 80040a8:	f002 fab9 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80040ac:	201e      	movs	r0, #30
 80040ae:	f002 fad2 	bl	8006656 <HAL_NVIC_EnableIRQ>
}
 80040b2:	e094      	b.n	80041de <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM6)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <HAL_TIM_Base_MspInit+0x29c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	4a14      	ldr	r2, [pc, #80]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 80040c8:	f043 0310 	orr.w	r3, r3, #16
 80040cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	69bb      	ldr	r3, [r7, #24]
}
 80040da:	e080      	b.n	80041de <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM7)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a15      	ldr	r2, [pc, #84]	@ (8004138 <HAL_TIM_Base_MspInit+0x2a0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d12a      	bne.n	800413c <HAL_TIM_Base_MspInit+0x2a4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 80040f0:	f043 0320 	orr.w	r3, r3, #32
 80040f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f6:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <HAL_TIM_Base_MspInit+0x280>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	2037      	movs	r0, #55	@ 0x37
 8004108:	f002 fa89 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800410c:	2037      	movs	r0, #55	@ 0x37
 800410e:	f002 faa2 	bl	8006656 <HAL_NVIC_EnableIRQ>
}
 8004112:	e064      	b.n	80041de <HAL_TIM_Base_MspInit+0x346>
 8004114:	40010000 	.word	0x40010000
 8004118:	40023800 	.word	0x40023800
 800411c:	40021000 	.word	0x40021000
 8004120:	40020000 	.word	0x40020000
 8004124:	40000400 	.word	0x40000400
 8004128:	40020400 	.word	0x40020400
 800412c:	40000800 	.word	0x40000800
 8004130:	40020c00 	.word	0x40020c00
 8004134:	40001000 	.word	0x40001000
 8004138:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a29      	ldr	r2, [pc, #164]	@ (80041e8 <HAL_TIM_Base_MspInit+0x350>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d14b      	bne.n	80041de <HAL_TIM_Base_MspInit+0x346>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_TIM_Base_MspInit+0x354>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	4a27      	ldr	r2, [pc, #156]	@ (80041ec <HAL_TIM_Base_MspInit+0x354>)
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	6453      	str	r3, [r2, #68]	@ 0x44
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_TIM_Base_MspInit+0x354>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	4b21      	ldr	r3, [pc, #132]	@ (80041ec <HAL_TIM_Base_MspInit+0x354>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	4a20      	ldr	r2, [pc, #128]	@ (80041ec <HAL_TIM_Base_MspInit+0x354>)
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	6313      	str	r3, [r2, #48]	@ 0x30
 8004172:	4b1e      	ldr	r3, [pc, #120]	@ (80041ec <HAL_TIM_Base_MspInit+0x354>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800417e:	2340      	movs	r3, #64	@ 0x40
 8004180:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418a:	2300      	movs	r3, #0
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800418e:	2303      	movs	r3, #3
 8004190:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004192:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004196:	4619      	mov	r1, r3
 8004198:	4815      	ldr	r0, [pc, #84]	@ (80041f0 <HAL_TIM_Base_MspInit+0x358>)
 800419a:	f002 fe0f 	bl	8006dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	202b      	movs	r0, #43	@ 0x2b
 80041a4:	f002 fa3b 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80041a8:	202b      	movs	r0, #43	@ 0x2b
 80041aa:	f002 fa54 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	202c      	movs	r0, #44	@ 0x2c
 80041b4:	f002 fa33 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041b8:	202c      	movs	r0, #44	@ 0x2c
 80041ba:	f002 fa4c 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	202d      	movs	r0, #45	@ 0x2d
 80041c4:	f002 fa2b 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80041c8:	202d      	movs	r0, #45	@ 0x2d
 80041ca:	f002 fa44 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2100      	movs	r1, #0
 80041d2:	202e      	movs	r0, #46	@ 0x2e
 80041d4:	f002 fa23 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80041d8:	202e      	movs	r0, #46	@ 0x2e
 80041da:	f002 fa3c 	bl	8006656 <HAL_NVIC_EnableIRQ>
}
 80041de:	bf00      	nop
 80041e0:	3750      	adds	r7, #80	@ 0x50
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40020800 	.word	0x40020800

080041f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a12      	ldr	r2, [pc, #72]	@ (800425c <HAL_TIM_MspPostInit+0x68>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d11e      	bne.n	8004254 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_TIM_MspPostInit+0x6c>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	4a10      	ldr	r2, [pc, #64]	@ (8004260 <HAL_TIM_MspPostInit+0x6c>)
 8004220:	f043 0310 	orr.w	r3, r3, #16
 8004224:	6313      	str	r3, [r2, #48]	@ 0x30
 8004226:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <HAL_TIM_MspPostInit+0x6c>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004236:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004244:	2301      	movs	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004248:	f107 030c 	add.w	r3, r7, #12
 800424c:	4619      	mov	r1, r3
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <HAL_TIM_MspPostInit+0x70>)
 8004250:	f002 fdb4 	bl	8006dbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004254:	bf00      	nop
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40010000 	.word	0x40010000
 8004260:	40023800 	.word	0x40023800
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	@ 0x28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1d      	ldr	r2, [pc, #116]	@ (80042fc <HAL_UART_MspInit+0x94>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d134      	bne.n	80042f4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b1c      	ldr	r3, [pc, #112]	@ (8004300 <HAL_UART_MspInit+0x98>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <HAL_UART_MspInit+0x98>)
 8004294:	f043 0310 	orr.w	r3, r3, #16
 8004298:	6453      	str	r3, [r2, #68]	@ 0x44
 800429a:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <HAL_UART_MspInit+0x98>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <HAL_UART_MspInit+0x98>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	4a14      	ldr	r2, [pc, #80]	@ (8004300 <HAL_UART_MspInit+0x98>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b6:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_UART_MspInit+0x98>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80042c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80042c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d0:	2303      	movs	r3, #3
 80042d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042d4:	2307      	movs	r3, #7
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	4809      	ldr	r0, [pc, #36]	@ (8004304 <HAL_UART_MspInit+0x9c>)
 80042e0:	f002 fd6c 	bl	8006dbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042e4:	2200      	movs	r2, #0
 80042e6:	2100      	movs	r1, #0
 80042e8:	2025      	movs	r0, #37	@ 0x25
 80042ea:	f002 f998 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042ee:	2025      	movs	r0, #37	@ 0x25
 80042f0:	f002 f9b1 	bl	8006656 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80042f4:	bf00      	nop
 80042f6:	3728      	adds	r7, #40	@ 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40011000 	.word	0x40011000
 8004300:	40023800 	.word	0x40023800
 8004304:	40020000 	.word	0x40020000

08004308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <NMI_Handler+0x4>

08004310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <HardFault_Handler+0x4>

08004318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <MemManage_Handler+0x4>

08004320 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <BusFault_Handler+0x4>

08004328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <UsageFault_Handler+0x4>

08004330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800435e:	f000 fcf9 	bl	8004d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}

08004366 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004378:	4802      	ldr	r0, [pc, #8]	@ (8004384 <ADC_IRQHandler+0x10>)
 800437a:	f000 fe8e 	bl	800509a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000328 	.word	0x20000328

08004388 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800438c:	4802      	ldr	r0, [pc, #8]	@ (8004398 <CAN1_TX_IRQHandler+0x10>)
 800438e:	f001 fe3b 	bl	8006008 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200003d0 	.word	0x200003d0

0800439c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043a0:	4802      	ldr	r0, [pc, #8]	@ (80043ac <CAN1_RX0_IRQHandler+0x10>)
 80043a2:	f001 fe31 	bl	8006008 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200003d0 	.word	0x200003d0

080043b0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043b4:	4802      	ldr	r0, [pc, #8]	@ (80043c0 <CAN1_RX1_IRQHandler+0x10>)
 80043b6:	f001 fe27 	bl	8006008 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200003d0 	.word	0x200003d0

080043c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043c8:	4802      	ldr	r0, [pc, #8]	@ (80043d4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80043ca:	f005 fbcf 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200004d4 	.word	0x200004d4

080043d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043dc:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80043de:	f005 fbc5 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200004d4 	.word	0x200004d4

080043ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043f0:	4802      	ldr	r0, [pc, #8]	@ (80043fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80043f2:	f005 fbbb 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200004d4 	.word	0x200004d4

08004400 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004404:	4802      	ldr	r0, [pc, #8]	@ (8004410 <TIM1_CC_IRQHandler+0x10>)
 8004406:	f005 fbb1 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200004d4 	.word	0x200004d4

08004414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004418:	4802      	ldr	r0, [pc, #8]	@ (8004424 <TIM2_IRQHandler+0x10>)
 800441a:	f005 fba7 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	2000051c 	.word	0x2000051c

08004428 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800442c:	4802      	ldr	r0, [pc, #8]	@ (8004438 <TIM3_IRQHandler+0x10>)
 800442e:	f005 fb9d 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000564 	.word	0x20000564

0800443c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004440:	4802      	ldr	r0, [pc, #8]	@ (800444c <TIM4_IRQHandler+0x10>)
 8004442:	f005 fb93 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200005ac 	.word	0x200005ac

08004450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004454:	4802      	ldr	r0, [pc, #8]	@ (8004460 <USART1_IRQHandler+0x10>)
 8004456:	f006 fcff 	bl	800ae58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200006cc 	.word	0x200006cc

08004464 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004468:	4802      	ldr	r0, [pc, #8]	@ (8004474 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800446a:	f005 fb7f 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000684 	.word	0x20000684

08004478 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800447c:	4802      	ldr	r0, [pc, #8]	@ (8004488 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800447e:	f005 fb75 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000684 	.word	0x20000684

0800448c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004490:	4802      	ldr	r0, [pc, #8]	@ (800449c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004492:	f005 fb6b 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000684 	.word	0x20000684

080044a0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80044a4:	4802      	ldr	r0, [pc, #8]	@ (80044b0 <TIM8_CC_IRQHandler+0x10>)
 80044a6:	f005 fb61 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000684 	.word	0x20000684

080044b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044b8:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <TIM7_IRQHandler+0x10>)
 80044ba:	f005 fb57 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	2000063c 	.word	0x2000063c

080044c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044cc:	4802      	ldr	r0, [pc, #8]	@ (80044d8 <DMA2_Stream0_IRQHandler+0x10>)
 80044ce:	f002 fa39 	bl	8006944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000370 	.word	0x20000370

080044dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return 1;
 80044e0:	2301      	movs	r3, #1
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_kill>:

int _kill(int pid, int sig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044f6:	f008 faf3 	bl	800cae0 <__errno>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2216      	movs	r2, #22
 80044fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <_exit>:

void _exit (int status)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004514:	f04f 31ff 	mov.w	r1, #4294967295
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ffe7 	bl	80044ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <_exit+0x12>

08004522 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e00a      	b.n	800454a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004534:	f3af 8000 	nop.w
 8004538:	4601      	mov	r1, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	60ba      	str	r2, [r7, #8]
 8004540:	b2ca      	uxtb	r2, r1
 8004542:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3301      	adds	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	429a      	cmp	r2, r3
 8004550:	dbf0      	blt.n	8004534 <_read+0x12>
  }

  return len;
 8004552:	687b      	ldr	r3, [r7, #4]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e009      	b.n	8004582 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	60ba      	str	r2, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3301      	adds	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	dbf1      	blt.n	800456e <_write+0x12>
  }
  return len;
 800458a:	687b      	ldr	r3, [r7, #4]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_close>:

int _close(int file)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045bc:	605a      	str	r2, [r3, #4]
  return 0;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_isatty>:

int _isatty(int file)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045d4:	2301      	movs	r3, #1
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004604:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <_sbrk+0x5c>)
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <_sbrk+0x60>)
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <_sbrk+0x64>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <_sbrk+0x64>)
 800461a:	4a12      	ldr	r2, [pc, #72]	@ (8004664 <_sbrk+0x68>)
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d207      	bcs.n	800463c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800462c:	f008 fa58 	bl	800cae0 <__errno>
 8004630:	4603      	mov	r3, r0
 8004632:	220c      	movs	r2, #12
 8004634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	e009      	b.n	8004650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <_sbrk+0x64>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004642:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <_sbrk+0x64>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	4a05      	ldr	r2, [pc, #20]	@ (8004660 <_sbrk+0x64>)
 800464c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800464e:	68fb      	ldr	r3, [r7, #12]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20020000 	.word	0x20020000
 800465c:	00000400 	.word	0x00000400
 8004660:	2000178c 	.word	0x2000178c
 8004664:	20001928 	.word	0x20001928

08004668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <SystemInit+0x20>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	4a05      	ldr	r2, [pc, #20]	@ (8004688 <SystemInit+0x20>)
 8004674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <delay_us>:

    return temp[FILTER_WINDOW_SIZE / 2];
}

// ==== DELAY MICRO GIÂY ====
void delay_us(uint16_t us) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8004696:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <delay_us+0x34>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim6);
 800469e:	4808      	ldr	r0, [pc, #32]	@ (80046c0 <delay_us+0x34>)
 80046a0:	f004 fedc 	bl	800945c <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80046a4:	bf00      	nop
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <delay_us+0x34>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3f9      	bcc.n	80046a6 <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim6);
 80046b2:	4803      	ldr	r0, [pc, #12]	@ (80046c0 <delay_us+0x34>)
 80046b4:	f004 ff3a 	bl	800952c <HAL_TIM_Base_Stop>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200005f4 	.word	0x200005f4

080046c4 <US01_TriggerOne>:

// ==== TRIGGER MỘT CẢM BIẾN ====
void US01_TriggerOne(uint8_t id) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b092      	sub	sp, #72	@ 0x48
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_SET);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4a29      	ldr	r2, [pc, #164]	@ (8004778 <US01_TriggerOne+0xb4>)
 80046d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	4a28      	ldr	r2, [pc, #160]	@ (800477c <US01_TriggerOne+0xb8>)
 80046da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046de:	2201      	movs	r2, #1
 80046e0:	4619      	mov	r1, r3
 80046e2:	f002 fd07 	bl	80070f4 <HAL_GPIO_WritePin>
    delay_us(10);
 80046e6:	200a      	movs	r0, #10
 80046e8:	f7ff ffd0 	bl	800468c <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_RESET);
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <US01_TriggerOne+0xb4>)
 80046f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	4a21      	ldr	r2, [pc, #132]	@ (800477c <US01_TriggerOne+0xb8>)
 80046f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046fc:	2200      	movs	r2, #0
 80046fe:	4619      	mov	r1, r3
 8004700:	f002 fcf8 	bl	80070f4 <HAL_GPIO_WritePin>

    Is_First_Captured[id] = 0;
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <US01_TriggerOne+0xbc>)
 8004708:	2100      	movs	r1, #0
 800470a:	54d1      	strb	r1, [r2, r3]
    HAL_TIM_IC_Start_IT(htim[id], TIM_CHANNEL[id]);
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <US01_TriggerOne+0xc0>)
 8004710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	491c      	ldr	r1, [pc, #112]	@ (8004788 <US01_TriggerOne+0xc4>)
 8004718:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f005 f84e 	bl	80097c0 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT(htim[id], TIM_IT_CC[id]);
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <US01_TriggerOne+0xc0>)
 8004728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68d9      	ldr	r1, [r3, #12]
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	4a16      	ldr	r2, [pc, #88]	@ (800478c <US01_TriggerOne+0xc8>)
 8004734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	4812      	ldr	r0, [pc, #72]	@ (8004784 <US01_TriggerOne+0xc0>)
 800473c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	60da      	str	r2, [r3, #12]

    char msg[64];
    snprintf(msg, sizeof(msg), "TRIG sensor %d\r\n", id);
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	f107 0008 	add.w	r0, r7, #8
 800474c:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <US01_TriggerOne+0xcc>)
 800474e:	2140      	movs	r1, #64	@ 0x40
 8004750:	f008 f834 	bl	800c7bc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fd89 	bl	8000270 <strlen>
 800475e:	4603      	mov	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	f107 0108 	add.w	r1, r7, #8
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	480a      	ldr	r0, [pc, #40]	@ (8004794 <US01_TriggerOne+0xd0>)
 800476c:	f006 fae8 	bl	800ad40 <HAL_UART_Transmit>
}
 8004770:	bf00      	nop
 8004772:	3748      	adds	r7, #72	@ 0x48
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	200000f4 	.word	0x200000f4
 800477c:	20000104 	.word	0x20000104
 8004780:	200017c0 	.word	0x200017c0
 8004784:	2000010c 	.word	0x2000010c
 8004788:	20001790 	.word	0x20001790
 800478c:	2000011c 	.word	0x2000011c
 8004790:	0800faa4 	.word	0x0800faa4
 8004794:	200006cc 	.word	0x200006cc

08004798 <HAL_TIM_IC_CaptureCallback>:

// ==== NGẮT INPUT CAPTURE ====
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htimx) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b0a8      	sub	sp, #160	@ 0xa0
 800479c:	af02      	add	r7, sp, #8
 800479e:	6078      	str	r0, [r7, #4]
    check_it(htimx);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fd fda1 	bl	80022e8 <check_it>
    for (int i = 0; i < NUM_SENSORS; i++) {
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047ac:	e1a9      	b.n	8004b02 <HAL_TIM_IC_CaptureCallback+0x36a>
        if (htimx->Instance == htim[i]->Instance) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	49ac      	ldr	r1, [pc, #688]	@ (8004a64 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80047b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	f040 819a 	bne.w	8004af8 <HAL_TIM_IC_CaptureCallback+0x360>
            if (Is_First_Captured[i] == 0) {
 80047c4:	4aa8      	ldr	r2, [pc, #672]	@ (8004a68 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80047c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f040 8086 	bne.w	80048e2 <HAL_TIM_IC_CaptureCallback+0x14a>
                IC_Val1[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 80047d6:	4aa5      	ldr	r2, [pc, #660]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80047d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f005 fcd8 	bl	800a198 <HAL_TIM_ReadCapturedValue>
 80047e8:	4602      	mov	r2, r0
 80047ea:	49a1      	ldr	r1, [pc, #644]	@ (8004a70 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80047ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 1;
 80047f4:	4a9c      	ldr	r2, [pc, #624]	@ (8004a68 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80047f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047fa:	4413      	add	r3, r2
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004800:	4a9a      	ldr	r2, [pc, #616]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004802:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_TIM_IC_CaptureCallback+0x88>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 020a 	bic.w	r2, r2, #10
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e027      	b.n	8004870 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004820:	4a92      	ldr	r2, [pc, #584]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d108      	bne.n	8004840 <HAL_TIM_IC_CaptureCallback+0xa8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800483c:	6213      	str	r3, [r2, #32]
 800483e:	e017      	b.n	8004870 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004840:	4a8a      	ldr	r2, [pc, #552]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d108      	bne.n	8004860 <HAL_TIM_IC_CaptureCallback+0xc8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800485c:	6213      	str	r3, [r2, #32]
 800485e:	e007      	b.n	8004870 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800486e:	6213      	str	r3, [r2, #32]
 8004870:	4a7e      	ldr	r2, [pc, #504]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004872:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <HAL_TIM_IC_CaptureCallback+0xf8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0202 	orr.w	r2, r2, #2
 800488c:	621a      	str	r2, [r3, #32]

                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
            }
            break;
 800488e:	e13e      	b.n	8004b0e <HAL_TIM_IC_CaptureCallback+0x376>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004890:	4a76      	ldr	r2, [pc, #472]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004892:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d108      	bne.n	80048b0 <HAL_TIM_IC_CaptureCallback+0x118>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	f043 0320 	orr.w	r3, r3, #32
 80048ac:	6213      	str	r3, [r2, #32]
 80048ae:	e122      	b.n	8004af6 <HAL_TIM_IC_CaptureCallback+0x35e>
 80048b0:	4a6e      	ldr	r2, [pc, #440]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80048b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d108      	bne.n	80048d0 <HAL_TIM_IC_CaptureCallback+0x138>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048cc:	6213      	str	r3, [r2, #32]
 80048ce:	e112      	b.n	8004af6 <HAL_TIM_IC_CaptureCallback+0x35e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048de:	6213      	str	r3, [r2, #32]
            break;
 80048e0:	e115      	b.n	8004b0e <HAL_TIM_IC_CaptureCallback+0x376>
                IC_Val2[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 80048e2:	4a62      	ldr	r2, [pc, #392]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80048e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f005 fc52 	bl	800a198 <HAL_TIM_ReadCapturedValue>
 80048f4:	4602      	mov	r2, r0
 80048f6:	495f      	ldr	r1, [pc, #380]	@ (8004a74 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80048f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                __HAL_TIM_SET_COUNTER(htimx, 0);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	625a      	str	r2, [r3, #36]	@ 0x24
                uint32_t max_timer = __HAL_TIM_GET_AUTORELOAD(htim[i]);
 8004908:	4a56      	ldr	r2, [pc, #344]	@ (8004a64 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 800490a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800490e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 800491a:	4a56      	ldr	r2, [pc, #344]	@ (8004a74 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800491c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004924:	4952      	ldr	r1, [pc, #328]	@ (8004a70 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004926:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800492a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 800492e:	429a      	cmp	r2, r3
 8004930:	d90b      	bls.n	800494a <HAL_TIM_IC_CaptureCallback+0x1b2>
 8004932:	4a50      	ldr	r2, [pc, #320]	@ (8004a74 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004934:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800493c:	494c      	ldr	r1, [pc, #304]	@ (8004a70 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800493e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	e00d      	b.n	8004966 <HAL_TIM_IC_CaptureCallback+0x1ce>
                                ((max_timer - IC_Val1[i]) + IC_Val2[i]);
 800494a:	4a49      	ldr	r2, [pc, #292]	@ (8004a70 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800494c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004954:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	4946      	ldr	r1, [pc, #280]	@ (8004a74 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800495c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004960:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 8004964:	4413      	add	r3, r2
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 8004966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                uint32_t raw = (diff * 0.034f) / 2.0f;
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8004a78 <HAL_TIM_IC_CaptureCallback+0x2e0>
 800497a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800497e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498a:	ee17 3a90 	vmov	r3, s15
 800498e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                Distances[i]=raw;
 8004992:	493a      	ldr	r1, [pc, #232]	@ (8004a7c <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004994:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004998:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800499c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 0;
 80049a0:	4a31      	ldr	r2, [pc, #196]	@ (8004a68 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80049a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049a6:	4413      	add	r3, r2
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
                         i, raw, Distances[i]);
 80049ac:	4a33      	ldr	r2, [pc, #204]	@ (8004a7c <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80049ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                snprintf(msg, sizeof(msg),
 80049b6:	f107 0008 	add.w	r0, r7, #8
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80049c8:	2180      	movs	r1, #128	@ 0x80
 80049ca:	f007 fef7 	bl	800c7bc <sniprintf>
                UART_SendString(msg);
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8ba 	bl	8004b4c <UART_SendString>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
 80049d8:	4a24      	ldr	r2, [pc, #144]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80049da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <HAL_TIM_IC_CaptureCallback+0x260>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 020a 	bic.w	r2, r2, #10
 80049f4:	621a      	str	r2, [r3, #32]
 80049f6:	e027      	b.n	8004a48 <HAL_TIM_IC_CaptureCallback+0x2b0>
 80049f8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80049fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d108      	bne.n	8004a18 <HAL_TIM_IC_CaptureCallback+0x280>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a14:	6213      	str	r3, [r2, #32]
 8004a16:	e017      	b.n	8004a48 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8004a18:	4a14      	ldr	r2, [pc, #80]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d108      	bne.n	8004a38 <HAL_TIM_IC_CaptureCallback+0x2a0>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004a46:	6213      	str	r3, [r2, #32]
 8004a48:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004a4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d116      	bne.n	8004a84 <HAL_TIM_IC_CaptureCallback+0x2ec>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a12      	ldr	r2, [r2, #32]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e031      	b.n	8004ac8 <HAL_TIM_IC_CaptureCallback+0x330>
 8004a64:	2000010c 	.word	0x2000010c
 8004a68:	200017c0 	.word	0x200017c0
 8004a6c:	20001790 	.word	0x20001790
 8004a70:	200017a0 	.word	0x200017a0
 8004a74:	200017b0 	.word	0x200017b0
 8004a78:	3d0b4396 	.word	0x3d0b4396
 8004a7c:	200017c4 	.word	0x200017c4
 8004a80:	0800fab8 	.word	0x0800fab8
 8004a84:	4a24      	ldr	r2, [pc, #144]	@ (8004b18 <HAL_TIM_IC_CaptureCallback+0x380>)
 8004a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d106      	bne.n	8004aa0 <HAL_TIM_IC_CaptureCallback+0x308>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	6213      	str	r3, [r2, #32]
 8004a9e:	e013      	b.n	8004ac8 <HAL_TIM_IC_CaptureCallback+0x330>
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_TIM_IC_CaptureCallback+0x380>)
 8004aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_IC_CaptureCallback+0x324>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	6213      	str	r3, [r2, #32]
 8004aba:	e005      	b.n	8004ac8 <HAL_TIM_IC_CaptureCallback+0x330>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6213      	str	r3, [r2, #32]
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68d9      	ldr	r1, [r3, #12]
 8004ace:	4a13      	ldr	r2, [pc, #76]	@ (8004b1c <HAL_TIM_IC_CaptureCallback+0x384>)
 8004ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	400a      	ands	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <HAL_TIM_IC_CaptureCallback+0x380>)
 8004ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f004 ff8e 	bl	8009a10 <HAL_TIM_IC_Stop_IT>
            break;
 8004af4:	e00b      	b.n	8004b0e <HAL_TIM_IC_CaptureCallback+0x376>
 8004af6:	e00a      	b.n	8004b0e <HAL_TIM_IC_CaptureCallback+0x376>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004afc:	3301      	adds	r3, #1
 8004afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	f77f ae51 	ble.w	80047ae <HAL_TIM_IC_CaptureCallback+0x16>
        }
    }
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	3798      	adds	r7, #152	@ 0x98
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20001790 	.word	0x20001790
 8004b1c:	2000011c 	.word	0x2000011c

08004b20 <US01_GetDistance>:

// ==== TRUY XUẤT GIÁ TRỊ ====
uint32_t US01_GetDistance(uint8_t id) {
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
    return (id < NUM_SENSORS) ? Distances[id] : 0;
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d804      	bhi.n	8004b3a <US01_GetDistance+0x1a>
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	4a05      	ldr	r2, [pc, #20]	@ (8004b48 <US01_GetDistance+0x28>)
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	e000      	b.n	8004b3c <US01_GetDistance+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	200017c4 	.word	0x200017c4

08004b4c <UART_SendString>:

void UART_SendString(char *str) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fb fb8b 	bl	8000270 <strlen>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4803      	ldr	r0, [pc, #12]	@ (8004b74 <UART_SendString+0x28>)
 8004b66:	f006 f8eb 	bl	800ad40 <HAL_UART_Transmit>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200006cc 	.word	0x200006cc

08004b78 <US01_SendAllDistances_CAN>:

// ==== GỬI DỮ LIỆU CAN ====
void US01_SendAllDistances_CAN(void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
    uint8_t data[8];

    for (int i = 0; i < NUM_SENSORS; i++) {
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e025      	b.n	8004bd0 <US01_SendAllDistances_CAN+0x58>
        uint16_t dist = (uint16_t)US01_GetDistance(i);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ffc9 	bl	8004b20 <US01_GetDistance>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	817b      	strh	r3, [r7, #10]

        if (dist > 500 || dist <= 1) {
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004b98:	d802      	bhi.n	8004ba0 <US01_SendAllDistances_CAN+0x28>
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d801      	bhi.n	8004ba4 <US01_SendAllDistances_CAN+0x2c>
            dist = 0x0033;
 8004ba0:	2333      	movs	r3, #51	@ 0x33
 8004ba2:	817b      	strh	r3, [r7, #10]
        }

        data[2 * i]     = (dist >> 8) & 0xFF;
 8004ba4:	897b      	ldrh	r3, [r7, #10]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	443b      	add	r3, r7
 8004bb4:	f803 2c10 	strb.w	r2, [r3, #-16]
        data[2 * i + 1] = dist & 0xFF;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	897a      	ldrh	r2, [r7, #10]
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	3310      	adds	r3, #16
 8004bc4:	443b      	add	r3, r7
 8004bc6:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	ddd6      	ble.n	8004b84 <US01_SendAllDistances_CAN+0xc>
    }

    CAN_SendTopicData(TOPIC_ID_US01, data, 8);
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	2208      	movs	r2, #8
 8004bda:	4619      	mov	r1, r3
 8004bdc:	2016      	movs	r0, #22
 8004bde:	f7fd faf7 	bl	80021d0 <CAN_SendTopicData>
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <US01_TriggerAll_Sequential>:

void US01_TriggerAll_Sequential(void) {
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
    // KHÔNG DÙNG nếu bạn đã dùng trigger từng sensor trong vòng lặp
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	e00a      	b.n	8004c0c <US01_TriggerAll_Sequential+0x22>
        US01_TriggerOne(i);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fd62 	bl	80046c4 <US01_TriggerOne>
        delay_us(10);
 8004c00:	200a      	movs	r0, #10
 8004c02:	f7ff fd43 	bl	800468c <delay_us>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	ddf1      	ble.n	8004bf6 <US01_TriggerAll_Sequential+0xc>
    }
}
 8004c12:	bf00      	nop
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <PrintAllDistances>:

// ==== IN KẾT QUẢ ====
void PrintAllDistances(void) {
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b0a5      	sub	sp, #148	@ 0x94
 8004c20:	af04      	add	r7, sp, #16
    char buf[128];
    snprintf(buf, sizeof(buf),
             "Truoc2: %lucm | Trai: %lucm | Truoc1: %lucm | Phai: %lucm\r\n",
             Distances[0], Distances[1], Distances[2], Distances[3]);
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <PrintAllDistances+0x38>)
 8004c24:	681c      	ldr	r4, [r3, #0]
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <PrintAllDistances+0x38>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <PrintAllDistances+0x38>)
 8004c2c:	6892      	ldr	r2, [r2, #8]
 8004c2e:	4909      	ldr	r1, [pc, #36]	@ (8004c54 <PrintAllDistances+0x38>)
 8004c30:	68c9      	ldr	r1, [r1, #12]
    snprintf(buf, sizeof(buf),
 8004c32:	4638      	mov	r0, r7
 8004c34:	9102      	str	r1, [sp, #8]
 8004c36:	9201      	str	r2, [sp, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	4a06      	ldr	r2, [pc, #24]	@ (8004c58 <PrintAllDistances+0x3c>)
 8004c3e:	2180      	movs	r1, #128	@ 0x80
 8004c40:	f007 fdbc 	bl	800c7bc <sniprintf>
    UART_SendString(buf);
 8004c44:	463b      	mov	r3, r7
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff80 	bl	8004b4c <UART_SendString>
}
 8004c4c:	bf00      	nop
 8004c4e:	3784      	adds	r7, #132	@ 0x84
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}
 8004c54:	200017c4 	.word	0x200017c4
 8004c58:	0800fadc 	.word	0x0800fadc

08004c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004c60:	f7ff fd02 	bl	8004668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c64:	480c      	ldr	r0, [pc, #48]	@ (8004c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c66:	490d      	ldr	r1, [pc, #52]	@ (8004c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c6c:	e002      	b.n	8004c74 <LoopCopyDataInit>

08004c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c72:	3304      	adds	r3, #4

08004c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c78:	d3f9      	bcc.n	8004c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8004ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c80:	e001      	b.n	8004c86 <LoopFillZerobss>

08004c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c84:	3204      	adds	r2, #4

08004c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c88:	d3fb      	bcc.n	8004c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c8a:	f007 ff2f 	bl	800caec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c8e:	f7fd fe49 	bl	8002924 <main>
  bx  lr    
 8004c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c9c:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8004ca0:	0800fed4 	.word	0x0800fed4
  ldr r2, =_sbss
 8004ca4:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8004ca8:	20001924 	.word	0x20001924

08004cac <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cac:	e7fe      	b.n	8004cac <CAN1_SCE_IRQHandler>
	...

08004cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <HAL_Init+0x40>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf0 <HAL_Init+0x40>)
 8004cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_Init+0x40>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <HAL_Init+0x40>)
 8004cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ccc:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <HAL_Init+0x40>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a07      	ldr	r2, [pc, #28]	@ (8004cf0 <HAL_Init+0x40>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cd8:	2003      	movs	r0, #3
 8004cda:	f001 fc95 	bl	8006608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cde:	200f      	movs	r0, #15
 8004ce0:	f000 f808 	bl	8004cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ce4:	f7fe fe70 	bl	80039c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cfc:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <HAL_InitTick+0x54>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b12      	ldr	r3, [pc, #72]	@ (8004d4c <HAL_InitTick+0x58>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fcad 	bl	8006672 <HAL_SYSTICK_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e00e      	b.n	8004d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d80a      	bhi.n	8004d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	f001 fc75 	bl	800661e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d34:	4a06      	ldr	r2, [pc, #24]	@ (8004d50 <HAL_InitTick+0x5c>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200000f0 	.word	0x200000f0
 8004d4c:	20000130 	.word	0x20000130
 8004d50:	2000012c 	.word	0x2000012c

08004d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d58:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <HAL_IncTick+0x20>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <HAL_IncTick+0x24>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4413      	add	r3, r2
 8004d64:	4a04      	ldr	r2, [pc, #16]	@ (8004d78 <HAL_IncTick+0x24>)
 8004d66:	6013      	str	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000130 	.word	0x20000130
 8004d78:	200017d4 	.word	0x200017d4

08004d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <HAL_GetTick+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	200017d4 	.word	0x200017d4

08004d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	f7ff ffee 	bl	8004d7c <HAL_GetTick>
 8004da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d005      	beq.n	8004dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dae:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <HAL_Delay+0x44>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dba:	bf00      	nop
 8004dbc:	f7ff ffde 	bl	8004d7c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d8f7      	bhi.n	8004dbc <HAL_Delay+0x28>
  {
  }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000130 	.word	0x20000130

08004ddc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e033      	b.n	8004e5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fe fe12 	bl	8003a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d118      	bne.n	8004e4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e22:	f023 0302 	bic.w	r3, r3, #2
 8004e26:	f043 0202 	orr.w	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fb86 	bl	8005540 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e4a:	e001      	b.n	8004e50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_Start_IT+0x1a>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0bd      	b.n	8004ffa <HAL_ADC_Start_IT+0x196>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d018      	beq.n	8004ec6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ea4:	4b58      	ldr	r3, [pc, #352]	@ (8005008 <HAL_ADC_Start_IT+0x1a4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a58      	ldr	r2, [pc, #352]	@ (800500c <HAL_ADC_Start_IT+0x1a8>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	0c9a      	lsrs	r2, r3, #18
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004eb8:	e002      	b.n	8004ec0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f9      	bne.n	8004eba <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 8085 	bne.w	8004fe0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004f00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f14:	d106      	bne.n	8004f24 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f023 0206 	bic.w	r2, r3, #6
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f22:	e002      	b.n	8004f2a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f32:	4b37      	ldr	r3, [pc, #220]	@ (8005010 <HAL_ADC_Start_IT+0x1ac>)
 8004f34:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f4e:	f043 0320 	orr.w	r3, r3, #32
 8004f52:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d12a      	bne.n	8004fb6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2b      	ldr	r2, [pc, #172]	@ (8005014 <HAL_ADC_Start_IT+0x1b0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d015      	beq.n	8004f96 <HAL_ADC_Start_IT+0x132>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005018 <HAL_ADC_Start_IT+0x1b4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d105      	bne.n	8004f80 <HAL_ADC_Start_IT+0x11c>
 8004f74:	4b26      	ldr	r3, [pc, #152]	@ (8005010 <HAL_ADC_Start_IT+0x1ac>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a25      	ldr	r2, [pc, #148]	@ (800501c <HAL_ADC_Start_IT+0x1b8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d136      	bne.n	8004ff8 <HAL_ADC_Start_IT+0x194>
 8004f8a:	4b21      	ldr	r3, [pc, #132]	@ (8005010 <HAL_ADC_Start_IT+0x1ac>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d130      	bne.n	8004ff8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d129      	bne.n	8004ff8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	e020      	b.n	8004ff8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <HAL_ADC_Start_IT+0x1b0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_ADC_Start_IT+0x194>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d114      	bne.n	8004ff8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	e00b      	b.n	8004ff8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	f043 0210 	orr.w	r2, r3, #16
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff0:	f043 0201 	orr.w	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	200000f0 	.word	0x200000f0
 800500c:	431bde83 	.word	0x431bde83
 8005010:	40012300 	.word	0x40012300
 8005014:	40012000 	.word	0x40012000
 8005018:	40012100 	.word	0x40012100
 800501c:	40012200 	.word	0x40012200

08005020 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_ADC_Stop_IT+0x16>
 8005032:	2302      	movs	r3, #2
 8005034:	e02b      	b.n	800508e <HAL_ADC_Stop_IT+0x6e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d113      	bne.n	8005084 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800506a:	f023 0320 	bic.w	r3, r3, #32
 800506e:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	f043 0201 	orr.w	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d049      	beq.n	8005164 <HAL_ADC_IRQHandler+0xca>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d046      	beq.n	8005164 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d12b      	bne.n	8005154 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005100:	2b00      	cmp	r3, #0
 8005102:	d127      	bne.n	8005154 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800510e:	2b00      	cmp	r3, #0
 8005110:	d006      	beq.n	8005120 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800511c:	2b00      	cmp	r3, #0
 800511e:	d119      	bne.n	8005154 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0220 	bic.w	r2, r2, #32
 800512e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	f043 0201 	orr.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fd fbb5 	bl	80028c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f06f 0212 	mvn.w	r2, #18
 8005162:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005172:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d057      	beq.n	800522a <HAL_ADC_IRQHandler+0x190>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d054      	beq.n	800522a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005190:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d139      	bne.n	800521a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d12b      	bne.n	800521a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d124      	bne.n	800521a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11d      	bne.n	800521a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d119      	bne.n	800521a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051f4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d105      	bne.n	800521a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa8c 	bl	8005738 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 020c 	mvn.w	r2, #12
 8005228:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <HAL_ADC_IRQHandler+0x1d6>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10d      	bne.n	8005270 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f837 	bl	80052d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0201 	mvn.w	r2, #1
 800526e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800527e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d015      	beq.n	80052b2 <HAL_ADC_IRQHandler+0x218>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005290:	f043 0202 	orr.w	r2, r3, #2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0220 	mvn.w	r2, #32
 80052a0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f820 	bl	80052e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0220 	mvn.w	r2, #32
 80052b0:	601a      	str	r2, [r3, #0]
  }
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x1c>
 8005314:	2302      	movs	r3, #2
 8005316:	e105      	b.n	8005524 <HAL_ADC_ConfigChannel+0x228>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b09      	cmp	r3, #9
 8005326:	d925      	bls.n	8005374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68d9      	ldr	r1, [r3, #12]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	3b1e      	subs	r3, #30
 800533e:	2207      	movs	r2, #7
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43da      	mvns	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	400a      	ands	r2, r1
 800534c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68d9      	ldr	r1, [r3, #12]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	4618      	mov	r0, r3
 8005360:	4603      	mov	r3, r0
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4403      	add	r3, r0
 8005366:	3b1e      	subs	r3, #30
 8005368:	409a      	lsls	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	e022      	b.n	80053ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6919      	ldr	r1, [r3, #16]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	2207      	movs	r2, #7
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43da      	mvns	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	400a      	ands	r2, r1
 8005396:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6919      	ldr	r1, [r3, #16]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4618      	mov	r0, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4403      	add	r3, r0
 80053b0:	409a      	lsls	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d824      	bhi.n	800540c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	3b05      	subs	r3, #5
 80053d4:	221f      	movs	r2, #31
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43da      	mvns	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	400a      	ands	r2, r1
 80053e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4618      	mov	r0, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	3b05      	subs	r3, #5
 80053fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34
 800540a:	e04c      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	d824      	bhi.n	800545e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	3b23      	subs	r3, #35	@ 0x23
 8005426:	221f      	movs	r2, #31
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43da      	mvns	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	400a      	ands	r2, r1
 8005434:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	4618      	mov	r0, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	3b23      	subs	r3, #35	@ 0x23
 8005450:	fa00 f203 	lsl.w	r2, r0, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
 800545c:	e023      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	3b41      	subs	r3, #65	@ 0x41
 8005470:	221f      	movs	r2, #31
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43da      	mvns	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	400a      	ands	r2, r1
 800547e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	4618      	mov	r0, r3
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	3b41      	subs	r3, #65	@ 0x41
 800549a:	fa00 f203 	lsl.w	r2, r0, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054a6:	4b22      	ldr	r3, [pc, #136]	@ (8005530 <HAL_ADC_ConfigChannel+0x234>)
 80054a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a21      	ldr	r2, [pc, #132]	@ (8005534 <HAL_ADC_ConfigChannel+0x238>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x1cc>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b12      	cmp	r3, #18
 80054ba:	d105      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a19      	ldr	r2, [pc, #100]	@ (8005534 <HAL_ADC_ConfigChannel+0x238>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d123      	bne.n	800551a <HAL_ADC_ConfigChannel+0x21e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d003      	beq.n	80054e2 <HAL_ADC_ConfigChannel+0x1e6>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b11      	cmp	r3, #17
 80054e0:	d11b      	bne.n	800551a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d111      	bne.n	800551a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054f6:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <HAL_ADC_ConfigChannel+0x23c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a10      	ldr	r2, [pc, #64]	@ (800553c <HAL_ADC_ConfigChannel+0x240>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	0c9a      	lsrs	r2, r3, #18
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800550c:	e002      	b.n	8005514 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3b01      	subs	r3, #1
 8005512:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f9      	bne.n	800550e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40012300 	.word	0x40012300
 8005534:	40012000 	.word	0x40012000
 8005538:	200000f0 	.word	0x200000f0
 800553c:	431bde83 	.word	0x431bde83

08005540 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005548:	4b79      	ldr	r3, [pc, #484]	@ (8005730 <ADC_Init+0x1f0>)
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	021a      	lsls	r2, r3, #8
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6859      	ldr	r1, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	4a58      	ldr	r2, [pc, #352]	@ (8005734 <ADC_Init+0x1f4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d022      	beq.n	800561e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6899      	ldr	r1, [r3, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	e00f      	b.n	800563e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800562c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800563c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0202 	bic.w	r2, r2, #2
 800564c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6899      	ldr	r1, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7e1b      	ldrb	r3, [r3, #24]
 8005658:	005a      	lsls	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01b      	beq.n	80056a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800567a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800568a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	3b01      	subs	r3, #1
 8005698:	035a      	lsls	r2, r3, #13
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	e007      	b.n	80056b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80056c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	051a      	lsls	r2, r3, #20
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80056e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6899      	ldr	r1, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056f6:	025a      	lsls	r2, r3, #9
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6899      	ldr	r1, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	029a      	lsls	r2, r3, #10
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40012300 	.word	0x40012300
 8005734:	0f000001 	.word	0x0f000001

08005738 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0ed      	b.n	800593a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fe f9d8 	bl	8003b20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005780:	f7ff fafc 	bl	8004d7c <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005786:	e012      	b.n	80057ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005788:	f7ff faf8 	bl	8004d7c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b0a      	cmp	r3, #10
 8005794:	d90b      	bls.n	80057ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2205      	movs	r2, #5
 80057a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0c5      	b.n	800593a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0e5      	beq.n	8005788 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0202 	bic.w	r2, r2, #2
 80057ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057cc:	f7ff fad6 	bl	8004d7c <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057d2:	e012      	b.n	80057fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80057d4:	f7ff fad2 	bl	8004d7c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b0a      	cmp	r3, #10
 80057e0:	d90b      	bls.n	80057fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2205      	movs	r2, #5
 80057f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e09f      	b.n	800593a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e5      	bne.n	80057d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7e1b      	ldrb	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d108      	bne.n	8005822 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e007      	b.n	8005832 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7e5b      	ldrb	r3, [r3, #25]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d108      	bne.n	800584c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e007      	b.n	800585c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7e9b      	ldrb	r3, [r3, #26]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0220 	orr.w	r2, r2, #32
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e007      	b.n	8005886 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0220 	bic.w	r2, r2, #32
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7edb      	ldrb	r3, [r3, #27]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d108      	bne.n	80058a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0210 	bic.w	r2, r2, #16
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e007      	b.n	80058b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0210 	orr.w	r2, r2, #16
 80058ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7f1b      	ldrb	r3, [r3, #28]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0208 	orr.w	r2, r2, #8
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e007      	b.n	80058da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0208 	bic.w	r2, r2, #8
 80058d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7f5b      	ldrb	r3, [r3, #29]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0204 	orr.w	r2, r2, #4
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e007      	b.n	8005904 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0204 	bic.w	r2, r2, #4
 8005902:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	ea42 0103 	orr.w	r1, r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005954:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d003      	beq.n	8005964 <HAL_CAN_ConfigFilter+0x20>
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b02      	cmp	r3, #2
 8005960:	f040 80be 	bne.w	8005ae0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005964:	4b65      	ldr	r3, [pc, #404]	@ (8005afc <HAL_CAN_ConfigFilter+0x1b8>)
 8005966:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800597e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	431a      	orrs	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2201      	movs	r2, #1
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	401a      	ands	r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d123      	bne.n	8005a0e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	401a      	ands	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3248      	adds	r2, #72	@ 0x48
 80059ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a04:	6939      	ldr	r1, [r7, #16]
 8005a06:	3348      	adds	r3, #72	@ 0x48
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d122      	bne.n	8005a5c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3248      	adds	r2, #72	@ 0x48
 8005a3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	3348      	adds	r3, #72	@ 0x48
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	440b      	add	r3, r1
 8005a5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	401a      	ands	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005a76:	e007      	b.n	8005a88 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005aa2:	e007      	b.n	8005ab4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e006      	b.n	8005aee <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40006400 	.word	0x40006400

08005b00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d12e      	bne.n	8005b72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2c:	f7ff f926 	bl	8004d7c <HAL_GetTick>
 8005b30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b32:	e012      	b.n	8005b5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005b34:	f7ff f922 	bl	8004d7c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b0a      	cmp	r3, #10
 8005b40:	d90b      	bls.n	8005b5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2205      	movs	r2, #5
 8005b52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e012      	b.n	8005b80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e5      	bne.n	8005b34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e006      	b.n	8005b80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b089      	sub	sp, #36	@ 0x24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <HAL_CAN_AddTxMessage+0x2c>
 8005bac:	7ffb      	ldrb	r3, [r7, #31]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f040 80ad 	bne.w	8005d0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8095 	beq.w	8005cfe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	0e1b      	lsrs	r3, r3, #24
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005bde:	2201      	movs	r2, #1
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	409a      	lsls	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10d      	bne.n	8005c0c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6809      	ldr	r1, [r1, #0]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3318      	adds	r3, #24
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	440b      	add	r3, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e00f      	b.n	8005c2c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005c20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3318      	adds	r3, #24
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	440b      	add	r3, r1
 8005c2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	3318      	adds	r3, #24
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	7d1b      	ldrb	r3, [r3, #20]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d111      	bne.n	8005c6c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	3318      	adds	r3, #24
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	4413      	add	r3, r2
 8005c54:	3304      	adds	r3, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	6811      	ldr	r1, [r2, #0]
 8005c5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3318      	adds	r3, #24
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	440b      	add	r3, r1
 8005c68:	3304      	adds	r3, #4
 8005c6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3307      	adds	r3, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	061a      	lsls	r2, r3, #24
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3306      	adds	r3, #6
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3305      	adds	r3, #5
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	4313      	orrs	r3, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	3204      	adds	r2, #4
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	4610      	mov	r0, r2
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	6811      	ldr	r1, [r2, #0]
 8005c94:	ea43 0200 	orr.w	r2, r3, r0
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005ca2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3303      	adds	r3, #3
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	061a      	lsls	r2, r3, #24
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3302      	adds	r3, #2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	6811      	ldr	r1, [r2, #0]
 8005cca:	ea43 0200 	orr.w	r2, r3, r0
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	440b      	add	r3, r1
 8005cd4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005cd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3318      	adds	r3, #24
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	4413      	add	r3, r2
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	6811      	ldr	r1, [r2, #0]
 8005cec:	f043 0201 	orr.w	r2, r3, #1
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	3318      	adds	r3, #24
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	440b      	add	r3, r1
 8005cf8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e00e      	b.n	8005d1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e006      	b.n	8005d1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3724      	adds	r7, #36	@ 0x24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d003      	beq.n	8005d4c <HAL_CAN_GetRxMessage+0x24>
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	f040 8103 	bne.w	8005f52 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10e      	bne.n	8005d70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0f7      	b.n	8005f60 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e0e8      	b.n	8005f60 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	331b      	adds	r3, #27
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	4413      	add	r3, r2
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0204 	and.w	r2, r3, #4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	331b      	adds	r3, #27
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	4413      	add	r3, r2
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	0d5b      	lsrs	r3, r3, #21
 8005dbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e00b      	b.n	8005dde <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	331b      	adds	r3, #27
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	4413      	add	r3, r2
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	331b      	adds	r3, #27
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4413      	add	r3, r2
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0202 	and.w	r2, r3, #2
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	331b      	adds	r3, #27
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	4413      	add	r3, r2
 8005e00:	3304      	adds	r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2208      	movs	r2, #8
 8005e10:	611a      	str	r2, [r3, #16]
 8005e12:	e00b      	b.n	8005e2c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	331b      	adds	r3, #27
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	331b      	adds	r3, #27
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4413      	add	r3, r2
 8005e38:	3304      	adds	r3, #4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	331b      	adds	r3, #27
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	0a1a      	lsrs	r2, r3, #8
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	3301      	adds	r3, #1
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0c1a      	lsrs	r2, r3, #16
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	0e1a      	lsrs	r2, r3, #24
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	3303      	adds	r3, #3
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	0a1a      	lsrs	r2, r3, #8
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3305      	adds	r3, #5
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	0c1a      	lsrs	r2, r3, #16
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	3306      	adds	r3, #6
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	0e1a      	lsrs	r2, r3, #24
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	3307      	adds	r3, #7
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0220 	orr.w	r2, r2, #32
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e007      	b.n	8005f4e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0220 	orr.w	r2, r2, #32
 8005f4c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e006      	b.n	8005f60 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f80:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d002      	beq.n	8005f8e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005f88:	7afb      	ldrb	r3, [r7, #11]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d10f      	bne.n	8005fae <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e005      	b.n	8005fae <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005fae:	68fb      	ldr	r3, [r7, #12]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fcc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d002      	beq.n	8005fda <HAL_CAN_ActivateNotification+0x1e>
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d109      	bne.n	8005fee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6959      	ldr	r1, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e006      	b.n	8005ffc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
  }
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d07c      	beq.n	8006148 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d023      	beq.n	80060a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f983 	bl	8006376 <HAL_CAN_TxMailbox0CompleteCallback>
 8006070:	e016      	b.n	80060a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
 8006084:	e00c      	b.n	80060a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
 8006098:	e002      	b.n	80060a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f989 	bl	80063b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d024      	beq.n	80060f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f963 	bl	800638a <HAL_CAN_TxMailbox1CompleteCallback>
 80060c4:	e016      	b.n	80060f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d8:	e00c      	b.n	80060f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ec:	e002      	b.n	80060f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f969 	bl	80063c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d024      	beq.n	8006148 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006106:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f943 	bl	800639e <HAL_CAN_TxMailbox2CompleteCallback>
 8006118:	e016      	b.n	8006148 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
 800612c:	e00c      	b.n	8006148 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	e002      	b.n	8006148 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f949 	bl	80063da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2210      	movs	r2, #16
 800616a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2208      	movs	r2, #8
 8006186:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f930 	bl	80063ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fb fff4 	bl	8002194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00c      	beq.n	80061d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d006      	beq.n	80061f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2208      	movs	r2, #8
 80061ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f912 	bl	8006416 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8f9 	bl	8006402 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8fc 	bl	800642a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f003 0308 	and.w	r3, r3, #8
 8006242:	2b00      	cmp	r3, #0
 8006244:	d006      	beq.n	8006254 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2208      	movs	r2, #8
 800624c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8f5 	bl	800643e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d07b      	beq.n	8006356 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d072      	beq.n	800634e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	f043 0302 	orr.w	r3, r3, #2
 800629e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d043      	beq.n	800634e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d03e      	beq.n	800634e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062d6:	2b60      	cmp	r3, #96	@ 0x60
 80062d8:	d02b      	beq.n	8006332 <HAL_CAN_IRQHandler+0x32a>
 80062da:	2b60      	cmp	r3, #96	@ 0x60
 80062dc:	d82e      	bhi.n	800633c <HAL_CAN_IRQHandler+0x334>
 80062de:	2b50      	cmp	r3, #80	@ 0x50
 80062e0:	d022      	beq.n	8006328 <HAL_CAN_IRQHandler+0x320>
 80062e2:	2b50      	cmp	r3, #80	@ 0x50
 80062e4:	d82a      	bhi.n	800633c <HAL_CAN_IRQHandler+0x334>
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d019      	beq.n	800631e <HAL_CAN_IRQHandler+0x316>
 80062ea:	2b40      	cmp	r3, #64	@ 0x40
 80062ec:	d826      	bhi.n	800633c <HAL_CAN_IRQHandler+0x334>
 80062ee:	2b30      	cmp	r3, #48	@ 0x30
 80062f0:	d010      	beq.n	8006314 <HAL_CAN_IRQHandler+0x30c>
 80062f2:	2b30      	cmp	r3, #48	@ 0x30
 80062f4:	d822      	bhi.n	800633c <HAL_CAN_IRQHandler+0x334>
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	d002      	beq.n	8006300 <HAL_CAN_IRQHandler+0x2f8>
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d005      	beq.n	800630a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80062fe:	e01d      	b.n	800633c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	f043 0308 	orr.w	r3, r3, #8
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006308:	e019      	b.n	800633e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	f043 0310 	orr.w	r3, r3, #16
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006312:	e014      	b.n	800633e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	f043 0320 	orr.w	r3, r3, #32
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800631c:	e00f      	b.n	800633e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006326:	e00a      	b.n	800633e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006330:	e005      	b.n	800633e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800633a:	e000      	b.n	800633e <HAL_CAN_IRQHandler+0x336>
            break;
 800633c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800634c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2204      	movs	r2, #4
 8006354:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f872 	bl	8006452 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800636e:	bf00      	nop
 8006370:	3728      	adds	r7, #40	@ 0x28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <__NVIC_SetPriorityGrouping+0x44>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800649a:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <__NVIC_SetPriorityGrouping+0x44>)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	60d3      	str	r3, [r2, #12]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064b4:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <__NVIC_GetPriorityGrouping+0x18>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	f003 0307 	and.w	r3, r3, #7
}
 80064be:	4618      	mov	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db0b      	blt.n	80064f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	f003 021f 	and.w	r2, r3, #31
 80064e4:	4907      	ldr	r1, [pc, #28]	@ (8006504 <__NVIC_EnableIRQ+0x38>)
 80064e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	2001      	movs	r0, #1
 80064ee:	fa00 f202 	lsl.w	r2, r0, r2
 80064f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	e000e100 	.word	0xe000e100

08006508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006518:	2b00      	cmp	r3, #0
 800651a:	db0a      	blt.n	8006532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	490c      	ldr	r1, [pc, #48]	@ (8006554 <__NVIC_SetPriority+0x4c>)
 8006522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006526:	0112      	lsls	r2, r2, #4
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	440b      	add	r3, r1
 800652c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006530:	e00a      	b.n	8006548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4908      	ldr	r1, [pc, #32]	@ (8006558 <__NVIC_SetPriority+0x50>)
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	3b04      	subs	r3, #4
 8006540:	0112      	lsls	r2, r2, #4
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	440b      	add	r3, r1
 8006546:	761a      	strb	r2, [r3, #24]
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	e000e100 	.word	0xe000e100
 8006558:	e000ed00 	.word	0xe000ed00

0800655c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	@ 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f1c3 0307 	rsb	r3, r3, #7
 8006576:	2b04      	cmp	r3, #4
 8006578:	bf28      	it	cs
 800657a:	2304      	movcs	r3, #4
 800657c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3304      	adds	r3, #4
 8006582:	2b06      	cmp	r3, #6
 8006584:	d902      	bls.n	800658c <NVIC_EncodePriority+0x30>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3b03      	subs	r3, #3
 800658a:	e000      	b.n	800658e <NVIC_EncodePriority+0x32>
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006590:	f04f 32ff 	mov.w	r2, #4294967295
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43da      	mvns	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	401a      	ands	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065a4:	f04f 31ff 	mov.w	r1, #4294967295
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43d9      	mvns	r1, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065b4:	4313      	orrs	r3, r2
         );
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	@ 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065d4:	d301      	bcc.n	80065da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065d6:	2301      	movs	r3, #1
 80065d8:	e00f      	b.n	80065fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <SysTick_Config+0x40>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065e2:	210f      	movs	r1, #15
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	f7ff ff8e 	bl	8006508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065ec:	4b05      	ldr	r3, [pc, #20]	@ (8006604 <SysTick_Config+0x40>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065f2:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <SysTick_Config+0x40>)
 80065f4:	2207      	movs	r2, #7
 80065f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	e000e010 	.word	0xe000e010

08006608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff29 	bl	8006468 <__NVIC_SetPriorityGrouping>
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	4603      	mov	r3, r0
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006630:	f7ff ff3e 	bl	80064b0 <__NVIC_GetPriorityGrouping>
 8006634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	6978      	ldr	r0, [r7, #20]
 800663c:	f7ff ff8e 	bl	800655c <NVIC_EncodePriority>
 8006640:	4602      	mov	r2, r0
 8006642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff5d 	bl	8006508 <__NVIC_SetPriority>
}
 800664e:	bf00      	nop
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	4603      	mov	r3, r0
 800665e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff31 	bl	80064cc <__NVIC_EnableIRQ>
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ffa2 	bl	80065c4 <SysTick_Config>
 8006680:	4603      	mov	r3, r0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e00e      	b.n	80066ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	795b      	ldrb	r3, [r3, #5]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fd faff 	bl	8003cb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066d0:	f7fe fb54 	bl	8004d7c <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e099      	b.n	8006814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006700:	e00f      	b.n	8006722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006702:	f7fe fb3b 	bl	8004d7c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b05      	cmp	r3, #5
 800670e:	d908      	bls.n	8006722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e078      	b.n	8006814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e8      	bne.n	8006702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4b38      	ldr	r3, [pc, #224]	@ (800681c <HAL_DMA_Init+0x158>)
 800673c:	4013      	ands	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800674e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800675a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	2b04      	cmp	r3, #4
 800677a:	d107      	bne.n	800678c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006784:	4313      	orrs	r3, r2
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0307 	bic.w	r3, r3, #7
 80067a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d117      	bne.n	80067e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa7b 	bl	8006cc4 <DMA_CheckFifoParam>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	@ 0x40
 80067d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80067e2:	2301      	movs	r3, #1
 80067e4:	e016      	b.n	8006814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa32 	bl	8006c58 <DMA_CalcBaseAndBitshift>
 80067f4:	4603      	mov	r3, r0
 80067f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067fc:	223f      	movs	r2, #63	@ 0x3f
 80067fe:	409a      	lsls	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	f010803f 	.word	0xf010803f

08006820 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800682e:	f7fe faa5 	bl	8004d7c <HAL_GetTick>
 8006832:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d008      	beq.n	8006852 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2280      	movs	r2, #128	@ 0x80
 8006844:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e052      	b.n	80068f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0216 	bic.w	r2, r2, #22
 8006860:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695a      	ldr	r2, [r3, #20]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006870:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <HAL_DMA_Abort+0x62>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0208 	bic.w	r2, r2, #8
 8006890:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068a2:	e013      	b.n	80068cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068a4:	f7fe fa6a 	bl	8004d7c <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d90c      	bls.n	80068cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2203      	movs	r2, #3
 80068bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e015      	b.n	80068f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e4      	bne.n	80068a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068de:	223f      	movs	r2, #63	@ 0x3f
 80068e0:	409a      	lsls	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d004      	beq.n	800691e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2280      	movs	r2, #128	@ 0x80
 8006918:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e00c      	b.n	8006938 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2205      	movs	r2, #5
 8006922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006950:	4b8e      	ldr	r3, [pc, #568]	@ (8006b8c <HAL_DMA_IRQHandler+0x248>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a8e      	ldr	r2, [pc, #568]	@ (8006b90 <HAL_DMA_IRQHandler+0x24c>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	0a9b      	lsrs	r3, r3, #10
 800695c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696e:	2208      	movs	r2, #8
 8006970:	409a      	lsls	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01a      	beq.n	80069b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0204 	bic.w	r2, r2, #4
 8006996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800699c:	2208      	movs	r2, #8
 800699e:	409a      	lsls	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a8:	f043 0201 	orr.w	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b4:	2201      	movs	r2, #1
 80069b6:	409a      	lsls	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d012      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d2:	2201      	movs	r2, #1
 80069d4:	409a      	lsls	r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069de:	f043 0202 	orr.w	r2, r3, #2
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ea:	2204      	movs	r2, #4
 80069ec:	409a      	lsls	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d012      	beq.n	8006a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a08:	2204      	movs	r2, #4
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a14:	f043 0204 	orr.w	r2, r3, #4
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a20:	2210      	movs	r2, #16
 8006a22:	409a      	lsls	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d043      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03c      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3e:	2210      	movs	r2, #16
 8006a40:	409a      	lsls	r2, r3
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d024      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	e01f      	b.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	e016      	b.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0208 	bic.w	r2, r2, #8
 8006aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab8:	2220      	movs	r2, #32
 8006aba:	409a      	lsls	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 808f 	beq.w	8006be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8087 	beq.w	8006be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ada:	2220      	movs	r2, #32
 8006adc:	409a      	lsls	r2, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d136      	bne.n	8006b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0216 	bic.w	r2, r2, #22
 8006afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <HAL_DMA_IRQHandler+0x1da>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0208 	bic.w	r2, r2, #8
 8006b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b32:	223f      	movs	r2, #63	@ 0x3f
 8006b34:	409a      	lsls	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d07e      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
        }
        return;
 8006b5a:	e079      	b.n	8006c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01d      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d031      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
 8006b88:	e02c      	b.n	8006be4 <HAL_DMA_IRQHandler+0x2a0>
 8006b8a:	bf00      	nop
 8006b8c:	200000f0 	.word	0x200000f0
 8006b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d023      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
 8006ba4:	e01e      	b.n	8006be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10f      	bne.n	8006bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0210 	bic.w	r2, r2, #16
 8006bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d032      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d022      	beq.n	8006c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2205      	movs	r2, #5
 8006bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0201 	bic.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d307      	bcc.n	8006c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f2      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x2cc>
 8006c2a:	e000      	b.n	8006c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
 8006c4e:	e000      	b.n	8006c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c50:	bf00      	nop
    }
  }
}
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	3b10      	subs	r3, #16
 8006c68:	4a14      	ldr	r2, [pc, #80]	@ (8006cbc <DMA_CalcBaseAndBitshift+0x64>)
 8006c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6e:	091b      	lsrs	r3, r3, #4
 8006c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c72:	4a13      	ldr	r2, [pc, #76]	@ (8006cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d909      	bls.n	8006c9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c98:	e007      	b.n	8006caa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	aaaaaaab 	.word	0xaaaaaaab
 8006cc0:	0800fb30 	.word	0x0800fb30

08006cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11f      	bne.n	8006d1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d856      	bhi.n	8006d92 <DMA_CheckFifoParam+0xce>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <DMA_CheckFifoParam+0x28>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d0f 	.word	0x08006d0f
 8006cf4:	08006cfd 	.word	0x08006cfd
 8006cf8:	08006d93 	.word	0x08006d93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d046      	beq.n	8006d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d0c:	e043      	b.n	8006d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d16:	d140      	bne.n	8006d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d1c:	e03d      	b.n	8006d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d26:	d121      	bne.n	8006d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d837      	bhi.n	8006d9e <DMA_CheckFifoParam+0xda>
 8006d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d34 <DMA_CheckFifoParam+0x70>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d45 	.word	0x08006d45
 8006d38:	08006d4b 	.word	0x08006d4b
 8006d3c:	08006d45 	.word	0x08006d45
 8006d40:	08006d5d 	.word	0x08006d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e030      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d025      	beq.n	8006da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d5a:	e022      	b.n	8006da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d64:	d11f      	bne.n	8006da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d6a:	e01c      	b.n	8006da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d903      	bls.n	8006d7a <DMA_CheckFifoParam+0xb6>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d003      	beq.n	8006d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d78:	e018      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7e:	e015      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e00b      	b.n	8006daa <DMA_CheckFifoParam+0xe6>
      break;
 8006d92:	bf00      	nop
 8006d94:	e00a      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      break;
 8006d96:	bf00      	nop
 8006d98:	e008      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e006      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e004      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      break;
 8006da2:	bf00      	nop
 8006da4:	e002      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      break;   
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <DMA_CheckFifoParam+0xe8>
      break;
 8006daa:	bf00      	nop
    }
  } 
  
  return status; 
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	@ 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	e16b      	b.n	80070b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006dd8:	2201      	movs	r2, #1
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4013      	ands	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	f040 815a 	bne.w	80070aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d005      	beq.n	8006e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d130      	bne.n	8006e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	2203      	movs	r2, #3
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	4013      	ands	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e44:	2201      	movs	r2, #1
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	4013      	ands	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 0201 	and.w	r2, r3, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d017      	beq.n	8006eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	2203      	movs	r2, #3
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	4013      	ands	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d123      	bne.n	8006f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	08da      	lsrs	r2, r3, #3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3208      	adds	r2, #8
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	220f      	movs	r2, #15
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	08da      	lsrs	r2, r3, #3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3208      	adds	r2, #8
 8006efa:	69b9      	ldr	r1, [r7, #24]
 8006efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43db      	mvns	r3, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 0203 	and.w	r2, r3, #3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80b4 	beq.w	80070aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	4b60      	ldr	r3, [pc, #384]	@ (80070c8 <HAL_GPIO_Init+0x30c>)
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80070c8 <HAL_GPIO_Init+0x30c>)
 8006f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f52:	4b5d      	ldr	r3, [pc, #372]	@ (80070c8 <HAL_GPIO_Init+0x30c>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80070cc <HAL_GPIO_Init+0x310>)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	089b      	lsrs	r3, r3, #2
 8006f64:	3302      	adds	r3, #2
 8006f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	220f      	movs	r2, #15
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a52      	ldr	r2, [pc, #328]	@ (80070d0 <HAL_GPIO_Init+0x314>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d02b      	beq.n	8006fe2 <HAL_GPIO_Init+0x226>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a51      	ldr	r2, [pc, #324]	@ (80070d4 <HAL_GPIO_Init+0x318>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d025      	beq.n	8006fde <HAL_GPIO_Init+0x222>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a50      	ldr	r2, [pc, #320]	@ (80070d8 <HAL_GPIO_Init+0x31c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01f      	beq.n	8006fda <HAL_GPIO_Init+0x21e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80070dc <HAL_GPIO_Init+0x320>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d019      	beq.n	8006fd6 <HAL_GPIO_Init+0x21a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80070e0 <HAL_GPIO_Init+0x324>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_GPIO_Init+0x216>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a4d      	ldr	r2, [pc, #308]	@ (80070e4 <HAL_GPIO_Init+0x328>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00d      	beq.n	8006fce <HAL_GPIO_Init+0x212>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80070e8 <HAL_GPIO_Init+0x32c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <HAL_GPIO_Init+0x20e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80070ec <HAL_GPIO_Init+0x330>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_GPIO_Init+0x20a>
 8006fc2:	2307      	movs	r3, #7
 8006fc4:	e00e      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	e00c      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fca:	2306      	movs	r3, #6
 8006fcc:	e00a      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fce:	2305      	movs	r3, #5
 8006fd0:	e008      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	e006      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e004      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e002      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <HAL_GPIO_Init+0x228>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	f002 0203 	and.w	r2, r2, #3
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	4093      	lsls	r3, r2
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ff4:	4935      	ldr	r1, [pc, #212]	@ (80070cc <HAL_GPIO_Init+0x310>)
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	089b      	lsrs	r3, r3, #2
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007002:	4b3b      	ldr	r3, [pc, #236]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	43db      	mvns	r3, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007026:	4a32      	ldr	r2, [pc, #200]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800702c:	4b30      	ldr	r3, [pc, #192]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	43db      	mvns	r3, r3
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	4013      	ands	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007050:	4a27      	ldr	r2, [pc, #156]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007056:	4b26      	ldr	r3, [pc, #152]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	43db      	mvns	r3, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4013      	ands	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800707a:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007080:	4b1b      	ldr	r3, [pc, #108]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	43db      	mvns	r3, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4013      	ands	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070a4:	4a12      	ldr	r2, [pc, #72]	@ (80070f0 <HAL_GPIO_Init+0x334>)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3301      	adds	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2b0f      	cmp	r3, #15
 80070b4:	f67f ae90 	bls.w	8006dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3724      	adds	r7, #36	@ 0x24
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40013800 	.word	0x40013800
 80070d0:	40020000 	.word	0x40020000
 80070d4:	40020400 	.word	0x40020400
 80070d8:	40020800 	.word	0x40020800
 80070dc:	40020c00 	.word	0x40020c00
 80070e0:	40021000 	.word	0x40021000
 80070e4:	40021400 	.word	0x40021400
 80070e8:	40021800 	.word	0x40021800
 80070ec:	40021c00 	.word	0x40021c00
 80070f0:	40013c00 	.word	0x40013c00

080070f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	807b      	strh	r3, [r7, #2]
 8007100:	4613      	mov	r3, r2
 8007102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007104:	787b      	ldrb	r3, [r7, #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800710a:	887a      	ldrh	r2, [r7, #2]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007110:	e003      	b.n	800711a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007112:	887b      	ldrh	r3, [r7, #2]
 8007114:	041a      	lsls	r2, r3, #16
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	619a      	str	r2, [r3, #24]
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e12b      	b.n	8007392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fc fdd0 	bl	8003cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	@ 0x24
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800717a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800718a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800718c:	f001 fde0 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 8007190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	4a81      	ldr	r2, [pc, #516]	@ (800739c <HAL_I2C_Init+0x274>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d807      	bhi.n	80071ac <HAL_I2C_Init+0x84>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a80      	ldr	r2, [pc, #512]	@ (80073a0 <HAL_I2C_Init+0x278>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	bf94      	ite	ls
 80071a4:	2301      	movls	r3, #1
 80071a6:	2300      	movhi	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	e006      	b.n	80071ba <HAL_I2C_Init+0x92>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a7d      	ldr	r2, [pc, #500]	@ (80073a4 <HAL_I2C_Init+0x27c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	bf94      	ite	ls
 80071b4:	2301      	movls	r3, #1
 80071b6:	2300      	movhi	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0e7      	b.n	8007392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a78      	ldr	r2, [pc, #480]	@ (80073a8 <HAL_I2C_Init+0x280>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	0c9b      	lsrs	r3, r3, #18
 80071cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4a6a      	ldr	r2, [pc, #424]	@ (800739c <HAL_I2C_Init+0x274>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d802      	bhi.n	80071fc <HAL_I2C_Init+0xd4>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	3301      	adds	r3, #1
 80071fa:	e009      	b.n	8007210 <HAL_I2C_Init+0xe8>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	4a69      	ldr	r2, [pc, #420]	@ (80073ac <HAL_I2C_Init+0x284>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	099b      	lsrs	r3, r3, #6
 800720e:	3301      	adds	r3, #1
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	430b      	orrs	r3, r1
 8007216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	495c      	ldr	r1, [pc, #368]	@ (800739c <HAL_I2C_Init+0x274>)
 800722c:	428b      	cmp	r3, r1
 800722e:	d819      	bhi.n	8007264 <HAL_I2C_Init+0x13c>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	1e59      	subs	r1, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	fbb1 f3f3 	udiv	r3, r1, r3
 800723e:	1c59      	adds	r1, r3, #1
 8007240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007244:	400b      	ands	r3, r1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_I2C_Init+0x138>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1e59      	subs	r1, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	fbb1 f3f3 	udiv	r3, r1, r3
 8007258:	3301      	adds	r3, #1
 800725a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800725e:	e051      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 8007260:	2304      	movs	r3, #4
 8007262:	e04f      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d111      	bne.n	8007290 <HAL_I2C_Init+0x168>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	1e58      	subs	r0, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6859      	ldr	r1, [r3, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	440b      	add	r3, r1
 800727a:	fbb0 f3f3 	udiv	r3, r0, r3
 800727e:	3301      	adds	r3, #1
 8007280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf0c      	ite	eq
 8007288:	2301      	moveq	r3, #1
 800728a:	2300      	movne	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e012      	b.n	80072b6 <HAL_I2C_Init+0x18e>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	1e58      	subs	r0, r3, #1
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6859      	ldr	r1, [r3, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	0099      	lsls	r1, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072a6:	3301      	adds	r3, #1
 80072a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_I2C_Init+0x196>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e022      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10e      	bne.n	80072e4 <HAL_I2C_Init+0x1bc>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1e58      	subs	r0, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6859      	ldr	r1, [r3, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	440b      	add	r3, r1
 80072d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80072d8:	3301      	adds	r3, #1
 80072da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e2:	e00f      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1e58      	subs	r0, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	0099      	lsls	r1, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80072fa:	3301      	adds	r3, #1
 80072fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	6809      	ldr	r1, [r1, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69da      	ldr	r2, [r3, #28]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6911      	ldr	r1, [r2, #16]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68d2      	ldr	r2, [r2, #12]
 800733e:	4311      	orrs	r1, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	430b      	orrs	r3, r1
 8007346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	000186a0 	.word	0x000186a0
 80073a0:	001e847f 	.word	0x001e847f
 80073a4:	003d08ff 	.word	0x003d08ff
 80073a8:	431bde83 	.word	0x431bde83
 80073ac:	10624dd3 	.word	0x10624dd3

080073b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	461a      	mov	r2, r3
 80073bc:	460b      	mov	r3, r1
 80073be:	817b      	strh	r3, [r7, #10]
 80073c0:	4613      	mov	r3, r2
 80073c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073c4:	f7fd fcda 	bl	8004d7c <HAL_GetTick>
 80073c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	f040 80e0 	bne.w	8007598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	2319      	movs	r3, #25
 80073de:	2201      	movs	r2, #1
 80073e0:	4970      	ldr	r1, [pc, #448]	@ (80075a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fe0e 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80073ee:	2302      	movs	r3, #2
 80073f0:	e0d3      	b.n	800759a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_I2C_Master_Transmit+0x50>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e0cc      	b.n	800759a <HAL_I2C_Master_Transmit+0x1ea>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b01      	cmp	r3, #1
 8007414:	d007      	beq.n	8007426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0201 	orr.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2221      	movs	r2, #33	@ 0x21
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2210      	movs	r2, #16
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	893a      	ldrh	r2, [r7, #8]
 8007456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4a50      	ldr	r2, [pc, #320]	@ (80075a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007468:	8979      	ldrh	r1, [r7, #10]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	6a3a      	ldr	r2, [r7, #32]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fbc8 	bl	8007c04 <I2C_MasterRequestWrite>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e08d      	b.n	800759a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007494:	e066      	b.n	8007564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	6a39      	ldr	r1, [r7, #32]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fecc 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d107      	bne.n	80074be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e06b      	b.n	800759a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d11b      	bne.n	8007538 <HAL_I2C_Master_Transmit+0x188>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	781a      	ldrb	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	6a39      	ldr	r1, [r7, #32]
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fec3 	bl	80082c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00d      	beq.n	8007564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754c:	2b04      	cmp	r3, #4
 800754e:	d107      	bne.n	8007560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800755e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e01a      	b.n	800759a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007568:	2b00      	cmp	r3, #0
 800756a:	d194      	bne.n	8007496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800757a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	e000      	b.n	800759a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007598:	2302      	movs	r3, #2
  }
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	00100002 	.word	0x00100002
 80075a8:	ffff0000 	.word	0xffff0000

080075ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	817b      	strh	r3, [r7, #10]
 80075be:	460b      	mov	r3, r1
 80075c0:	813b      	strh	r3, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075c6:	f7fd fbd9 	bl	8004d7c <HAL_GetTick>
 80075ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	f040 80d9 	bne.w	800778c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	2319      	movs	r3, #25
 80075e0:	2201      	movs	r2, #1
 80075e2:	496d      	ldr	r1, [pc, #436]	@ (8007798 <HAL_I2C_Mem_Write+0x1ec>)
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fd0d 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
 80075f2:	e0cc      	b.n	800778e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_I2C_Mem_Write+0x56>
 80075fe:	2302      	movs	r3, #2
 8007600:	e0c5      	b.n	800778e <HAL_I2C_Mem_Write+0x1e2>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	d007      	beq.n	8007628 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2221      	movs	r2, #33	@ 0x21
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2240      	movs	r2, #64	@ 0x40
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007658:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a4d      	ldr	r2, [pc, #308]	@ (800779c <HAL_I2C_Mem_Write+0x1f0>)
 8007668:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800766a:	88f8      	ldrh	r0, [r7, #6]
 800766c:	893a      	ldrh	r2, [r7, #8]
 800766e:	8979      	ldrh	r1, [r7, #10]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fb44 	bl	8007d08 <I2C_RequestMemoryWrite>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d052      	beq.n	800772c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e081      	b.n	800778e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fdd2 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d107      	bne.n	80076b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e06b      	b.n	800778e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d11b      	bne.n	800772c <HAL_I2C_Mem_Write+0x180>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d017      	beq.n	800772c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1aa      	bne.n	800768a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fdc5 	bl	80082c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	2b04      	cmp	r3, #4
 800774a:	d107      	bne.n	800775c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800775a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e016      	b.n	800778e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800776e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	e000      	b.n	800778e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800778c:	2302      	movs	r3, #2
  }
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	00100002 	.word	0x00100002
 800779c:	ffff0000 	.word	0xffff0000

080077a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	@ 0x30
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077ba:	f7fd fadf 	bl	8004d7c <HAL_GetTick>
 80077be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	f040 8214 	bne.w	8007bf6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	2319      	movs	r3, #25
 80077d4:	2201      	movs	r2, #1
 80077d6:	497b      	ldr	r1, [pc, #492]	@ (80079c4 <HAL_I2C_Mem_Read+0x224>)
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fc13 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
 80077e6:	e207      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_I2C_Mem_Read+0x56>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e200      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d007      	beq.n	800781c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800782a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2222      	movs	r2, #34	@ 0x22
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2240      	movs	r2, #64	@ 0x40
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007846:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800784c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a5b      	ldr	r2, [pc, #364]	@ (80079c8 <HAL_I2C_Mem_Read+0x228>)
 800785c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800785e:	88f8      	ldrh	r0, [r7, #6]
 8007860:	893a      	ldrh	r2, [r7, #8]
 8007862:	8979      	ldrh	r1, [r7, #10]
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	4603      	mov	r3, r0
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fae0 	bl	8007e34 <I2C_RequestMemoryRead>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e1bc      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d113      	bne.n	80078ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007886:	2300      	movs	r3, #0
 8007888:	623b      	str	r3, [r7, #32]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	623b      	str	r3, [r7, #32]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	623b      	str	r3, [r7, #32]
 800789a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e190      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d11b      	bne.n	80078ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	61fb      	str	r3, [r7, #28]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e170      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d11b      	bne.n	800792e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007904:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007916:	2300      	movs	r3, #0
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	e150      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007944:	e144      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800794a:	2b03      	cmp	r3, #3
 800794c:	f200 80f1 	bhi.w	8007b32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007954:	2b01      	cmp	r3, #1
 8007956:	d123      	bne.n	80079a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fcfb 	bl	8008358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e145      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800799e:	e117      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d14e      	bne.n	8007a46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	2200      	movs	r2, #0
 80079b0:	4906      	ldr	r1, [pc, #24]	@ (80079cc <HAL_I2C_Mem_Read+0x22c>)
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fb26 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d008      	beq.n	80079d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e11a      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
 80079c2:	bf00      	nop
 80079c4:	00100002 	.word	0x00100002
 80079c8:	ffff0000 	.word	0xffff0000
 80079cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a44:	e0c4      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	496c      	ldr	r1, [pc, #432]	@ (8007c00 <HAL_I2C_Mem_Read+0x460>)
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fad7 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0cb      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4955      	ldr	r1, [pc, #340]	@ (8007c00 <HAL_I2C_Mem_Read+0x460>)
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 faa9 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e09d      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b30:	e04e      	b.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fc0e 	bl	8008358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e058      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d124      	bne.n	8007bd0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d107      	bne.n	8007b9e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b9c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691a      	ldr	r2, [r3, #16]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f aeb6 	bne.w	8007946 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e000      	b.n	8007bf8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
  }
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3728      	adds	r7, #40	@ 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	00010004 	.word	0x00010004

08007c04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	603b      	str	r3, [r7, #0]
 8007c10:	460b      	mov	r3, r1
 8007c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d006      	beq.n	8007c2e <I2C_MasterRequestWrite+0x2a>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d003      	beq.n	8007c2e <I2C_MasterRequestWrite+0x2a>
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c2c:	d108      	bne.n	8007c40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e00b      	b.n	8007c58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c44:	2b12      	cmp	r3, #18
 8007c46:	d107      	bne.n	8007c58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f9cd 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00d      	beq.n	8007c8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7e:	d103      	bne.n	8007c88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e035      	b.n	8007cf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c94:	d108      	bne.n	8007ca8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c96:	897b      	ldrh	r3, [r7, #10]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ca4:	611a      	str	r2, [r3, #16]
 8007ca6:	e01b      	b.n	8007ce0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ca8:	897b      	ldrh	r3, [r7, #10]
 8007caa:	11db      	asrs	r3, r3, #7
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0306 	and.w	r3, r3, #6
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f063 030f 	orn	r3, r3, #15
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	490e      	ldr	r1, [pc, #56]	@ (8007d00 <I2C_MasterRequestWrite+0xfc>)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fa16 	bl	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e010      	b.n	8007cf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007cd6:	897b      	ldrh	r3, [r7, #10]
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	4907      	ldr	r1, [pc, #28]	@ (8007d04 <I2C_MasterRequestWrite+0x100>)
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fa06 	bl	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	00010008 	.word	0x00010008
 8007d04:	00010002 	.word	0x00010002

08007d08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	4608      	mov	r0, r1
 8007d12:	4611      	mov	r1, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	817b      	strh	r3, [r7, #10]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	813b      	strh	r3, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f960 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00d      	beq.n	8007d66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d58:	d103      	bne.n	8007d62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e05f      	b.n	8007e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d66:	897b      	ldrh	r3, [r7, #10]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	6a3a      	ldr	r2, [r7, #32]
 8007d7a:	492d      	ldr	r1, [pc, #180]	@ (8007e30 <I2C_RequestMemoryWrite+0x128>)
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f9bb 	bl	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e04c      	b.n	8007e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da4:	6a39      	ldr	r1, [r7, #32]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fa46 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d107      	bne.n	8007dca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e02b      	b.n	8007e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d105      	bne.n	8007de0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dd4:	893b      	ldrh	r3, [r7, #8]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	611a      	str	r2, [r3, #16]
 8007dde:	e021      	b.n	8007e24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007de0:	893b      	ldrh	r3, [r7, #8]
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df0:	6a39      	ldr	r1, [r7, #32]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fa20 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00d      	beq.n	8007e1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d107      	bne.n	8007e16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e005      	b.n	8007e26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e1a:	893b      	ldrh	r3, [r7, #8]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	00010002 	.word	0x00010002

08007e34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	461a      	mov	r2, r3
 8007e42:	4603      	mov	r3, r0
 8007e44:	817b      	strh	r3, [r7, #10]
 8007e46:	460b      	mov	r3, r1
 8007e48:	813b      	strh	r3, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 f8c2 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00d      	beq.n	8007ea2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e94:	d103      	bne.n	8007e9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e0aa      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ea2:	897b      	ldrh	r3, [r7, #10]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	6a3a      	ldr	r2, [r7, #32]
 8007eb6:	4952      	ldr	r1, [pc, #328]	@ (8008000 <I2C_RequestMemoryRead+0x1cc>)
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f91d 	bl	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e097      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee0:	6a39      	ldr	r1, [r7, #32]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f9a8 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00d      	beq.n	8007f0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d107      	bne.n	8007f06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e076      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d105      	bne.n	8007f1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f10:	893b      	ldrh	r3, [r7, #8]
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	611a      	str	r2, [r3, #16]
 8007f1a:	e021      	b.n	8007f60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f1c:	893b      	ldrh	r3, [r7, #8]
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2c:	6a39      	ldr	r1, [r7, #32]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f982 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00d      	beq.n	8007f56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d107      	bne.n	8007f52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e050      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f56:	893b      	ldrh	r3, [r7, #8]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f62:	6a39      	ldr	r1, [r7, #32]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f967 	bl	8008238 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00d      	beq.n	8007f8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d107      	bne.n	8007f88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e035      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f82b 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fc2:	d103      	bne.n	8007fcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e013      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007fd0:	897b      	ldrh	r3, [r7, #10]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f043 0301 	orr.w	r3, r3, #1
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	4906      	ldr	r1, [pc, #24]	@ (8008000 <I2C_RequestMemoryRead+0x1cc>)
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f886 	bl	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	00010002 	.word	0x00010002

08008004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008014:	e048      	b.n	80080a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d044      	beq.n	80080a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801e:	f7fc fead 	bl	8004d7c <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d302      	bcc.n	8008034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d139      	bne.n	80080a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	0c1b      	lsrs	r3, r3, #16
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b01      	cmp	r3, #1
 800803c:	d10d      	bne.n	800805a <I2C_WaitOnFlagUntilTimeout+0x56>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	43da      	mvns	r2, r3
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	4013      	ands	r3, r2
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	bf0c      	ite	eq
 8008050:	2301      	moveq	r3, #1
 8008052:	2300      	movne	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	e00c      	b.n	8008074 <I2C_WaitOnFlagUntilTimeout+0x70>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	43da      	mvns	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4013      	ands	r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	429a      	cmp	r2, r3
 8008078:	d116      	bne.n	80080a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008094:	f043 0220 	orr.w	r2, r3, #32
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e023      	b.n	80080f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	0c1b      	lsrs	r3, r3, #16
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d10d      	bne.n	80080ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	43da      	mvns	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf0c      	ite	eq
 80080c4:	2301      	moveq	r3, #1
 80080c6:	2300      	movne	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	e00c      	b.n	80080e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	43da      	mvns	r2, r3
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4013      	ands	r3, r2
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bf0c      	ite	eq
 80080e0:	2301      	moveq	r3, #1
 80080e2:	2300      	movne	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d093      	beq.n	8008016 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008106:	e071      	b.n	80081ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008116:	d123      	bne.n	8008160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008126:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814c:	f043 0204 	orr.w	r2, r3, #4
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e067      	b.n	8008230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d041      	beq.n	80081ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008168:	f7fc fe08 	bl	8004d7c <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d136      	bne.n	80081ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10c      	bne.n	80081a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	43da      	mvns	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4013      	ands	r3, r2
 8008194:	b29b      	uxth	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	e00b      	b.n	80081ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	43da      	mvns	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4013      	ands	r3, r2
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d016      	beq.n	80081ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d8:	f043 0220 	orr.w	r2, r3, #32
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e021      	b.n	8008230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d10c      	bne.n	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	43da      	mvns	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4013      	ands	r3, r2
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	e00b      	b.n	8008228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	43da      	mvns	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4013      	ands	r3, r2
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	bf14      	ite	ne
 8008222:	2301      	movne	r3, #1
 8008224:	2300      	moveq	r3, #0
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	f47f af6d 	bne.w	8008108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008244:	e034      	b.n	80082b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f8e3 	bl	8008412 <I2C_IsAcknowledgeFailed>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e034      	b.n	80082c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d028      	beq.n	80082b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800825e:	f7fc fd8d 	bl	8004d7c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d302      	bcc.n	8008274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d11d      	bne.n	80082b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827e:	2b80      	cmp	r3, #128	@ 0x80
 8008280:	d016      	beq.n	80082b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829c:	f043 0220 	orr.w	r2, r3, #32
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e007      	b.n	80082c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ba:	2b80      	cmp	r3, #128	@ 0x80
 80082bc:	d1c3      	bne.n	8008246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082d4:	e034      	b.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f89b 	bl	8008412 <I2C_IsAcknowledgeFailed>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e034      	b.n	8008350 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d028      	beq.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ee:	f7fc fd45 	bl	8004d7c <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11d      	bne.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d016      	beq.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832c:	f043 0220 	orr.w	r2, r3, #32
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e007      	b.n	8008350 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b04      	cmp	r3, #4
 800834c:	d1c3      	bne.n	80082d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008364:	e049      	b.n	80083fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b10      	cmp	r3, #16
 8008372:	d119      	bne.n	80083a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f06f 0210 	mvn.w	r2, #16
 800837c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e030      	b.n	800840a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a8:	f7fc fce8 	bl	8004d7c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d302      	bcc.n	80083be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d11d      	bne.n	80083fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c8:	2b40      	cmp	r3, #64	@ 0x40
 80083ca:	d016      	beq.n	80083fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	f043 0220 	orr.w	r2, r3, #32
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e007      	b.n	800840a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008404:	2b40      	cmp	r3, #64	@ 0x40
 8008406:	d1ae      	bne.n	8008366 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008428:	d11b      	bne.n	8008462 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008432:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	f043 0204 	orr.w	r2, r3, #4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e267      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d075      	beq.n	800857a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800848e:	4b88      	ldr	r3, [pc, #544]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 030c 	and.w	r3, r3, #12
 8008496:	2b04      	cmp	r3, #4
 8008498:	d00c      	beq.n	80084b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800849a:	4b85      	ldr	r3, [pc, #532]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80084a2:	2b08      	cmp	r3, #8
 80084a4:	d112      	bne.n	80084cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084a6:	4b82      	ldr	r3, [pc, #520]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084b2:	d10b      	bne.n	80084cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084b4:	4b7e      	ldr	r3, [pc, #504]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d05b      	beq.n	8008578 <HAL_RCC_OscConfig+0x108>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d157      	bne.n	8008578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e242      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d4:	d106      	bne.n	80084e4 <HAL_RCC_OscConfig+0x74>
 80084d6:	4b76      	ldr	r3, [pc, #472]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a75      	ldr	r2, [pc, #468]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	e01d      	b.n	8008520 <HAL_RCC_OscConfig+0xb0>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084ec:	d10c      	bne.n	8008508 <HAL_RCC_OscConfig+0x98>
 80084ee:	4b70      	ldr	r3, [pc, #448]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a6f      	ldr	r2, [pc, #444]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4b6d      	ldr	r3, [pc, #436]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a6c      	ldr	r2, [pc, #432]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e00b      	b.n	8008520 <HAL_RCC_OscConfig+0xb0>
 8008508:	4b69      	ldr	r3, [pc, #420]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a68      	ldr	r2, [pc, #416]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800850e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	4b66      	ldr	r3, [pc, #408]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a65      	ldr	r2, [pc, #404]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800851a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800851e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d013      	beq.n	8008550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008528:	f7fc fc28 	bl	8004d7c <HAL_GetTick>
 800852c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008530:	f7fc fc24 	bl	8004d7c <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b64      	cmp	r3, #100	@ 0x64
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e207      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008542:	4b5b      	ldr	r3, [pc, #364]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f0      	beq.n	8008530 <HAL_RCC_OscConfig+0xc0>
 800854e:	e014      	b.n	800857a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008550:	f7fc fc14 	bl	8004d7c <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008558:	f7fc fc10 	bl	8004d7c <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b64      	cmp	r3, #100	@ 0x64
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e1f3      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800856a:	4b51      	ldr	r3, [pc, #324]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f0      	bne.n	8008558 <HAL_RCC_OscConfig+0xe8>
 8008576:	e000      	b.n	800857a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d063      	beq.n	800864e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008586:	4b4a      	ldr	r3, [pc, #296]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 030c 	and.w	r3, r3, #12
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00b      	beq.n	80085aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008592:	4b47      	ldr	r3, [pc, #284]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800859a:	2b08      	cmp	r3, #8
 800859c:	d11c      	bne.n	80085d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800859e:	4b44      	ldr	r3, [pc, #272]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d116      	bne.n	80085d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085aa:	4b41      	ldr	r3, [pc, #260]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_RCC_OscConfig+0x152>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d001      	beq.n	80085c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e1c7      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c2:	4b3b      	ldr	r3, [pc, #236]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4937      	ldr	r1, [pc, #220]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085d6:	e03a      	b.n	800864e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d020      	beq.n	8008622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085e0:	4b34      	ldr	r3, [pc, #208]	@ (80086b4 <HAL_RCC_OscConfig+0x244>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e6:	f7fc fbc9 	bl	8004d7c <HAL_GetTick>
 80085ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ec:	e008      	b.n	8008600 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ee:	f7fc fbc5 	bl	8004d7c <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e1a8      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008600:	4b2b      	ldr	r3, [pc, #172]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0f0      	beq.n	80085ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800860c:	4b28      	ldr	r3, [pc, #160]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	4925      	ldr	r1, [pc, #148]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 800861c:	4313      	orrs	r3, r2
 800861e:	600b      	str	r3, [r1, #0]
 8008620:	e015      	b.n	800864e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008622:	4b24      	ldr	r3, [pc, #144]	@ (80086b4 <HAL_RCC_OscConfig+0x244>)
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7fc fba8 	bl	8004d7c <HAL_GetTick>
 800862c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800862e:	e008      	b.n	8008642 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008630:	f7fc fba4 	bl	8004d7c <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e187      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008642:	4b1b      	ldr	r3, [pc, #108]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1f0      	bne.n	8008630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0308 	and.w	r3, r3, #8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d036      	beq.n	80086c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d016      	beq.n	8008690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008662:	4b15      	ldr	r3, [pc, #84]	@ (80086b8 <HAL_RCC_OscConfig+0x248>)
 8008664:	2201      	movs	r2, #1
 8008666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008668:	f7fc fb88 	bl	8004d7c <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008670:	f7fc fb84 	bl	8004d7c <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e167      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008682:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <HAL_RCC_OscConfig+0x240>)
 8008684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f0      	beq.n	8008670 <HAL_RCC_OscConfig+0x200>
 800868e:	e01b      	b.n	80086c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008690:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <HAL_RCC_OscConfig+0x248>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008696:	f7fc fb71 	bl	8004d7c <HAL_GetTick>
 800869a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800869c:	e00e      	b.n	80086bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800869e:	f7fc fb6d 	bl	8004d7c <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d907      	bls.n	80086bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e150      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
 80086b0:	40023800 	.word	0x40023800
 80086b4:	42470000 	.word	0x42470000
 80086b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086bc:	4b88      	ldr	r3, [pc, #544]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80086be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1ea      	bne.n	800869e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8097 	beq.w	8008804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086da:	4b81      	ldr	r3, [pc, #516]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80086dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10f      	bne.n	8008706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e6:	2300      	movs	r3, #0
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	4b7d      	ldr	r3, [pc, #500]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	4a7c      	ldr	r2, [pc, #496]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80086f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80086f6:	4b7a      	ldr	r3, [pc, #488]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086fe:	60bb      	str	r3, [r7, #8]
 8008700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008702:	2301      	movs	r3, #1
 8008704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008706:	4b77      	ldr	r3, [pc, #476]	@ (80088e4 <HAL_RCC_OscConfig+0x474>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870e:	2b00      	cmp	r3, #0
 8008710:	d118      	bne.n	8008744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008712:	4b74      	ldr	r3, [pc, #464]	@ (80088e4 <HAL_RCC_OscConfig+0x474>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a73      	ldr	r2, [pc, #460]	@ (80088e4 <HAL_RCC_OscConfig+0x474>)
 8008718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800871c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800871e:	f7fc fb2d 	bl	8004d7c <HAL_GetTick>
 8008722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008726:	f7fc fb29 	bl	8004d7c <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e10c      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008738:	4b6a      	ldr	r3, [pc, #424]	@ (80088e4 <HAL_RCC_OscConfig+0x474>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0f0      	beq.n	8008726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <HAL_RCC_OscConfig+0x2ea>
 800874c:	4b64      	ldr	r3, [pc, #400]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 800874e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008750:	4a63      	ldr	r2, [pc, #396]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	6713      	str	r3, [r2, #112]	@ 0x70
 8008758:	e01c      	b.n	8008794 <HAL_RCC_OscConfig+0x324>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b05      	cmp	r3, #5
 8008760:	d10c      	bne.n	800877c <HAL_RCC_OscConfig+0x30c>
 8008762:	4b5f      	ldr	r3, [pc, #380]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008766:	4a5e      	ldr	r2, [pc, #376]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008768:	f043 0304 	orr.w	r3, r3, #4
 800876c:	6713      	str	r3, [r2, #112]	@ 0x70
 800876e:	4b5c      	ldr	r3, [pc, #368]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008772:	4a5b      	ldr	r2, [pc, #364]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6713      	str	r3, [r2, #112]	@ 0x70
 800877a:	e00b      	b.n	8008794 <HAL_RCC_OscConfig+0x324>
 800877c:	4b58      	ldr	r3, [pc, #352]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008780:	4a57      	ldr	r2, [pc, #348]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008782:	f023 0301 	bic.w	r3, r3, #1
 8008786:	6713      	str	r3, [r2, #112]	@ 0x70
 8008788:	4b55      	ldr	r3, [pc, #340]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 800878a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878c:	4a54      	ldr	r2, [pc, #336]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 800878e:	f023 0304 	bic.w	r3, r3, #4
 8008792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d015      	beq.n	80087c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879c:	f7fc faee 	bl	8004d7c <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a2:	e00a      	b.n	80087ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a4:	f7fc faea 	bl	8004d7c <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e0cb      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ba:	4b49      	ldr	r3, [pc, #292]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80087bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0ee      	beq.n	80087a4 <HAL_RCC_OscConfig+0x334>
 80087c6:	e014      	b.n	80087f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087c8:	f7fc fad8 	bl	8004d7c <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087ce:	e00a      	b.n	80087e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d0:	f7fc fad4 	bl	8004d7c <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087de:	4293      	cmp	r3, r2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e0b5      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087e6:	4b3e      	ldr	r3, [pc, #248]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80087e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1ee      	bne.n	80087d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d105      	bne.n	8008804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f8:	4b39      	ldr	r3, [pc, #228]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fc:	4a38      	ldr	r2, [pc, #224]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80087fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80a1 	beq.w	8008950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800880e:	4b34      	ldr	r3, [pc, #208]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 030c 	and.w	r3, r3, #12
 8008816:	2b08      	cmp	r3, #8
 8008818:	d05c      	beq.n	80088d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d141      	bne.n	80088a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008822:	4b31      	ldr	r3, [pc, #196]	@ (80088e8 <HAL_RCC_OscConfig+0x478>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008828:	f7fc faa8 	bl	8004d7c <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008830:	f7fc faa4 	bl	8004d7c <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e087      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008842:	4b27      	ldr	r3, [pc, #156]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69da      	ldr	r2, [r3, #28]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885c:	019b      	lsls	r3, r3, #6
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	3b01      	subs	r3, #1
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	491b      	ldr	r1, [pc, #108]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 8008874:	4313      	orrs	r3, r2
 8008876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008878:	4b1b      	ldr	r3, [pc, #108]	@ (80088e8 <HAL_RCC_OscConfig+0x478>)
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800887e:	f7fc fa7d 	bl	8004d7c <HAL_GetTick>
 8008882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008884:	e008      	b.n	8008898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008886:	f7fc fa79 	bl	8004d7c <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e05c      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008898:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0f0      	beq.n	8008886 <HAL_RCC_OscConfig+0x416>
 80088a4:	e054      	b.n	8008950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a6:	4b10      	ldr	r3, [pc, #64]	@ (80088e8 <HAL_RCC_OscConfig+0x478>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ac:	f7fc fa66 	bl	8004d7c <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b4:	f7fc fa62 	bl	8004d7c <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e045      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088c6:	4b06      	ldr	r3, [pc, #24]	@ (80088e0 <HAL_RCC_OscConfig+0x470>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0x444>
 80088d2:	e03d      	b.n	8008950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d107      	bne.n	80088ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e038      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
 80088e0:	40023800 	.word	0x40023800
 80088e4:	40007000 	.word	0x40007000
 80088e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088ec:	4b1b      	ldr	r3, [pc, #108]	@ (800895c <HAL_RCC_OscConfig+0x4ec>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d028      	beq.n	800894c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008904:	429a      	cmp	r2, r3
 8008906:	d121      	bne.n	800894c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008912:	429a      	cmp	r2, r3
 8008914:	d11a      	bne.n	800894c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800891c:	4013      	ands	r3, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008924:	4293      	cmp	r3, r2
 8008926:	d111      	bne.n	800894c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	3b01      	subs	r3, #1
 8008936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008938:	429a      	cmp	r2, r3
 800893a:	d107      	bne.n	800894c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008948:	429a      	cmp	r2, r3
 800894a:	d001      	beq.n	8008950 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e000      	b.n	8008952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	40023800 	.word	0x40023800

08008960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e0cc      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008974:	4b68      	ldr	r3, [pc, #416]	@ (8008b18 <HAL_RCC_ClockConfig+0x1b8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d90c      	bls.n	800899c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008982:	4b65      	ldr	r3, [pc, #404]	@ (8008b18 <HAL_RCC_ClockConfig+0x1b8>)
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800898a:	4b63      	ldr	r3, [pc, #396]	@ (8008b18 <HAL_RCC_ClockConfig+0x1b8>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0b8      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d020      	beq.n	80089ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089b4:	4b59      	ldr	r3, [pc, #356]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	4a58      	ldr	r2, [pc, #352]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089cc:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4a52      	ldr	r2, [pc, #328]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 80089d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089d8:	4b50      	ldr	r3, [pc, #320]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	494d      	ldr	r1, [pc, #308]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d044      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d107      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089fe:	4b47      	ldr	r3, [pc, #284]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d119      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e07f      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d003      	beq.n	8008a1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d107      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e06f      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e067      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a3e:	4b37      	ldr	r3, [pc, #220]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f023 0203 	bic.w	r2, r3, #3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	4934      	ldr	r1, [pc, #208]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a50:	f7fc f994 	bl	8004d7c <HAL_GetTick>
 8008a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a56:	e00a      	b.n	8008a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a58:	f7fc f990 	bl	8004d7c <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e04f      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 020c 	and.w	r2, r3, #12
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d1eb      	bne.n	8008a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a80:	4b25      	ldr	r3, [pc, #148]	@ (8008b18 <HAL_RCC_ClockConfig+0x1b8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d20c      	bcs.n	8008aa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a8e:	4b22      	ldr	r3, [pc, #136]	@ (8008b18 <HAL_RCC_ClockConfig+0x1b8>)
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a96:	4b20      	ldr	r3, [pc, #128]	@ (8008b18 <HAL_RCC_ClockConfig+0x1b8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d001      	beq.n	8008aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e032      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d008      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ab4:	4b19      	ldr	r3, [pc, #100]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	4916      	ldr	r1, [pc, #88]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	490e      	ldr	r1, [pc, #56]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ae6:	f000 f821 	bl	8008b2c <HAL_RCC_GetSysClockFreq>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <HAL_RCC_ClockConfig+0x1bc>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	490a      	ldr	r1, [pc, #40]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c0>)
 8008af8:	5ccb      	ldrb	r3, [r1, r3]
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	4a09      	ldr	r2, [pc, #36]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <HAL_RCC_ClockConfig+0x1c8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fc f8f4 	bl	8004cf4 <HAL_InitTick>

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	40023c00 	.word	0x40023c00
 8008b1c:	40023800 	.word	0x40023800
 8008b20:	0800fb18 	.word	0x0800fb18
 8008b24:	200000f0 	.word	0x200000f0
 8008b28:	2000012c 	.word	0x2000012c

08008b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b30:	b094      	sub	sp, #80	@ 0x50
 8008b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b44:	4b79      	ldr	r3, [pc, #484]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 030c 	and.w	r3, r3, #12
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d00d      	beq.n	8008b6c <HAL_RCC_GetSysClockFreq+0x40>
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	f200 80e1 	bhi.w	8008d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_RCC_GetSysClockFreq+0x34>
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d003      	beq.n	8008b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b5e:	e0db      	b.n	8008d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b60:	4b73      	ldr	r3, [pc, #460]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b64:	e0db      	b.n	8008d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b66:	4b73      	ldr	r3, [pc, #460]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b6a:	e0d8      	b.n	8008d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b76:	4b6d      	ldr	r3, [pc, #436]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d063      	beq.n	8008c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b82:	4b6a      	ldr	r3, [pc, #424]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	2200      	movs	r2, #0
 8008b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b96:	2300      	movs	r3, #0
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	f04f 0000 	mov.w	r0, #0
 8008ba6:	f04f 0100 	mov.w	r1, #0
 8008baa:	0159      	lsls	r1, r3, #5
 8008bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bb0:	0150      	lsls	r0, r2, #5
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	1a51      	subs	r1, r2, r1
 8008bba:	6139      	str	r1, [r7, #16]
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	018b      	lsls	r3, r1, #6
 8008bd4:	4651      	mov	r1, sl
 8008bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bda:	4651      	mov	r1, sl
 8008bdc:	018a      	lsls	r2, r1, #6
 8008bde:	4651      	mov	r1, sl
 8008be0:	ebb2 0801 	subs.w	r8, r2, r1
 8008be4:	4659      	mov	r1, fp
 8008be6:	eb63 0901 	sbc.w	r9, r3, r1
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	f04f 0300 	mov.w	r3, #0
 8008bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bfe:	4690      	mov	r8, r2
 8008c00:	4699      	mov	r9, r3
 8008c02:	4623      	mov	r3, r4
 8008c04:	eb18 0303 	adds.w	r3, r8, r3
 8008c08:	60bb      	str	r3, [r7, #8]
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	eb49 0303 	adc.w	r3, r9, r3
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c1e:	4629      	mov	r1, r5
 8008c20:	024b      	lsls	r3, r1, #9
 8008c22:	4621      	mov	r1, r4
 8008c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c28:	4621      	mov	r1, r4
 8008c2a:	024a      	lsls	r2, r1, #9
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c32:	2200      	movs	r2, #0
 8008c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c3c:	f7f8 f804 	bl	8000c48 <__aeabi_uldivmod>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4613      	mov	r3, r2
 8008c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c48:	e058      	b.n	8008cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c4a:	4b38      	ldr	r3, [pc, #224]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	099b      	lsrs	r3, r3, #6
 8008c50:	2200      	movs	r2, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	4611      	mov	r1, r2
 8008c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c5a:	623b      	str	r3, [r7, #32]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	f04f 0000 	mov.w	r0, #0
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	0159      	lsls	r1, r3, #5
 8008c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c76:	0150      	lsls	r0, r2, #5
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c82:	4649      	mov	r1, r9
 8008c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8008ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	00eb      	lsls	r3, r5, #3
 8008cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cb2:	00e2      	lsls	r2, r4, #3
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	461d      	mov	r5, r3
 8008cb8:	4643      	mov	r3, r8
 8008cba:	18e3      	adds	r3, r4, r3
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	eb45 0303 	adc.w	r3, r5, r3
 8008cc4:	607b      	str	r3, [r7, #4]
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	028b      	lsls	r3, r1, #10
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cdc:	4621      	mov	r1, r4
 8008cde:	028a      	lsls	r2, r1, #10
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	61fa      	str	r2, [r7, #28]
 8008cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf0:	f7f7 ffaa 	bl	8000c48 <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	0c1b      	lsrs	r3, r3, #16
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	3301      	adds	r3, #1
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d16:	e002      	b.n	8008d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3750      	adds	r7, #80	@ 0x50
 8008d24:	46bd      	mov	sp, r7
 8008d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	00f42400 	.word	0x00f42400
 8008d34:	007a1200 	.word	0x007a1200

08008d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d3c:	4b03      	ldr	r3, [pc, #12]	@ (8008d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	200000f0 	.word	0x200000f0

08008d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d54:	f7ff fff0 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	0a9b      	lsrs	r3, r3, #10
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	4903      	ldr	r1, [pc, #12]	@ (8008d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d66:	5ccb      	ldrb	r3, [r1, r3]
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40023800 	.word	0x40023800
 8008d74:	0800fb28 	.word	0x0800fb28

08008d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d7c:	f7ff ffdc 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008d80:	4602      	mov	r2, r0
 8008d82:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	0b5b      	lsrs	r3, r3, #13
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	4903      	ldr	r1, [pc, #12]	@ (8008d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d8e:	5ccb      	ldrb	r3, [r1, r3]
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	0800fb28 	.word	0x0800fb28

08008da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e07b      	b.n	8008eaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d108      	bne.n	8008dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dc2:	d009      	beq.n	8008dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	61da      	str	r2, [r3, #28]
 8008dca:	e005      	b.n	8008dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7fa ffe8 	bl	8003dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e5c:	ea42 0103 	orr.w	r1, r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	f003 0104 	and.w	r1, r3, #4
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	f003 0210 	and.w	r2, r3, #16
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b08a      	sub	sp, #40	@ 0x28
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ec4:	f7fb ff5a 	bl	8004d7c <HAL_GetTick>
 8008ec8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ed0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008ed8:	887b      	ldrh	r3, [r7, #2]
 8008eda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008edc:	7ffb      	ldrb	r3, [r7, #31]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d00c      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x4a>
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ee8:	d106      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x46>
 8008ef2:	7ffb      	ldrb	r3, [r7, #31]
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d001      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e17f      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_SPI_TransmitReceive+0x5c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <HAL_SPI_TransmitReceive+0x5c>
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e174      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d101      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x6e>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e16d      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d003      	beq.n	8008f3c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2205      	movs	r2, #5
 8008f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	887a      	ldrh	r2, [r7, #2]
 8008f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	887a      	ldrh	r2, [r7, #2]
 8008f52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	887a      	ldrh	r2, [r7, #2]
 8008f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	887a      	ldrh	r2, [r7, #2]
 8008f64:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7c:	2b40      	cmp	r3, #64	@ 0x40
 8008f7e:	d007      	beq.n	8008f90 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f98:	d17e      	bne.n	8009098 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <HAL_SPI_TransmitReceive+0xf6>
 8008fa2:	8afb      	ldrh	r3, [r7, #22]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d16c      	bne.n	8009082 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fac:	881a      	ldrh	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb8:	1c9a      	adds	r2, r3, #2
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fcc:	e059      	b.n	8009082 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d11b      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x162>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d016      	beq.n	8009014 <HAL_SPI_TransmitReceive+0x162>
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d113      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff0:	881a      	ldrh	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffc:	1c9a      	adds	r2, r3, #2
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b01      	cmp	r3, #1
 8009020:	d119      	bne.n	8009056 <HAL_SPI_TransmitReceive+0x1a4>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d014      	beq.n	8009056 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009036:	b292      	uxth	r2, r2
 8009038:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800903e:	1c9a      	adds	r2, r3, #2
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009052:	2301      	movs	r3, #1
 8009054:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009056:	f7fb fe91 	bl	8004d7c <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009062:	429a      	cmp	r2, r3
 8009064:	d80d      	bhi.n	8009082 <HAL_SPI_TransmitReceive+0x1d0>
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d009      	beq.n	8009082 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e0bc      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009086:	b29b      	uxth	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1a0      	bne.n	8008fce <HAL_SPI_TransmitReceive+0x11c>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d19b      	bne.n	8008fce <HAL_SPI_TransmitReceive+0x11c>
 8009096:	e082      	b.n	800919e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <HAL_SPI_TransmitReceive+0x1f4>
 80090a0:	8afb      	ldrh	r3, [r7, #22]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d171      	bne.n	800918a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	3b01      	subs	r3, #1
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090cc:	e05d      	b.n	800918a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d11c      	bne.n	8009116 <HAL_SPI_TransmitReceive+0x264>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d017      	beq.n	8009116 <HAL_SPI_TransmitReceive+0x264>
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d114      	bne.n	8009116 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	7812      	ldrb	r2, [r2, #0]
 80090f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b01      	cmp	r3, #1
 8009122:	d119      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x2a6>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009154:	2301      	movs	r3, #1
 8009156:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009158:	f7fb fe10 	bl	8004d7c <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009164:	429a      	cmp	r2, r3
 8009166:	d803      	bhi.n	8009170 <HAL_SPI_TransmitReceive+0x2be>
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d102      	bne.n	8009176 <HAL_SPI_TransmitReceive+0x2c4>
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e038      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800918e:	b29b      	uxth	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	d19c      	bne.n	80090ce <HAL_SPI_TransmitReceive+0x21c>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d197      	bne.n	80090ce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800919e:	6a3a      	ldr	r2, [r7, #32]
 80091a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f8b6 	bl	8009314 <SPI_EndRxTxTransaction>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d008      	beq.n	80091c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2220      	movs	r2, #32
 80091b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e01d      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	613b      	str	r3, [r7, #16]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80091fa:	2300      	movs	r3, #0
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3728      	adds	r7, #40	@ 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	4613      	mov	r3, r2
 8009212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009214:	f7fb fdb2 	bl	8004d7c <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	4413      	add	r3, r2
 8009222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009224:	f7fb fdaa 	bl	8004d7c <HAL_GetTick>
 8009228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800922a:	4b39      	ldr	r3, [pc, #228]	@ (8009310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	015b      	lsls	r3, r3, #5
 8009230:	0d1b      	lsrs	r3, r3, #20
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800923a:	e055      	b.n	80092e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d051      	beq.n	80092e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009244:	f7fb fd9a 	bl	8004d7c <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	429a      	cmp	r2, r3
 8009252:	d902      	bls.n	800925a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d13d      	bne.n	80092d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009272:	d111      	bne.n	8009298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800927c:	d004      	beq.n	8009288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009286:	d107      	bne.n	8009298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a0:	d10f      	bne.n	80092c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e018      	b.n	8009308 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	e002      	b.n	80092e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689a      	ldr	r2, [r3, #8]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4013      	ands	r3, r2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	429a      	cmp	r2, r3
 8009304:	d19a      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3720      	adds	r7, #32
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	200000f0 	.word	0x200000f0

08009314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af02      	add	r7, sp, #8
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2201      	movs	r2, #1
 8009328:	2102      	movs	r1, #2
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff ff6a 	bl	8009204 <SPI_WaitFlagStateUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d007      	beq.n	8009346 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933a:	f043 0220 	orr.w	r2, r3, #32
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e032      	b.n	80093ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009346:	4b1b      	ldr	r3, [pc, #108]	@ (80093b4 <SPI_EndRxTxTransaction+0xa0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a1b      	ldr	r2, [pc, #108]	@ (80093b8 <SPI_EndRxTxTransaction+0xa4>)
 800934c:	fba2 2303 	umull	r2, r3, r2, r3
 8009350:	0d5b      	lsrs	r3, r3, #21
 8009352:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009356:	fb02 f303 	mul.w	r3, r2, r3
 800935a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009364:	d112      	bne.n	800938c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2200      	movs	r2, #0
 800936e:	2180      	movs	r1, #128	@ 0x80
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff ff47 	bl	8009204 <SPI_WaitFlagStateUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d016      	beq.n	80093aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009380:	f043 0220 	orr.w	r2, r3, #32
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e00f      	b.n	80093ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	3b01      	subs	r3, #1
 8009396:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a2:	2b80      	cmp	r3, #128	@ 0x80
 80093a4:	d0f2      	beq.n	800938c <SPI_EndRxTxTransaction+0x78>
 80093a6:	e000      	b.n	80093aa <SPI_EndRxTxTransaction+0x96>
        break;
 80093a8:	bf00      	nop
  }

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	200000f0 	.word	0x200000f0
 80093b8:	165e9f81 	.word	0x165e9f81

080093bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e041      	b.n	8009452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fa fd58 	bl	8003e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f000 ff2e 	bl	800a25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b01      	cmp	r3, #1
 800946e:	d001      	beq.n	8009474 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e046      	b.n	8009502 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a23      	ldr	r2, [pc, #140]	@ (8009510 <HAL_TIM_Base_Start+0xb4>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d022      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800948e:	d01d      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1f      	ldr	r2, [pc, #124]	@ (8009514 <HAL_TIM_Base_Start+0xb8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d018      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1e      	ldr	r2, [pc, #120]	@ (8009518 <HAL_TIM_Base_Start+0xbc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1c      	ldr	r2, [pc, #112]	@ (800951c <HAL_TIM_Base_Start+0xc0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00e      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009520 <HAL_TIM_Base_Start+0xc4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d009      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a19      	ldr	r2, [pc, #100]	@ (8009524 <HAL_TIM_Base_Start+0xc8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d004      	beq.n	80094cc <HAL_TIM_Base_Start+0x70>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a18      	ldr	r2, [pc, #96]	@ (8009528 <HAL_TIM_Base_Start+0xcc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d111      	bne.n	80094f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f003 0307 	and.w	r3, r3, #7
 80094d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b06      	cmp	r3, #6
 80094dc:	d010      	beq.n	8009500 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0201 	orr.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ee:	e007      	b.n	8009500 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0201 	orr.w	r2, r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40010400 	.word	0x40010400
 8009524:	40014000 	.word	0x40014000
 8009528:	40001800 	.word	0x40001800

0800952c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10f      	bne.n	8009564 <HAL_TIM_Base_Stop+0x38>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6a1a      	ldr	r2, [r3, #32]
 800954a:	f240 4344 	movw	r3, #1092	@ 0x444
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d107      	bne.n	8009564 <HAL_TIM_Base_Stop+0x38>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0201 	bic.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	d001      	beq.n	8009594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e04e      	b.n	8009632 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a23      	ldr	r2, [pc, #140]	@ (8009640 <HAL_TIM_Base_Start_IT+0xc4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d022      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095be:	d01d      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a1f      	ldr	r2, [pc, #124]	@ (8009644 <HAL_TIM_Base_Start_IT+0xc8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d018      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009648 <HAL_TIM_Base_Start_IT+0xcc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d013      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a1c      	ldr	r2, [pc, #112]	@ (800964c <HAL_TIM_Base_Start_IT+0xd0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d00e      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009650 <HAL_TIM_Base_Start_IT+0xd4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d009      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a19      	ldr	r2, [pc, #100]	@ (8009654 <HAL_TIM_Base_Start_IT+0xd8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x80>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a18      	ldr	r2, [pc, #96]	@ (8009658 <HAL_TIM_Base_Start_IT+0xdc>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d111      	bne.n	8009620 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b06      	cmp	r3, #6
 800960c:	d010      	beq.n	8009630 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f042 0201 	orr.w	r2, r2, #1
 800961c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961e:	e007      	b.n	8009630 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0201 	orr.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	40010000 	.word	0x40010000
 8009644:	40000400 	.word	0x40000400
 8009648:	40000800 	.word	0x40000800
 800964c:	40000c00 	.word	0x40000c00
 8009650:	40010400 	.word	0x40010400
 8009654:	40014000 	.word	0x40014000
 8009658:	40001800 	.word	0x40001800

0800965c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e041      	b.n	80096f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f839 	bl	80096fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3304      	adds	r3, #4
 8009698:	4619      	mov	r1, r3
 800969a:	4610      	mov	r0, r2
 800969c:	f000 fdde 	bl	800a25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e041      	b.n	80097a4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f839 	bl	80097ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3304      	adds	r3, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f000 fd85 	bl	800a25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <HAL_TIM_IC_Start_IT+0x1e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	e013      	b.n	8009806 <HAL_TIM_IC_Start_IT+0x46>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d104      	bne.n	80097ee <HAL_TIM_IC_Start_IT+0x2e>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	e00b      	b.n	8009806 <HAL_TIM_IC_Start_IT+0x46>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d104      	bne.n	80097fe <HAL_TIM_IC_Start_IT+0x3e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	e003      	b.n	8009806 <HAL_TIM_IC_Start_IT+0x46>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d104      	bne.n	8009818 <HAL_TIM_IC_Start_IT+0x58>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009814:	b2db      	uxtb	r3, r3
 8009816:	e013      	b.n	8009840 <HAL_TIM_IC_Start_IT+0x80>
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b04      	cmp	r3, #4
 800981c:	d104      	bne.n	8009828 <HAL_TIM_IC_Start_IT+0x68>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009824:	b2db      	uxtb	r3, r3
 8009826:	e00b      	b.n	8009840 <HAL_TIM_IC_Start_IT+0x80>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b08      	cmp	r3, #8
 800982c:	d104      	bne.n	8009838 <HAL_TIM_IC_Start_IT+0x78>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009834:	b2db      	uxtb	r3, r3
 8009836:	e003      	b.n	8009840 <HAL_TIM_IC_Start_IT+0x80>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800983e:	b2db      	uxtb	r3, r3
 8009840:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d102      	bne.n	800984e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009848:	7b7b      	ldrb	r3, [r7, #13]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d001      	beq.n	8009852 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e0cc      	b.n	80099ec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <HAL_TIM_IC_Start_IT+0xa2>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009860:	e013      	b.n	800988a <HAL_TIM_IC_Start_IT+0xca>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b04      	cmp	r3, #4
 8009866:	d104      	bne.n	8009872 <HAL_TIM_IC_Start_IT+0xb2>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009870:	e00b      	b.n	800988a <HAL_TIM_IC_Start_IT+0xca>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b08      	cmp	r3, #8
 8009876:	d104      	bne.n	8009882 <HAL_TIM_IC_Start_IT+0xc2>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009880:	e003      	b.n	800988a <HAL_TIM_IC_Start_IT+0xca>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2202      	movs	r2, #2
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <HAL_TIM_IC_Start_IT+0xda>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009898:	e013      	b.n	80098c2 <HAL_TIM_IC_Start_IT+0x102>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d104      	bne.n	80098aa <HAL_TIM_IC_Start_IT+0xea>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80098a8:	e00b      	b.n	80098c2 <HAL_TIM_IC_Start_IT+0x102>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d104      	bne.n	80098ba <HAL_TIM_IC_Start_IT+0xfa>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098b8:	e003      	b.n	80098c2 <HAL_TIM_IC_Start_IT+0x102>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2202      	movs	r2, #2
 80098be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b0c      	cmp	r3, #12
 80098c6:	d841      	bhi.n	800994c <HAL_TIM_IC_Start_IT+0x18c>
 80098c8:	a201      	add	r2, pc, #4	@ (adr r2, 80098d0 <HAL_TIM_IC_Start_IT+0x110>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	08009905 	.word	0x08009905
 80098d4:	0800994d 	.word	0x0800994d
 80098d8:	0800994d 	.word	0x0800994d
 80098dc:	0800994d 	.word	0x0800994d
 80098e0:	08009917 	.word	0x08009917
 80098e4:	0800994d 	.word	0x0800994d
 80098e8:	0800994d 	.word	0x0800994d
 80098ec:	0800994d 	.word	0x0800994d
 80098f0:	08009929 	.word	0x08009929
 80098f4:	0800994d 	.word	0x0800994d
 80098f8:	0800994d 	.word	0x0800994d
 80098fc:	0800994d 	.word	0x0800994d
 8009900:	0800993b 	.word	0x0800993b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0202 	orr.w	r2, r2, #2
 8009912:	60da      	str	r2, [r3, #12]
      break;
 8009914:	e01d      	b.n	8009952 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68da      	ldr	r2, [r3, #12]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0204 	orr.w	r2, r2, #4
 8009924:	60da      	str	r2, [r3, #12]
      break;
 8009926:	e014      	b.n	8009952 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0208 	orr.w	r2, r2, #8
 8009936:	60da      	str	r2, [r3, #12]
      break;
 8009938:	e00b      	b.n	8009952 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0210 	orr.w	r2, r2, #16
 8009948:	60da      	str	r2, [r3, #12]
      break;
 800994a:	e002      	b.n	8009952 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	73fb      	strb	r3, [r7, #15]
      break;
 8009950:	bf00      	nop
  }

  if (status == HAL_OK)
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d148      	bne.n	80099ea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2201      	movs	r2, #1
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	4618      	mov	r0, r3
 8009962:	f001 f895 	bl	800aa90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a22      	ldr	r2, [pc, #136]	@ (80099f4 <HAL_TIM_IC_Start_IT+0x234>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d022      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009978:	d01d      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a1e      	ldr	r2, [pc, #120]	@ (80099f8 <HAL_TIM_IC_Start_IT+0x238>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d018      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1c      	ldr	r2, [pc, #112]	@ (80099fc <HAL_TIM_IC_Start_IT+0x23c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d013      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a1b      	ldr	r2, [pc, #108]	@ (8009a00 <HAL_TIM_IC_Start_IT+0x240>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d00e      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a19      	ldr	r2, [pc, #100]	@ (8009a04 <HAL_TIM_IC_Start_IT+0x244>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d009      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a18      	ldr	r2, [pc, #96]	@ (8009a08 <HAL_TIM_IC_Start_IT+0x248>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d004      	beq.n	80099b6 <HAL_TIM_IC_Start_IT+0x1f6>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a16      	ldr	r2, [pc, #88]	@ (8009a0c <HAL_TIM_IC_Start_IT+0x24c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d111      	bne.n	80099da <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f003 0307 	and.w	r3, r3, #7
 80099c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b06      	cmp	r3, #6
 80099c6:	d010      	beq.n	80099ea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d8:	e007      	b.n	80099ea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0201 	orr.w	r2, r2, #1
 80099e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	40010000 	.word	0x40010000
 80099f8:	40000400 	.word	0x40000400
 80099fc:	40000800 	.word	0x40000800
 8009a00:	40000c00 	.word	0x40000c00
 8009a04:	40010400 	.word	0x40010400
 8009a08:	40014000 	.word	0x40014000
 8009a0c:	40001800 	.word	0x40001800

08009a10 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b0c      	cmp	r3, #12
 8009a22:	d841      	bhi.n	8009aa8 <HAL_TIM_IC_Stop_IT+0x98>
 8009a24:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <HAL_TIM_IC_Stop_IT+0x1c>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a61 	.word	0x08009a61
 8009a30:	08009aa9 	.word	0x08009aa9
 8009a34:	08009aa9 	.word	0x08009aa9
 8009a38:	08009aa9 	.word	0x08009aa9
 8009a3c:	08009a73 	.word	0x08009a73
 8009a40:	08009aa9 	.word	0x08009aa9
 8009a44:	08009aa9 	.word	0x08009aa9
 8009a48:	08009aa9 	.word	0x08009aa9
 8009a4c:	08009a85 	.word	0x08009a85
 8009a50:	08009aa9 	.word	0x08009aa9
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009a97 	.word	0x08009a97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0202 	bic.w	r2, r2, #2
 8009a6e:	60da      	str	r2, [r3, #12]
      break;
 8009a70:	e01d      	b.n	8009aae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0204 	bic.w	r2, r2, #4
 8009a80:	60da      	str	r2, [r3, #12]
      break;
 8009a82:	e014      	b.n	8009aae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0208 	bic.w	r2, r2, #8
 8009a92:	60da      	str	r2, [r3, #12]
      break;
 8009a94:	e00b      	b.n	8009aae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0210 	bic.w	r2, r2, #16
 8009aa4:	60da      	str	r2, [r3, #12]
      break;
 8009aa6:	e002      	b.n	8009aae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009aac:	bf00      	nop
  }

  if (status == HAL_OK)
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d156      	bne.n	8009b62 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 ffe7 	bl	800aa90 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a1a      	ldr	r2, [r3, #32]
 8009ac8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10f      	bne.n	8009af2 <HAL_TIM_IC_Stop_IT+0xe2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6a1a      	ldr	r2, [r3, #32]
 8009ad8:	f240 4344 	movw	r3, #1092	@ 0x444
 8009adc:	4013      	ands	r3, r2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d107      	bne.n	8009af2 <HAL_TIM_IC_Stop_IT+0xe2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0201 	bic.w	r2, r2, #1
 8009af0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <HAL_TIM_IC_Stop_IT+0xf2>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b00:	e013      	b.n	8009b2a <HAL_TIM_IC_Stop_IT+0x11a>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d104      	bne.n	8009b12 <HAL_TIM_IC_Stop_IT+0x102>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b10:	e00b      	b.n	8009b2a <HAL_TIM_IC_Stop_IT+0x11a>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d104      	bne.n	8009b22 <HAL_TIM_IC_Stop_IT+0x112>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b20:	e003      	b.n	8009b2a <HAL_TIM_IC_Stop_IT+0x11a>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <HAL_TIM_IC_Stop_IT+0x12a>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b38:	e013      	b.n	8009b62 <HAL_TIM_IC_Stop_IT+0x152>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d104      	bne.n	8009b4a <HAL_TIM_IC_Stop_IT+0x13a>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b48:	e00b      	b.n	8009b62 <HAL_TIM_IC_Stop_IT+0x152>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b08      	cmp	r3, #8
 8009b4e:	d104      	bne.n	8009b5a <HAL_TIM_IC_Stop_IT+0x14a>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b58:	e003      	b.n	8009b62 <HAL_TIM_IC_Stop_IT+0x152>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d020      	beq.n	8009bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f003 0302 	and.w	r3, r3, #2
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d01b      	beq.n	8009bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f06f 0202 	mvn.w	r2, #2
 8009ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7fa fdee 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 8009bbc:	e005      	b.n	8009bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fb2e 	bl	800a220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fb35 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d020      	beq.n	8009c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01b      	beq.n	8009c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0204 	mvn.w	r2, #4
 8009bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fa fdc8 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 8009c08:	e005      	b.n	8009c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fb08 	bl	800a220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fb0f 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f003 0308 	and.w	r3, r3, #8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d020      	beq.n	8009c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f003 0308 	and.w	r3, r3, #8
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01b      	beq.n	8009c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f06f 0208 	mvn.w	r2, #8
 8009c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2204      	movs	r2, #4
 8009c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7fa fda2 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 8009c54:	e005      	b.n	8009c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fae2 	bl	800a220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fae9 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 0310 	and.w	r3, r3, #16
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d020      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01b      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0210 	mvn.w	r2, #16
 8009c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2208      	movs	r2, #8
 8009c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7fa fd7c 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fabc 	bl	800a220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fac3 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d007      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f06f 0201 	mvn.w	r2, #1
 8009cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7f8 fde0 	bl	8002898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 ffc8 	bl	800ac8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00c      	beq.n	8009d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa94 	bl	800a248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f003 0320 	and.w	r3, r3, #32
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00c      	beq.n	8009d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0220 	mvn.w	r2, #32
 8009d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 ff9a 	bl	800ac78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e088      	b.n	8009e7c <HAL_TIM_IC_ConfigChannel+0x130>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11b      	bne.n	8009db0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009d88:	f000 fcbe 	bl	800a708 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	699a      	ldr	r2, [r3, #24]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 020c 	bic.w	r2, r2, #12
 8009d9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6999      	ldr	r1, [r3, #24]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	619a      	str	r2, [r3, #24]
 8009dae:	e060      	b.n	8009e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d11c      	bne.n	8009df0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009dc6:	f000 fd42 	bl	800a84e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699a      	ldr	r2, [r3, #24]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009dd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6999      	ldr	r1, [r3, #24]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	021a      	lsls	r2, r3, #8
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	619a      	str	r2, [r3, #24]
 8009dee:	e040      	b.n	8009e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d11b      	bne.n	8009e2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009e06:	f000 fd8f 	bl	800a928 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 020c 	bic.w	r2, r2, #12
 8009e18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69d9      	ldr	r1, [r3, #28]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	61da      	str	r2, [r3, #28]
 8009e2c:	e021      	b.n	8009e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b0c      	cmp	r3, #12
 8009e32:	d11c      	bne.n	8009e6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009e44:	f000 fdac 	bl	800a9a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69da      	ldr	r2, [r3, #28]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009e56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69d9      	ldr	r1, [r3, #28]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	021a      	lsls	r2, r3, #8
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	61da      	str	r2, [r3, #28]
 8009e6c:	e001      	b.n	8009e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d101      	bne.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e0ae      	b.n	800a000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b0c      	cmp	r3, #12
 8009eae:	f200 809f 	bhi.w	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009eed 	.word	0x08009eed
 8009ebc:	08009ff1 	.word	0x08009ff1
 8009ec0:	08009ff1 	.word	0x08009ff1
 8009ec4:	08009ff1 	.word	0x08009ff1
 8009ec8:	08009f2d 	.word	0x08009f2d
 8009ecc:	08009ff1 	.word	0x08009ff1
 8009ed0:	08009ff1 	.word	0x08009ff1
 8009ed4:	08009ff1 	.word	0x08009ff1
 8009ed8:	08009f6f 	.word	0x08009f6f
 8009edc:	08009ff1 	.word	0x08009ff1
 8009ee0:	08009ff1 	.word	0x08009ff1
 8009ee4:	08009ff1 	.word	0x08009ff1
 8009ee8:	08009faf 	.word	0x08009faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fa58 	bl	800a3a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0208 	orr.w	r2, r2, #8
 8009f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0204 	bic.w	r2, r2, #4
 8009f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6999      	ldr	r1, [r3, #24]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	691a      	ldr	r2, [r3, #16]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	619a      	str	r2, [r3, #24]
      break;
 8009f2a:	e064      	b.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 faa8 	bl	800a488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6999      	ldr	r1, [r3, #24]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	021a      	lsls	r2, r3, #8
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	619a      	str	r2, [r3, #24]
      break;
 8009f6c:	e043      	b.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fafd 	bl	800a574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69da      	ldr	r2, [r3, #28]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0208 	orr.w	r2, r2, #8
 8009f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0204 	bic.w	r2, r2, #4
 8009f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69d9      	ldr	r1, [r3, #28]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	61da      	str	r2, [r3, #28]
      break;
 8009fac:	e023      	b.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fb51 	bl	800a65c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69da      	ldr	r2, [r3, #28]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69da      	ldr	r2, [r3, #28]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	69d9      	ldr	r1, [r3, #28]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	021a      	lsls	r2, r3, #8
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	61da      	str	r2, [r3, #28]
      break;
 8009fee:	e002      	b.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_TIM_ConfigClockSource+0x1c>
 800a020:	2302      	movs	r3, #2
 800a022:	e0b4      	b.n	800a18e <HAL_TIM_ConfigClockSource+0x186>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a04a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a05c:	d03e      	beq.n	800a0dc <HAL_TIM_ConfigClockSource+0xd4>
 800a05e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a062:	f200 8087 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a06a:	f000 8086 	beq.w	800a17a <HAL_TIM_ConfigClockSource+0x172>
 800a06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a072:	d87f      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a074:	2b70      	cmp	r3, #112	@ 0x70
 800a076:	d01a      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0xa6>
 800a078:	2b70      	cmp	r3, #112	@ 0x70
 800a07a:	d87b      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a07c:	2b60      	cmp	r3, #96	@ 0x60
 800a07e:	d050      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x11a>
 800a080:	2b60      	cmp	r3, #96	@ 0x60
 800a082:	d877      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a084:	2b50      	cmp	r3, #80	@ 0x50
 800a086:	d03c      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0xfa>
 800a088:	2b50      	cmp	r3, #80	@ 0x50
 800a08a:	d873      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a08c:	2b40      	cmp	r3, #64	@ 0x40
 800a08e:	d058      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x13a>
 800a090:	2b40      	cmp	r3, #64	@ 0x40
 800a092:	d86f      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a094:	2b30      	cmp	r3, #48	@ 0x30
 800a096:	d064      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x15a>
 800a098:	2b30      	cmp	r3, #48	@ 0x30
 800a09a:	d86b      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	d060      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x15a>
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d867      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d05c      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x15a>
 800a0a8:	2b10      	cmp	r3, #16
 800a0aa:	d05a      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x15a>
 800a0ac:	e062      	b.n	800a174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0be:	f000 fcc7 	bl	800aa50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a0d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	609a      	str	r2, [r3, #8]
      break;
 800a0da:	e04f      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0ec:	f000 fcb0 	bl	800aa50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0fe:	609a      	str	r2, [r3, #8]
      break;
 800a100:	e03c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a10e:	461a      	mov	r2, r3
 800a110:	f000 fb6e 	bl	800a7f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2150      	movs	r1, #80	@ 0x50
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fc7d 	bl	800aa1a <TIM_ITRx_SetConfig>
      break;
 800a120:	e02c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a12e:	461a      	mov	r2, r3
 800a130:	f000 fbca 	bl	800a8c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2160      	movs	r1, #96	@ 0x60
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 fc6d 	bl	800aa1a <TIM_ITRx_SetConfig>
      break;
 800a140:	e01c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a14e:	461a      	mov	r2, r3
 800a150:	f000 fb4e 	bl	800a7f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2140      	movs	r1, #64	@ 0x40
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fc5d 	bl	800aa1a <TIM_ITRx_SetConfig>
      break;
 800a160:	e00c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f000 fc54 	bl	800aa1a <TIM_ITRx_SetConfig>
      break;
 800a172:	e003      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
      break;
 800a178:	e000      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a17a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b0c      	cmp	r3, #12
 800a1aa:	d831      	bhi.n	800a210 <HAL_TIM_ReadCapturedValue+0x78>
 800a1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b2:	bf00      	nop
 800a1b4:	0800a1e9 	.word	0x0800a1e9
 800a1b8:	0800a211 	.word	0x0800a211
 800a1bc:	0800a211 	.word	0x0800a211
 800a1c0:	0800a211 	.word	0x0800a211
 800a1c4:	0800a1f3 	.word	0x0800a1f3
 800a1c8:	0800a211 	.word	0x0800a211
 800a1cc:	0800a211 	.word	0x0800a211
 800a1d0:	0800a211 	.word	0x0800a211
 800a1d4:	0800a1fd 	.word	0x0800a1fd
 800a1d8:	0800a211 	.word	0x0800a211
 800a1dc:	0800a211 	.word	0x0800a211
 800a1e0:	0800a211 	.word	0x0800a211
 800a1e4:	0800a207 	.word	0x0800a207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ee:	60fb      	str	r3, [r7, #12]

      break;
 800a1f0:	e00f      	b.n	800a212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f8:	60fb      	str	r3, [r7, #12]

      break;
 800a1fa:	e00a      	b.n	800a212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a202:	60fb      	str	r3, [r7, #12]

      break;
 800a204:	e005      	b.n	800a212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a20c:	60fb      	str	r3, [r7, #12]

      break;
 800a20e:	e000      	b.n	800a212 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a210:	bf00      	nop
  }

  return tmpreg;
 800a212:	68fb      	ldr	r3, [r7, #12]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a43      	ldr	r2, [pc, #268]	@ (800a37c <TIM_Base_SetConfig+0x120>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d013      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a27a:	d00f      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a40      	ldr	r2, [pc, #256]	@ (800a380 <TIM_Base_SetConfig+0x124>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d00b      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a3f      	ldr	r2, [pc, #252]	@ (800a384 <TIM_Base_SetConfig+0x128>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d007      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a3e      	ldr	r2, [pc, #248]	@ (800a388 <TIM_Base_SetConfig+0x12c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d003      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a3d      	ldr	r2, [pc, #244]	@ (800a38c <TIM_Base_SetConfig+0x130>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d108      	bne.n	800a2ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a32      	ldr	r2, [pc, #200]	@ (800a37c <TIM_Base_SetConfig+0x120>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d02b      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2bc:	d027      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a380 <TIM_Base_SetConfig+0x124>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d023      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a2e      	ldr	r2, [pc, #184]	@ (800a384 <TIM_Base_SetConfig+0x128>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d01f      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a388 <TIM_Base_SetConfig+0x12c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d01b      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a38c <TIM_Base_SetConfig+0x130>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d017      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a2b      	ldr	r2, [pc, #172]	@ (800a390 <TIM_Base_SetConfig+0x134>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d013      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a394 <TIM_Base_SetConfig+0x138>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d00f      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a29      	ldr	r2, [pc, #164]	@ (800a398 <TIM_Base_SetConfig+0x13c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d00b      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a28      	ldr	r2, [pc, #160]	@ (800a39c <TIM_Base_SetConfig+0x140>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d007      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a27      	ldr	r2, [pc, #156]	@ (800a3a0 <TIM_Base_SetConfig+0x144>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d003      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a26      	ldr	r2, [pc, #152]	@ (800a3a4 <TIM_Base_SetConfig+0x148>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d108      	bne.n	800a320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a0e      	ldr	r2, [pc, #56]	@ (800a37c <TIM_Base_SetConfig+0x120>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d003      	beq.n	800a34e <TIM_Base_SetConfig+0xf2>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a10      	ldr	r2, [pc, #64]	@ (800a38c <TIM_Base_SetConfig+0x130>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d103      	bne.n	800a356 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f043 0204 	orr.w	r2, r3, #4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	601a      	str	r2, [r3, #0]
}
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	40010000 	.word	0x40010000
 800a380:	40000400 	.word	0x40000400
 800a384:	40000800 	.word	0x40000800
 800a388:	40000c00 	.word	0x40000c00
 800a38c:	40010400 	.word	0x40010400
 800a390:	40014000 	.word	0x40014000
 800a394:	40014400 	.word	0x40014400
 800a398:	40014800 	.word	0x40014800
 800a39c:	40001800 	.word	0x40001800
 800a3a0:	40001c00 	.word	0x40001c00
 800a3a4:	40002000 	.word	0x40002000

0800a3a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	f023 0201 	bic.w	r2, r3, #1
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f023 0302 	bic.w	r3, r3, #2
 800a3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a20      	ldr	r2, [pc, #128]	@ (800a480 <TIM_OC1_SetConfig+0xd8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d003      	beq.n	800a40c <TIM_OC1_SetConfig+0x64>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a1f      	ldr	r2, [pc, #124]	@ (800a484 <TIM_OC1_SetConfig+0xdc>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d10c      	bne.n	800a426 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f023 0308 	bic.w	r3, r3, #8
 800a412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f023 0304 	bic.w	r3, r3, #4
 800a424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a15      	ldr	r2, [pc, #84]	@ (800a480 <TIM_OC1_SetConfig+0xd8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <TIM_OC1_SetConfig+0x8e>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a14      	ldr	r2, [pc, #80]	@ (800a484 <TIM_OC1_SetConfig+0xdc>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d111      	bne.n	800a45a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a43c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	621a      	str	r2, [r3, #32]
}
 800a474:	bf00      	nop
 800a476:	371c      	adds	r7, #28
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	40010000 	.word	0x40010000
 800a484:	40010400 	.word	0x40010400

0800a488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	f023 0210 	bic.w	r2, r3, #16
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f023 0320 	bic.w	r3, r3, #32
 800a4d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a22      	ldr	r2, [pc, #136]	@ (800a56c <TIM_OC2_SetConfig+0xe4>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_OC2_SetConfig+0x68>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a21      	ldr	r2, [pc, #132]	@ (800a570 <TIM_OC2_SetConfig+0xe8>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d10d      	bne.n	800a50c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a50a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a17      	ldr	r2, [pc, #92]	@ (800a56c <TIM_OC2_SetConfig+0xe4>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d003      	beq.n	800a51c <TIM_OC2_SetConfig+0x94>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <TIM_OC2_SetConfig+0xe8>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d113      	bne.n	800a544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a52a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	4313      	orrs	r3, r2
 800a536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	621a      	str	r2, [r3, #32]
}
 800a55e:	bf00      	nop
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	40010000 	.word	0x40010000
 800a570:	40010400 	.word	0x40010400

0800a574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	021b      	lsls	r3, r3, #8
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a21      	ldr	r2, [pc, #132]	@ (800a654 <TIM_OC3_SetConfig+0xe0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d003      	beq.n	800a5da <TIM_OC3_SetConfig+0x66>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a20      	ldr	r2, [pc, #128]	@ (800a658 <TIM_OC3_SetConfig+0xe4>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d10d      	bne.n	800a5f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	021b      	lsls	r3, r3, #8
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a5f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a16      	ldr	r2, [pc, #88]	@ (800a654 <TIM_OC3_SetConfig+0xe0>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d003      	beq.n	800a606 <TIM_OC3_SetConfig+0x92>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a15      	ldr	r2, [pc, #84]	@ (800a658 <TIM_OC3_SetConfig+0xe4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d113      	bne.n	800a62e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a60c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	4313      	orrs	r3, r2
 800a620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	011b      	lsls	r3, r3, #4
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	621a      	str	r2, [r3, #32]
}
 800a648:	bf00      	nop
 800a64a:	371c      	adds	r7, #28
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	40010000 	.word	0x40010000
 800a658:	40010400 	.word	0x40010400

0800a65c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	021b      	lsls	r3, r3, #8
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	031b      	lsls	r3, r3, #12
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a12      	ldr	r2, [pc, #72]	@ (800a700 <TIM_OC4_SetConfig+0xa4>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d003      	beq.n	800a6c4 <TIM_OC4_SetConfig+0x68>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a11      	ldr	r2, [pc, #68]	@ (800a704 <TIM_OC4_SetConfig+0xa8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d109      	bne.n	800a6d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	019b      	lsls	r3, r3, #6
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	621a      	str	r2, [r3, #32]
}
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	40010000 	.word	0x40010000
 800a704:	40010400 	.word	0x40010400

0800a708 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	f023 0201 	bic.w	r2, r3, #1
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4a28      	ldr	r2, [pc, #160]	@ (800a7d4 <TIM_TI1_SetConfig+0xcc>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01b      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a73c:	d017      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4a25      	ldr	r2, [pc, #148]	@ (800a7d8 <TIM_TI1_SetConfig+0xd0>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4a24      	ldr	r2, [pc, #144]	@ (800a7dc <TIM_TI1_SetConfig+0xd4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00f      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4a23      	ldr	r2, [pc, #140]	@ (800a7e0 <TIM_TI1_SetConfig+0xd8>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00b      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4a22      	ldr	r2, [pc, #136]	@ (800a7e4 <TIM_TI1_SetConfig+0xdc>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d007      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4a21      	ldr	r2, [pc, #132]	@ (800a7e8 <TIM_TI1_SetConfig+0xe0>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_TI1_SetConfig+0x66>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4a20      	ldr	r2, [pc, #128]	@ (800a7ec <TIM_TI1_SetConfig+0xe4>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d101      	bne.n	800a772 <TIM_TI1_SetConfig+0x6a>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <TIM_TI1_SetConfig+0x6c>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d008      	beq.n	800a78a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4313      	orrs	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	e003      	b.n	800a792 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f043 0301 	orr.w	r3, r3, #1
 800a790:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f023 030a 	bic.w	r3, r3, #10
 800a7ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f003 030a 	and.w	r3, r3, #10
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	621a      	str	r2, [r3, #32]
}
 800a7c6:	bf00      	nop
 800a7c8:	371c      	adds	r7, #28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	40010000 	.word	0x40010000
 800a7d8:	40000400 	.word	0x40000400
 800a7dc:	40000800 	.word	0x40000800
 800a7e0:	40000c00 	.word	0x40000c00
 800a7e4:	40010400 	.word	0x40010400
 800a7e8:	40014000 	.word	0x40014000
 800a7ec:	40001800 	.word	0x40001800

0800a7f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	f023 0201 	bic.w	r2, r3, #1
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a81a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f023 030a 	bic.w	r3, r3, #10
 800a82c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	4313      	orrs	r3, r2
 800a834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	621a      	str	r2, [r3, #32]
}
 800a842:	bf00      	nop
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a84e:	b480      	push	{r7}
 800a850:	b087      	sub	sp, #28
 800a852:	af00      	add	r7, sp, #0
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	607a      	str	r2, [r7, #4]
 800a85a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	f023 0210 	bic.w	r2, r3, #16
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	4313      	orrs	r3, r2
 800a884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a88c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	031b      	lsls	r3, r3, #12
 800a892:	b29b      	uxth	r3, r3
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	621a      	str	r2, [r3, #32]
}
 800a8bc:	bf00      	nop
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	f023 0210 	bic.w	r2, r3, #16
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	031b      	lsls	r3, r3, #12
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	621a      	str	r2, [r3, #32]
}
 800a91c:	bf00      	nop
 800a91e:	371c      	adds	r7, #28
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f023 0303 	bic.w	r3, r3, #3
 800a954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a964:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4313      	orrs	r3, r2
 800a970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a978:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	021b      	lsls	r3, r3, #8
 800a97e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	4313      	orrs	r3, r2
 800a986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	621a      	str	r2, [r3, #32]
}
 800a994:	bf00      	nop
 800a996:	371c      	adds	r7, #28
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	031b      	lsls	r3, r3, #12
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a9f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	031b      	lsls	r3, r3, #12
 800a9f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	621a      	str	r2, [r3, #32]
}
 800aa0e:	bf00      	nop
 800aa10:	371c      	adds	r7, #28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	f043 0307 	orr.w	r3, r3, #7
 800aa3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	609a      	str	r2, [r3, #8]
}
 800aa44:	bf00      	nop
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	021a      	lsls	r2, r3, #8
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	431a      	orrs	r2, r3
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	609a      	str	r2, [r3, #8]
}
 800aa84:	bf00      	nop
 800aa86:	371c      	adds	r7, #28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f003 031f 	and.w	r3, r3, #31
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1a      	ldr	r2, [r3, #32]
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	43db      	mvns	r3, r3
 800aab2:	401a      	ands	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a1a      	ldr	r2, [r3, #32]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	f003 031f 	and.w	r3, r3, #31
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	fa01 f303 	lsl.w	r3, r1, r3
 800aac8:	431a      	orrs	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
	...

0800aadc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e05a      	b.n	800abaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a21      	ldr	r2, [pc, #132]	@ (800abb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d022      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab40:	d01d      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a1d      	ldr	r2, [pc, #116]	@ (800abbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d018      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1b      	ldr	r2, [pc, #108]	@ (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d013      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a1a      	ldr	r2, [pc, #104]	@ (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d00e      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a18      	ldr	r2, [pc, #96]	@ (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d009      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a17      	ldr	r2, [pc, #92]	@ (800abcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d004      	beq.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a15      	ldr	r2, [pc, #84]	@ (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d10c      	bne.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	40010000 	.word	0x40010000
 800abbc:	40000400 	.word	0x40000400
 800abc0:	40000800 	.word	0x40000800
 800abc4:	40000c00 	.word	0x40000c00
 800abc8:	40010400 	.word	0x40010400
 800abcc:	40014000 	.word	0x40014000
 800abd0:	40001800 	.word	0x40001800

0800abd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abec:	2302      	movs	r3, #2
 800abee:	e03d      	b.n	800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e042      	b.n	800ad38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d106      	bne.n	800accc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7f9 face 	bl	8004268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2224      	movs	r2, #36	@ 0x24
 800acd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ace2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fd7f 	bl	800b7e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	691a      	ldr	r2, [r3, #16]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800acf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695a      	ldr	r2, [r3, #20]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68da      	ldr	r2, [r3, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ad18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08a      	sub	sp, #40	@ 0x28
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d175      	bne.n	800ae4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <HAL_UART_Transmit+0x2c>
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e06e      	b.n	800ae4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2221      	movs	r2, #33	@ 0x21
 800ad7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad7e:	f7f9 fffd 	bl	8004d7c <HAL_GetTick>
 800ad82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	88fa      	ldrh	r2, [r7, #6]
 800ad88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	88fa      	ldrh	r2, [r7, #6]
 800ad8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad98:	d108      	bne.n	800adac <HAL_UART_Transmit+0x6c>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d104      	bne.n	800adac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	61bb      	str	r3, [r7, #24]
 800adaa:	e003      	b.n	800adb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800adb4:	e02e      	b.n	800ae14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2200      	movs	r2, #0
 800adbe:	2180      	movs	r1, #128	@ 0x80
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 fb1d 	bl	800b400 <UART_WaitOnFlagUntilTimeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2220      	movs	r2, #32
 800add0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e03a      	b.n	800ae4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10b      	bne.n	800adf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	3302      	adds	r3, #2
 800adf2:	61bb      	str	r3, [r7, #24]
 800adf4:	e007      	b.n	800ae06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	3301      	adds	r3, #1
 800ae04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1cb      	bne.n	800adb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2200      	movs	r2, #0
 800ae26:	2140      	movs	r1, #64	@ 0x40
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 fae9 	bl	800b400 <UART_WaitOnFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2220      	movs	r2, #32
 800ae38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e006      	b.n	800ae4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e000      	b.n	800ae4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ae4c:	2302      	movs	r3, #2
  }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b0ba      	sub	sp, #232	@ 0xe8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae8e:	f003 030f 	and.w	r3, r3, #15
 800ae92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ae96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10f      	bne.n	800aebe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea2:	f003 0320 	and.w	r3, r3, #32
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d009      	beq.n	800aebe <HAL_UART_IRQHandler+0x66>
 800aeaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fbd7 	bl	800b66a <UART_Receive_IT>
      return;
 800aebc:	e273      	b.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80de 	beq.w	800b084 <HAL_UART_IRQHandler+0x22c>
 800aec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d106      	bne.n	800aee2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 80d1 	beq.w	800b084 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <HAL_UART_IRQHandler+0xae>
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aefe:	f043 0201 	orr.w	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af0a:	f003 0304 	and.w	r3, r3, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00b      	beq.n	800af2a <HAL_UART_IRQHandler+0xd2>
 800af12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af22:	f043 0202 	orr.w	r2, r3, #2
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00b      	beq.n	800af4e <HAL_UART_IRQHandler+0xf6>
 800af36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d005      	beq.n	800af4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af46:	f043 0204 	orr.w	r2, r3, #4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af52:	f003 0308 	and.w	r3, r3, #8
 800af56:	2b00      	cmp	r3, #0
 800af58:	d011      	beq.n	800af7e <HAL_UART_IRQHandler+0x126>
 800af5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	d105      	bne.n	800af72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af76:	f043 0208 	orr.w	r2, r3, #8
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 820a 	beq.w	800b39c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b00      	cmp	r3, #0
 800af92:	d008      	beq.n	800afa6 <HAL_UART_IRQHandler+0x14e>
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fb62 	bl	800b66a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb0:	2b40      	cmp	r3, #64	@ 0x40
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc2:	f003 0308 	and.w	r3, r3, #8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d103      	bne.n	800afd2 <HAL_UART_IRQHandler+0x17a>
 800afca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d04f      	beq.n	800b072 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fa6d 	bl	800b4b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe2:	2b40      	cmp	r3, #64	@ 0x40
 800afe4:	d141      	bne.n	800b06a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3314      	adds	r3, #20
 800afec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800affc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3314      	adds	r3, #20
 800b00e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b012:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b01e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1d9      	bne.n	800afe6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d013      	beq.n	800b062 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03e:	4a8a      	ldr	r2, [pc, #552]	@ (800b268 <HAL_UART_IRQHandler+0x410>)
 800b040:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b046:	4618      	mov	r0, r3
 800b048:	f7fb fc5a 	bl	8006900 <HAL_DMA_Abort_IT>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d016      	beq.n	800b080 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b060:	e00e      	b.n	800b080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f9b6 	bl	800b3d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b068:	e00a      	b.n	800b080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9b2 	bl	800b3d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b070:	e006      	b.n	800b080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f9ae 	bl	800b3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b07e:	e18d      	b.n	800b39c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b080:	bf00      	nop
    return;
 800b082:	e18b      	b.n	800b39c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b088:	2b01      	cmp	r3, #1
 800b08a:	f040 8167 	bne.w	800b35c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b092:	f003 0310 	and.w	r3, r3, #16
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 8160 	beq.w	800b35c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a0:	f003 0310 	and.w	r3, r3, #16
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8159 	beq.w	800b35c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60bb      	str	r3, [r7, #8]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	60bb      	str	r3, [r7, #8]
 800b0be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ca:	2b40      	cmp	r3, #64	@ 0x40
 800b0cc:	f040 80ce 	bne.w	800b26c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80a9 	beq.w	800b238 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b0ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	f080 80a2 	bcs.w	800b238 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b106:	f000 8088 	beq.w	800b21a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	330c      	adds	r3, #12
 800b110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	330c      	adds	r3, #12
 800b132:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b13a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b142:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b14e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1d9      	bne.n	800b10a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3314      	adds	r3, #20
 800b15c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b168:	f023 0301 	bic.w	r3, r3, #1
 800b16c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3314      	adds	r3, #20
 800b176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b17a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b17e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b182:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b18c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e1      	bne.n	800b156 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3314      	adds	r3, #20
 800b198:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b1a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3314      	adds	r3, #20
 800b1b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b1b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b1bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1be:	e841 2300 	strex	r3, r2, [r1]
 800b1c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b1c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e3      	bne.n	800b192 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	330c      	adds	r3, #12
 800b1de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1e2:	e853 3f00 	ldrex	r3, [r3]
 800b1e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1ea:	f023 0310 	bic.w	r3, r3, #16
 800b1ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	330c      	adds	r3, #12
 800b1f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b1fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b202:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b20a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e3      	bne.n	800b1d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b214:	4618      	mov	r0, r3
 800b216:	f7fb fb03 	bl	8006820 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2202      	movs	r2, #2
 800b21e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b228:	b29b      	uxth	r3, r3
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f8d9 	bl	800b3e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b236:	e0b3      	b.n	800b3a0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b23c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b240:	429a      	cmp	r2, r3
 800b242:	f040 80ad 	bne.w	800b3a0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b250:	f040 80a6 	bne.w	800b3a0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f8c1 	bl	800b3e8 <HAL_UARTEx_RxEventCallback>
      return;
 800b266:	e09b      	b.n	800b3a0 <HAL_UART_IRQHandler+0x548>
 800b268:	0800b579 	.word	0x0800b579
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b274:	b29b      	uxth	r3, r3
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 808e 	beq.w	800b3a4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8089 	beq.w	800b3a4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	330c      	adds	r3, #12
 800b298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b2b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800b2b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e3      	bne.n	800b292 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3314      	adds	r3, #20
 800b2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	e853 3f00 	ldrex	r3, [r3]
 800b2d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	f023 0301 	bic.w	r3, r3, #1
 800b2e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3314      	adds	r3, #20
 800b2ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e3      	bne.n	800b2ca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	330c      	adds	r3, #12
 800b316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	e853 3f00 	ldrex	r3, [r3]
 800b31e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f023 0310 	bic.w	r3, r3, #16
 800b326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	330c      	adds	r3, #12
 800b330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b334:	61fa      	str	r2, [r7, #28]
 800b336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b338:	69b9      	ldr	r1, [r7, #24]
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	e841 2300 	strex	r3, r2, [r1]
 800b340:	617b      	str	r3, [r7, #20]
   return(result);
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1e3      	bne.n	800b310 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b34e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f847 	bl	800b3e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b35a:	e023      	b.n	800b3a4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <HAL_UART_IRQHandler+0x524>
 800b368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b36c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f910 	bl	800b59a <UART_Transmit_IT>
    return;
 800b37a:	e014      	b.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00e      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
 800b388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d008      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f950 	bl	800b63a <UART_EndTransmit_IT>
    return;
 800b39a:	e004      	b.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
    return;
 800b39c:	bf00      	nop
 800b39e:	e002      	b.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
      return;
 800b3a0:	bf00      	nop
 800b3a2:	e000      	b.n	800b3a6 <HAL_UART_IRQHandler+0x54e>
      return;
 800b3a4:	bf00      	nop
  }
}
 800b3a6:	37e8      	adds	r7, #232	@ 0xe8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	4613      	mov	r3, r2
 800b40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b410:	e03b      	b.n	800b48a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b418:	d037      	beq.n	800b48a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b41a:	f7f9 fcaf 	bl	8004d7c <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	6a3a      	ldr	r2, [r7, #32]
 800b426:	429a      	cmp	r2, r3
 800b428:	d302      	bcc.n	800b430 <UART_WaitOnFlagUntilTimeout+0x30>
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e03a      	b.n	800b4aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d023      	beq.n	800b48a <UART_WaitOnFlagUntilTimeout+0x8a>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b80      	cmp	r3, #128	@ 0x80
 800b446:	d020      	beq.n	800b48a <UART_WaitOnFlagUntilTimeout+0x8a>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b40      	cmp	r3, #64	@ 0x40
 800b44c:	d01d      	beq.n	800b48a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0308 	and.w	r3, r3, #8
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d116      	bne.n	800b48a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 f81d 	bl	800b4b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2208      	movs	r2, #8
 800b47c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e00f      	b.n	800b4aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	4013      	ands	r3, r2
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	429a      	cmp	r2, r3
 800b498:	bf0c      	ite	eq
 800b49a:	2301      	moveq	r3, #1
 800b49c:	2300      	movne	r3, #0
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d0b4      	beq.n	800b412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b095      	sub	sp, #84	@ 0x54
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c4:	e853 3f00 	ldrex	r3, [r3]
 800b4c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	330c      	adds	r3, #12
 800b4d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4da:	643a      	str	r2, [r7, #64]	@ 0x40
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e5      	bne.n	800b4ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3314      	adds	r3, #20
 800b4f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f023 0301 	bic.w	r3, r3, #1
 800b504:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3314      	adds	r3, #20
 800b50c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b50e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e5      	bne.n	800b4ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b526:	2b01      	cmp	r3, #1
 800b528:	d119      	bne.n	800b55e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	330c      	adds	r3, #12
 800b530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	60bb      	str	r3, [r7, #8]
   return(result);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f023 0310 	bic.w	r3, r3, #16
 800b540:	647b      	str	r3, [r7, #68]	@ 0x44
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	330c      	adds	r3, #12
 800b548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b54a:	61ba      	str	r2, [r7, #24]
 800b54c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	6979      	ldr	r1, [r7, #20]
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	613b      	str	r3, [r7, #16]
   return(result);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e5      	bne.n	800b52a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b56c:	bf00      	nop
 800b56e:	3754      	adds	r7, #84	@ 0x54
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff ff21 	bl	800b3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b21      	cmp	r3, #33	@ 0x21
 800b5ac:	d13e      	bne.n	800b62c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5b6:	d114      	bne.n	800b5e2 <UART_Transmit_IT+0x48>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d110      	bne.n	800b5e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
 800b5c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	1c9a      	adds	r2, r3, #2
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	621a      	str	r2, [r3, #32]
 800b5e0:	e008      	b.n	800b5f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	1c59      	adds	r1, r3, #1
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	6211      	str	r1, [r2, #32]
 800b5ec:	781a      	ldrb	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	4619      	mov	r1, r3
 800b602:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10f      	bne.n	800b628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	e000      	b.n	800b62e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b62c:	2302      	movs	r3, #2
  }
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68da      	ldr	r2, [r3, #12]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2220      	movs	r2, #32
 800b656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fea6 	bl	800b3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b08c      	sub	sp, #48	@ 0x30
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b22      	cmp	r3, #34	@ 0x22
 800b684:	f040 80aa 	bne.w	800b7dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b690:	d115      	bne.n	800b6be <UART_Receive_IT+0x54>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d111      	bne.n	800b6be <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b6:	1c9a      	adds	r2, r3, #2
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6bc:	e024      	b.n	800b708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6cc:	d007      	beq.n	800b6de <UART_Receive_IT+0x74>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10a      	bne.n	800b6ec <UART_Receive_IT+0x82>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e008      	b.n	800b6fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	b29b      	uxth	r3, r3
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	4619      	mov	r1, r3
 800b716:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d15d      	bne.n	800b7d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68da      	ldr	r2, [r3, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f022 0220 	bic.w	r2, r2, #32
 800b72a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b73a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	695a      	ldr	r2, [r3, #20]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 0201 	bic.w	r2, r2, #1
 800b74a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2220      	movs	r2, #32
 800b750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d135      	bne.n	800b7ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	330c      	adds	r3, #12
 800b76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	e853 3f00 	ldrex	r3, [r3]
 800b776:	613b      	str	r3, [r7, #16]
   return(result);
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	f023 0310 	bic.w	r3, r3, #16
 800b77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	330c      	adds	r3, #12
 800b786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b788:	623a      	str	r2, [r7, #32]
 800b78a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78c:	69f9      	ldr	r1, [r7, #28]
 800b78e:	6a3a      	ldr	r2, [r7, #32]
 800b790:	e841 2300 	strex	r3, r2, [r1]
 800b794:	61bb      	str	r3, [r7, #24]
   return(result);
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e5      	bne.n	800b768 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0310 	and.w	r3, r3, #16
 800b7a6:	2b10      	cmp	r3, #16
 800b7a8:	d10a      	bne.n	800b7c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fe0e 	bl	800b3e8 <HAL_UARTEx_RxEventCallback>
 800b7cc:	e002      	b.n	800b7d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fdf6 	bl	800b3c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e002      	b.n	800b7de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e000      	b.n	800b7de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b7dc:	2302      	movs	r3, #2
  }
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3730      	adds	r7, #48	@ 0x30
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7ec:	b0c0      	sub	sp, #256	@ 0x100
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b804:	68d9      	ldr	r1, [r3, #12]
 800b806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	ea40 0301 	orr.w	r3, r0, r1
 800b810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	431a      	orrs	r2, r3
 800b820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	431a      	orrs	r2, r3
 800b828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	4313      	orrs	r3, r2
 800b830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b840:	f021 010c 	bic.w	r1, r1, #12
 800b844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b84e:	430b      	orrs	r3, r1
 800b850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b862:	6999      	ldr	r1, [r3, #24]
 800b864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	ea40 0301 	orr.w	r3, r0, r1
 800b86e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	4b8f      	ldr	r3, [pc, #572]	@ (800bab4 <UART_SetConfig+0x2cc>)
 800b878:	429a      	cmp	r2, r3
 800b87a:	d005      	beq.n	800b888 <UART_SetConfig+0xa0>
 800b87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	4b8d      	ldr	r3, [pc, #564]	@ (800bab8 <UART_SetConfig+0x2d0>)
 800b884:	429a      	cmp	r2, r3
 800b886:	d104      	bne.n	800b892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b888:	f7fd fa76 	bl	8008d78 <HAL_RCC_GetPCLK2Freq>
 800b88c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b890:	e003      	b.n	800b89a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b892:	f7fd fa5d 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800b896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89e:	69db      	ldr	r3, [r3, #28]
 800b8a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8a4:	f040 810c 	bne.w	800bac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b8b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	462b      	mov	r3, r5
 800b8be:	1891      	adds	r1, r2, r2
 800b8c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b8c2:	415b      	adcs	r3, r3
 800b8c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	eb12 0801 	adds.w	r8, r2, r1
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	eb43 0901 	adc.w	r9, r3, r1
 800b8d6:	f04f 0200 	mov.w	r2, #0
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8ea:	4690      	mov	r8, r2
 800b8ec:	4699      	mov	r9, r3
 800b8ee:	4623      	mov	r3, r4
 800b8f0:	eb18 0303 	adds.w	r3, r8, r3
 800b8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	eb49 0303 	adc.w	r3, r9, r3
 800b8fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b90e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b916:	460b      	mov	r3, r1
 800b918:	18db      	adds	r3, r3, r3
 800b91a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b91c:	4613      	mov	r3, r2
 800b91e:	eb42 0303 	adc.w	r3, r2, r3
 800b922:	657b      	str	r3, [r7, #84]	@ 0x54
 800b924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b92c:	f7f5 f98c 	bl	8000c48 <__aeabi_uldivmod>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4b61      	ldr	r3, [pc, #388]	@ (800babc <UART_SetConfig+0x2d4>)
 800b936:	fba3 2302 	umull	r2, r3, r3, r2
 800b93a:	095b      	lsrs	r3, r3, #5
 800b93c:	011c      	lsls	r4, r3, #4
 800b93e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b942:	2200      	movs	r2, #0
 800b944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b94c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b950:	4642      	mov	r2, r8
 800b952:	464b      	mov	r3, r9
 800b954:	1891      	adds	r1, r2, r2
 800b956:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b958:	415b      	adcs	r3, r3
 800b95a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b95c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b960:	4641      	mov	r1, r8
 800b962:	eb12 0a01 	adds.w	sl, r2, r1
 800b966:	4649      	mov	r1, r9
 800b968:	eb43 0b01 	adc.w	fp, r3, r1
 800b96c:	f04f 0200 	mov.w	r2, #0
 800b970:	f04f 0300 	mov.w	r3, #0
 800b974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b97c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b980:	4692      	mov	sl, r2
 800b982:	469b      	mov	fp, r3
 800b984:	4643      	mov	r3, r8
 800b986:	eb1a 0303 	adds.w	r3, sl, r3
 800b98a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b98e:	464b      	mov	r3, r9
 800b990:	eb4b 0303 	adc.w	r3, fp, r3
 800b994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b9a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	18db      	adds	r3, r3, r3
 800b9b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	eb42 0303 	adc.w	r3, r2, r3
 800b9b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b9be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b9c2:	f7f5 f941 	bl	8000c48 <__aeabi_uldivmod>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4b3b      	ldr	r3, [pc, #236]	@ (800babc <UART_SetConfig+0x2d4>)
 800b9ce:	fba3 2301 	umull	r2, r3, r3, r1
 800b9d2:	095b      	lsrs	r3, r3, #5
 800b9d4:	2264      	movs	r2, #100	@ 0x64
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	1acb      	subs	r3, r1, r3
 800b9dc:	00db      	lsls	r3, r3, #3
 800b9de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b9e2:	4b36      	ldr	r3, [pc, #216]	@ (800babc <UART_SetConfig+0x2d4>)
 800b9e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b9e8:	095b      	lsrs	r3, r3, #5
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b9f0:	441c      	add	r4, r3
 800b9f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b9fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ba00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ba04:	4642      	mov	r2, r8
 800ba06:	464b      	mov	r3, r9
 800ba08:	1891      	adds	r1, r2, r2
 800ba0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba0c:	415b      	adcs	r3, r3
 800ba0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ba14:	4641      	mov	r1, r8
 800ba16:	1851      	adds	r1, r2, r1
 800ba18:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	414b      	adcs	r3, r1
 800ba1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba20:	f04f 0200 	mov.w	r2, #0
 800ba24:	f04f 0300 	mov.w	r3, #0
 800ba28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ba2c:	4659      	mov	r1, fp
 800ba2e:	00cb      	lsls	r3, r1, #3
 800ba30:	4651      	mov	r1, sl
 800ba32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba36:	4651      	mov	r1, sl
 800ba38:	00ca      	lsls	r2, r1, #3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4642      	mov	r2, r8
 800ba42:	189b      	adds	r3, r3, r2
 800ba44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba48:	464b      	mov	r3, r9
 800ba4a:	460a      	mov	r2, r1
 800ba4c:	eb42 0303 	adc.w	r3, r2, r3
 800ba50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba68:	460b      	mov	r3, r1
 800ba6a:	18db      	adds	r3, r3, r3
 800ba6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba6e:	4613      	mov	r3, r2
 800ba70:	eb42 0303 	adc.w	r3, r2, r3
 800ba74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ba7e:	f7f5 f8e3 	bl	8000c48 <__aeabi_uldivmod>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4b0d      	ldr	r3, [pc, #52]	@ (800babc <UART_SetConfig+0x2d4>)
 800ba88:	fba3 1302 	umull	r1, r3, r3, r2
 800ba8c:	095b      	lsrs	r3, r3, #5
 800ba8e:	2164      	movs	r1, #100	@ 0x64
 800ba90:	fb01 f303 	mul.w	r3, r1, r3
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	3332      	adds	r3, #50	@ 0x32
 800ba9a:	4a08      	ldr	r2, [pc, #32]	@ (800babc <UART_SetConfig+0x2d4>)
 800ba9c:	fba2 2303 	umull	r2, r3, r2, r3
 800baa0:	095b      	lsrs	r3, r3, #5
 800baa2:	f003 0207 	and.w	r2, r3, #7
 800baa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4422      	add	r2, r4
 800baae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bab0:	e106      	b.n	800bcc0 <UART_SetConfig+0x4d8>
 800bab2:	bf00      	nop
 800bab4:	40011000 	.word	0x40011000
 800bab8:	40011400 	.word	0x40011400
 800babc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bac4:	2200      	movs	r2, #0
 800bac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800baca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bad2:	4642      	mov	r2, r8
 800bad4:	464b      	mov	r3, r9
 800bad6:	1891      	adds	r1, r2, r2
 800bad8:	6239      	str	r1, [r7, #32]
 800bada:	415b      	adcs	r3, r3
 800badc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bae2:	4641      	mov	r1, r8
 800bae4:	1854      	adds	r4, r2, r1
 800bae6:	4649      	mov	r1, r9
 800bae8:	eb43 0501 	adc.w	r5, r3, r1
 800baec:	f04f 0200 	mov.w	r2, #0
 800baf0:	f04f 0300 	mov.w	r3, #0
 800baf4:	00eb      	lsls	r3, r5, #3
 800baf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bafa:	00e2      	lsls	r2, r4, #3
 800bafc:	4614      	mov	r4, r2
 800bafe:	461d      	mov	r5, r3
 800bb00:	4643      	mov	r3, r8
 800bb02:	18e3      	adds	r3, r4, r3
 800bb04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb08:	464b      	mov	r3, r9
 800bb0a:	eb45 0303 	adc.w	r3, r5, r3
 800bb0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb22:	f04f 0200 	mov.w	r2, #0
 800bb26:	f04f 0300 	mov.w	r3, #0
 800bb2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bb2e:	4629      	mov	r1, r5
 800bb30:	008b      	lsls	r3, r1, #2
 800bb32:	4621      	mov	r1, r4
 800bb34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb38:	4621      	mov	r1, r4
 800bb3a:	008a      	lsls	r2, r1, #2
 800bb3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bb40:	f7f5 f882 	bl	8000c48 <__aeabi_uldivmod>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4b60      	ldr	r3, [pc, #384]	@ (800bccc <UART_SetConfig+0x4e4>)
 800bb4a:	fba3 2302 	umull	r2, r3, r3, r2
 800bb4e:	095b      	lsrs	r3, r3, #5
 800bb50:	011c      	lsls	r4, r3, #4
 800bb52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bb60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	1891      	adds	r1, r2, r2
 800bb6a:	61b9      	str	r1, [r7, #24]
 800bb6c:	415b      	adcs	r3, r3
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb74:	4641      	mov	r1, r8
 800bb76:	1851      	adds	r1, r2, r1
 800bb78:	6139      	str	r1, [r7, #16]
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	414b      	adcs	r3, r1
 800bb7e:	617b      	str	r3, [r7, #20]
 800bb80:	f04f 0200 	mov.w	r2, #0
 800bb84:	f04f 0300 	mov.w	r3, #0
 800bb88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb8c:	4659      	mov	r1, fp
 800bb8e:	00cb      	lsls	r3, r1, #3
 800bb90:	4651      	mov	r1, sl
 800bb92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb96:	4651      	mov	r1, sl
 800bb98:	00ca      	lsls	r2, r1, #3
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4642      	mov	r2, r8
 800bba2:	189b      	adds	r3, r3, r2
 800bba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bba8:	464b      	mov	r3, r9
 800bbaa:	460a      	mov	r2, r1
 800bbac:	eb42 0303 	adc.w	r3, r2, r3
 800bbb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bbc0:	f04f 0200 	mov.w	r2, #0
 800bbc4:	f04f 0300 	mov.w	r3, #0
 800bbc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bbcc:	4649      	mov	r1, r9
 800bbce:	008b      	lsls	r3, r1, #2
 800bbd0:	4641      	mov	r1, r8
 800bbd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbd6:	4641      	mov	r1, r8
 800bbd8:	008a      	lsls	r2, r1, #2
 800bbda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bbde:	f7f5 f833 	bl	8000c48 <__aeabi_uldivmod>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4b38      	ldr	r3, [pc, #224]	@ (800bccc <UART_SetConfig+0x4e4>)
 800bbea:	fba3 2301 	umull	r2, r3, r3, r1
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	2264      	movs	r2, #100	@ 0x64
 800bbf2:	fb02 f303 	mul.w	r3, r2, r3
 800bbf6:	1acb      	subs	r3, r1, r3
 800bbf8:	011b      	lsls	r3, r3, #4
 800bbfa:	3332      	adds	r3, #50	@ 0x32
 800bbfc:	4a33      	ldr	r2, [pc, #204]	@ (800bccc <UART_SetConfig+0x4e4>)
 800bbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800bc02:	095b      	lsrs	r3, r3, #5
 800bc04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc08:	441c      	add	r4, r3
 800bc0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc0e:	2200      	movs	r2, #0
 800bc10:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc12:	677a      	str	r2, [r7, #116]	@ 0x74
 800bc14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bc18:	4642      	mov	r2, r8
 800bc1a:	464b      	mov	r3, r9
 800bc1c:	1891      	adds	r1, r2, r2
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	415b      	adcs	r3, r3
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc28:	4641      	mov	r1, r8
 800bc2a:	1851      	adds	r1, r2, r1
 800bc2c:	6039      	str	r1, [r7, #0]
 800bc2e:	4649      	mov	r1, r9
 800bc30:	414b      	adcs	r3, r1
 800bc32:	607b      	str	r3, [r7, #4]
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	f04f 0300 	mov.w	r3, #0
 800bc3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc40:	4659      	mov	r1, fp
 800bc42:	00cb      	lsls	r3, r1, #3
 800bc44:	4651      	mov	r1, sl
 800bc46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc4a:	4651      	mov	r1, sl
 800bc4c:	00ca      	lsls	r2, r1, #3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	4619      	mov	r1, r3
 800bc52:	4603      	mov	r3, r0
 800bc54:	4642      	mov	r2, r8
 800bc56:	189b      	adds	r3, r3, r2
 800bc58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc5a:	464b      	mov	r3, r9
 800bc5c:	460a      	mov	r2, r1
 800bc5e:	eb42 0303 	adc.w	r3, r2, r3
 800bc62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc6e:	667a      	str	r2, [r7, #100]	@ 0x64
 800bc70:	f04f 0200 	mov.w	r2, #0
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	008b      	lsls	r3, r1, #2
 800bc80:	4641      	mov	r1, r8
 800bc82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc86:	4641      	mov	r1, r8
 800bc88:	008a      	lsls	r2, r1, #2
 800bc8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bc8e:	f7f4 ffdb 	bl	8000c48 <__aeabi_uldivmod>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4b0d      	ldr	r3, [pc, #52]	@ (800bccc <UART_SetConfig+0x4e4>)
 800bc98:	fba3 1302 	umull	r1, r3, r3, r2
 800bc9c:	095b      	lsrs	r3, r3, #5
 800bc9e:	2164      	movs	r1, #100	@ 0x64
 800bca0:	fb01 f303 	mul.w	r3, r1, r3
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	3332      	adds	r3, #50	@ 0x32
 800bcaa:	4a08      	ldr	r2, [pc, #32]	@ (800bccc <UART_SetConfig+0x4e4>)
 800bcac:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb0:	095b      	lsrs	r3, r3, #5
 800bcb2:	f003 020f 	and.w	r2, r3, #15
 800bcb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4422      	add	r2, r4
 800bcbe:	609a      	str	r2, [r3, #8]
}
 800bcc0:	bf00      	nop
 800bcc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bccc:	51eb851f 	.word	0x51eb851f

0800bcd0 <__cvt>:
 800bcd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd4:	ec57 6b10 	vmov	r6, r7, d0
 800bcd8:	2f00      	cmp	r7, #0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	4619      	mov	r1, r3
 800bcde:	463b      	mov	r3, r7
 800bce0:	bfbb      	ittet	lt
 800bce2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bce6:	461f      	movlt	r7, r3
 800bce8:	2300      	movge	r3, #0
 800bcea:	232d      	movlt	r3, #45	@ 0x2d
 800bcec:	700b      	strb	r3, [r1, #0]
 800bcee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcf0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bcf4:	4691      	mov	r9, r2
 800bcf6:	f023 0820 	bic.w	r8, r3, #32
 800bcfa:	bfbc      	itt	lt
 800bcfc:	4632      	movlt	r2, r6
 800bcfe:	4616      	movlt	r6, r2
 800bd00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd04:	d005      	beq.n	800bd12 <__cvt+0x42>
 800bd06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bd0a:	d100      	bne.n	800bd0e <__cvt+0x3e>
 800bd0c:	3401      	adds	r4, #1
 800bd0e:	2102      	movs	r1, #2
 800bd10:	e000      	b.n	800bd14 <__cvt+0x44>
 800bd12:	2103      	movs	r1, #3
 800bd14:	ab03      	add	r3, sp, #12
 800bd16:	9301      	str	r3, [sp, #4]
 800bd18:	ab02      	add	r3, sp, #8
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	ec47 6b10 	vmov	d0, r6, r7
 800bd20:	4653      	mov	r3, sl
 800bd22:	4622      	mov	r2, r4
 800bd24:	f000 ffa0 	bl	800cc68 <_dtoa_r>
 800bd28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	d119      	bne.n	800bd64 <__cvt+0x94>
 800bd30:	f019 0f01 	tst.w	r9, #1
 800bd34:	d00e      	beq.n	800bd54 <__cvt+0x84>
 800bd36:	eb00 0904 	add.w	r9, r0, r4
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd46:	b108      	cbz	r0, 800bd4c <__cvt+0x7c>
 800bd48:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd4c:	2230      	movs	r2, #48	@ 0x30
 800bd4e:	9b03      	ldr	r3, [sp, #12]
 800bd50:	454b      	cmp	r3, r9
 800bd52:	d31e      	bcc.n	800bd92 <__cvt+0xc2>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd58:	1b5b      	subs	r3, r3, r5
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	b004      	add	sp, #16
 800bd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd68:	eb00 0904 	add.w	r9, r0, r4
 800bd6c:	d1e5      	bne.n	800bd3a <__cvt+0x6a>
 800bd6e:	7803      	ldrb	r3, [r0, #0]
 800bd70:	2b30      	cmp	r3, #48	@ 0x30
 800bd72:	d10a      	bne.n	800bd8a <__cvt+0xba>
 800bd74:	2200      	movs	r2, #0
 800bd76:	2300      	movs	r3, #0
 800bd78:	4630      	mov	r0, r6
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f7f4 fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd80:	b918      	cbnz	r0, 800bd8a <__cvt+0xba>
 800bd82:	f1c4 0401 	rsb	r4, r4, #1
 800bd86:	f8ca 4000 	str.w	r4, [sl]
 800bd8a:	f8da 3000 	ldr.w	r3, [sl]
 800bd8e:	4499      	add	r9, r3
 800bd90:	e7d3      	b.n	800bd3a <__cvt+0x6a>
 800bd92:	1c59      	adds	r1, r3, #1
 800bd94:	9103      	str	r1, [sp, #12]
 800bd96:	701a      	strb	r2, [r3, #0]
 800bd98:	e7d9      	b.n	800bd4e <__cvt+0x7e>

0800bd9a <__exponent>:
 800bd9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	bfba      	itte	lt
 800bda0:	4249      	neglt	r1, r1
 800bda2:	232d      	movlt	r3, #45	@ 0x2d
 800bda4:	232b      	movge	r3, #43	@ 0x2b
 800bda6:	2909      	cmp	r1, #9
 800bda8:	7002      	strb	r2, [r0, #0]
 800bdaa:	7043      	strb	r3, [r0, #1]
 800bdac:	dd29      	ble.n	800be02 <__exponent+0x68>
 800bdae:	f10d 0307 	add.w	r3, sp, #7
 800bdb2:	461d      	mov	r5, r3
 800bdb4:	270a      	movs	r7, #10
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdbc:	fb07 1416 	mls	r4, r7, r6, r1
 800bdc0:	3430      	adds	r4, #48	@ 0x30
 800bdc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	2c63      	cmp	r4, #99	@ 0x63
 800bdca:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdce:	4631      	mov	r1, r6
 800bdd0:	dcf1      	bgt.n	800bdb6 <__exponent+0x1c>
 800bdd2:	3130      	adds	r1, #48	@ 0x30
 800bdd4:	1e94      	subs	r4, r2, #2
 800bdd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bdda:	1c41      	adds	r1, r0, #1
 800bddc:	4623      	mov	r3, r4
 800bdde:	42ab      	cmp	r3, r5
 800bde0:	d30a      	bcc.n	800bdf8 <__exponent+0x5e>
 800bde2:	f10d 0309 	add.w	r3, sp, #9
 800bde6:	1a9b      	subs	r3, r3, r2
 800bde8:	42ac      	cmp	r4, r5
 800bdea:	bf88      	it	hi
 800bdec:	2300      	movhi	r3, #0
 800bdee:	3302      	adds	r3, #2
 800bdf0:	4403      	add	r3, r0
 800bdf2:	1a18      	subs	r0, r3, r0
 800bdf4:	b003      	add	sp, #12
 800bdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdf8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bdfc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be00:	e7ed      	b.n	800bdde <__exponent+0x44>
 800be02:	2330      	movs	r3, #48	@ 0x30
 800be04:	3130      	adds	r1, #48	@ 0x30
 800be06:	7083      	strb	r3, [r0, #2]
 800be08:	70c1      	strb	r1, [r0, #3]
 800be0a:	1d03      	adds	r3, r0, #4
 800be0c:	e7f1      	b.n	800bdf2 <__exponent+0x58>
	...

0800be10 <_printf_float>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	b08d      	sub	sp, #52	@ 0x34
 800be16:	460c      	mov	r4, r1
 800be18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be1c:	4616      	mov	r6, r2
 800be1e:	461f      	mov	r7, r3
 800be20:	4605      	mov	r5, r0
 800be22:	f000 fe13 	bl	800ca4c <_localeconv_r>
 800be26:	6803      	ldr	r3, [r0, #0]
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f4 fa20 	bl	8000270 <strlen>
 800be30:	2300      	movs	r3, #0
 800be32:	930a      	str	r3, [sp, #40]	@ 0x28
 800be34:	f8d8 3000 	ldr.w	r3, [r8]
 800be38:	9005      	str	r0, [sp, #20]
 800be3a:	3307      	adds	r3, #7
 800be3c:	f023 0307 	bic.w	r3, r3, #7
 800be40:	f103 0208 	add.w	r2, r3, #8
 800be44:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be48:	f8d4 b000 	ldr.w	fp, [r4]
 800be4c:	f8c8 2000 	str.w	r2, [r8]
 800be50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800be58:	9307      	str	r3, [sp, #28]
 800be5a:	f8cd 8018 	str.w	r8, [sp, #24]
 800be5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800be62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be66:	4b9c      	ldr	r3, [pc, #624]	@ (800c0d8 <_printf_float+0x2c8>)
 800be68:	f04f 32ff 	mov.w	r2, #4294967295
 800be6c:	f7f4 fe5e 	bl	8000b2c <__aeabi_dcmpun>
 800be70:	bb70      	cbnz	r0, 800bed0 <_printf_float+0xc0>
 800be72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be76:	4b98      	ldr	r3, [pc, #608]	@ (800c0d8 <_printf_float+0x2c8>)
 800be78:	f04f 32ff 	mov.w	r2, #4294967295
 800be7c:	f7f4 fe38 	bl	8000af0 <__aeabi_dcmple>
 800be80:	bb30      	cbnz	r0, 800bed0 <_printf_float+0xc0>
 800be82:	2200      	movs	r2, #0
 800be84:	2300      	movs	r3, #0
 800be86:	4640      	mov	r0, r8
 800be88:	4649      	mov	r1, r9
 800be8a:	f7f4 fe27 	bl	8000adc <__aeabi_dcmplt>
 800be8e:	b110      	cbz	r0, 800be96 <_printf_float+0x86>
 800be90:	232d      	movs	r3, #45	@ 0x2d
 800be92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be96:	4a91      	ldr	r2, [pc, #580]	@ (800c0dc <_printf_float+0x2cc>)
 800be98:	4b91      	ldr	r3, [pc, #580]	@ (800c0e0 <_printf_float+0x2d0>)
 800be9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800be9e:	bf8c      	ite	hi
 800bea0:	4690      	movhi	r8, r2
 800bea2:	4698      	movls	r8, r3
 800bea4:	2303      	movs	r3, #3
 800bea6:	6123      	str	r3, [r4, #16]
 800bea8:	f02b 0304 	bic.w	r3, fp, #4
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	9700      	str	r7, [sp, #0]
 800beb4:	4633      	mov	r3, r6
 800beb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800beb8:	4621      	mov	r1, r4
 800beba:	4628      	mov	r0, r5
 800bebc:	f000 f9d2 	bl	800c264 <_printf_common>
 800bec0:	3001      	adds	r0, #1
 800bec2:	f040 808d 	bne.w	800bfe0 <_printf_float+0x1d0>
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	b00d      	add	sp, #52	@ 0x34
 800becc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed0:	4642      	mov	r2, r8
 800bed2:	464b      	mov	r3, r9
 800bed4:	4640      	mov	r0, r8
 800bed6:	4649      	mov	r1, r9
 800bed8:	f7f4 fe28 	bl	8000b2c <__aeabi_dcmpun>
 800bedc:	b140      	cbz	r0, 800bef0 <_printf_float+0xe0>
 800bede:	464b      	mov	r3, r9
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bfbc      	itt	lt
 800bee4:	232d      	movlt	r3, #45	@ 0x2d
 800bee6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800beea:	4a7e      	ldr	r2, [pc, #504]	@ (800c0e4 <_printf_float+0x2d4>)
 800beec:	4b7e      	ldr	r3, [pc, #504]	@ (800c0e8 <_printf_float+0x2d8>)
 800beee:	e7d4      	b.n	800be9a <_printf_float+0x8a>
 800bef0:	6863      	ldr	r3, [r4, #4]
 800bef2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bef6:	9206      	str	r2, [sp, #24]
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	d13b      	bne.n	800bf74 <_printf_float+0x164>
 800befc:	2306      	movs	r3, #6
 800befe:	6063      	str	r3, [r4, #4]
 800bf00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bf04:	2300      	movs	r3, #0
 800bf06:	6022      	str	r2, [r4, #0]
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bf10:	ab09      	add	r3, sp, #36	@ 0x24
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	6861      	ldr	r1, [r4, #4]
 800bf16:	ec49 8b10 	vmov	d0, r8, r9
 800bf1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7ff fed6 	bl	800bcd0 <__cvt>
 800bf24:	9b06      	ldr	r3, [sp, #24]
 800bf26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf28:	2b47      	cmp	r3, #71	@ 0x47
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	d129      	bne.n	800bf82 <_printf_float+0x172>
 800bf2e:	1cc8      	adds	r0, r1, #3
 800bf30:	db02      	blt.n	800bf38 <_printf_float+0x128>
 800bf32:	6863      	ldr	r3, [r4, #4]
 800bf34:	4299      	cmp	r1, r3
 800bf36:	dd41      	ble.n	800bfbc <_printf_float+0x1ac>
 800bf38:	f1aa 0a02 	sub.w	sl, sl, #2
 800bf3c:	fa5f fa8a 	uxtb.w	sl, sl
 800bf40:	3901      	subs	r1, #1
 800bf42:	4652      	mov	r2, sl
 800bf44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf48:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf4a:	f7ff ff26 	bl	800bd9a <__exponent>
 800bf4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf50:	1813      	adds	r3, r2, r0
 800bf52:	2a01      	cmp	r2, #1
 800bf54:	4681      	mov	r9, r0
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	dc02      	bgt.n	800bf60 <_printf_float+0x150>
 800bf5a:	6822      	ldr	r2, [r4, #0]
 800bf5c:	07d2      	lsls	r2, r2, #31
 800bf5e:	d501      	bpl.n	800bf64 <_printf_float+0x154>
 800bf60:	3301      	adds	r3, #1
 800bf62:	6123      	str	r3, [r4, #16]
 800bf64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d0a2      	beq.n	800beb2 <_printf_float+0xa2>
 800bf6c:	232d      	movs	r3, #45	@ 0x2d
 800bf6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf72:	e79e      	b.n	800beb2 <_printf_float+0xa2>
 800bf74:	9a06      	ldr	r2, [sp, #24]
 800bf76:	2a47      	cmp	r2, #71	@ 0x47
 800bf78:	d1c2      	bne.n	800bf00 <_printf_float+0xf0>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1c0      	bne.n	800bf00 <_printf_float+0xf0>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e7bd      	b.n	800befe <_printf_float+0xee>
 800bf82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf86:	d9db      	bls.n	800bf40 <_printf_float+0x130>
 800bf88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bf8c:	d118      	bne.n	800bfc0 <_printf_float+0x1b0>
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	6863      	ldr	r3, [r4, #4]
 800bf92:	dd0b      	ble.n	800bfac <_printf_float+0x19c>
 800bf94:	6121      	str	r1, [r4, #16]
 800bf96:	b913      	cbnz	r3, 800bf9e <_printf_float+0x18e>
 800bf98:	6822      	ldr	r2, [r4, #0]
 800bf9a:	07d0      	lsls	r0, r2, #31
 800bf9c:	d502      	bpl.n	800bfa4 <_printf_float+0x194>
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	440b      	add	r3, r1
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfa6:	f04f 0900 	mov.w	r9, #0
 800bfaa:	e7db      	b.n	800bf64 <_printf_float+0x154>
 800bfac:	b913      	cbnz	r3, 800bfb4 <_printf_float+0x1a4>
 800bfae:	6822      	ldr	r2, [r4, #0]
 800bfb0:	07d2      	lsls	r2, r2, #31
 800bfb2:	d501      	bpl.n	800bfb8 <_printf_float+0x1a8>
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	e7f4      	b.n	800bfa2 <_printf_float+0x192>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e7f2      	b.n	800bfa2 <_printf_float+0x192>
 800bfbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bfc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfc2:	4299      	cmp	r1, r3
 800bfc4:	db05      	blt.n	800bfd2 <_printf_float+0x1c2>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	6121      	str	r1, [r4, #16]
 800bfca:	07d8      	lsls	r0, r3, #31
 800bfcc:	d5ea      	bpl.n	800bfa4 <_printf_float+0x194>
 800bfce:	1c4b      	adds	r3, r1, #1
 800bfd0:	e7e7      	b.n	800bfa2 <_printf_float+0x192>
 800bfd2:	2900      	cmp	r1, #0
 800bfd4:	bfd4      	ite	le
 800bfd6:	f1c1 0202 	rsble	r2, r1, #2
 800bfda:	2201      	movgt	r2, #1
 800bfdc:	4413      	add	r3, r2
 800bfde:	e7e0      	b.n	800bfa2 <_printf_float+0x192>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	055a      	lsls	r2, r3, #21
 800bfe4:	d407      	bmi.n	800bff6 <_printf_float+0x1e6>
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	4642      	mov	r2, r8
 800bfea:	4631      	mov	r1, r6
 800bfec:	4628      	mov	r0, r5
 800bfee:	47b8      	blx	r7
 800bff0:	3001      	adds	r0, #1
 800bff2:	d12b      	bne.n	800c04c <_printf_float+0x23c>
 800bff4:	e767      	b.n	800bec6 <_printf_float+0xb6>
 800bff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bffa:	f240 80dd 	bls.w	800c1b8 <_printf_float+0x3a8>
 800bffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c002:	2200      	movs	r2, #0
 800c004:	2300      	movs	r3, #0
 800c006:	f7f4 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d033      	beq.n	800c076 <_printf_float+0x266>
 800c00e:	4a37      	ldr	r2, [pc, #220]	@ (800c0ec <_printf_float+0x2dc>)
 800c010:	2301      	movs	r3, #1
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	f43f af54 	beq.w	800bec6 <_printf_float+0xb6>
 800c01e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c022:	4543      	cmp	r3, r8
 800c024:	db02      	blt.n	800c02c <_printf_float+0x21c>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	07d8      	lsls	r0, r3, #31
 800c02a:	d50f      	bpl.n	800c04c <_printf_float+0x23c>
 800c02c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f af45 	beq.w	800bec6 <_printf_float+0xb6>
 800c03c:	f04f 0900 	mov.w	r9, #0
 800c040:	f108 38ff 	add.w	r8, r8, #4294967295
 800c044:	f104 0a1a 	add.w	sl, r4, #26
 800c048:	45c8      	cmp	r8, r9
 800c04a:	dc09      	bgt.n	800c060 <_printf_float+0x250>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	079b      	lsls	r3, r3, #30
 800c050:	f100 8103 	bmi.w	800c25a <_printf_float+0x44a>
 800c054:	68e0      	ldr	r0, [r4, #12]
 800c056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c058:	4298      	cmp	r0, r3
 800c05a:	bfb8      	it	lt
 800c05c:	4618      	movlt	r0, r3
 800c05e:	e734      	b.n	800beca <_printf_float+0xba>
 800c060:	2301      	movs	r3, #1
 800c062:	4652      	mov	r2, sl
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	47b8      	blx	r7
 800c06a:	3001      	adds	r0, #1
 800c06c:	f43f af2b 	beq.w	800bec6 <_printf_float+0xb6>
 800c070:	f109 0901 	add.w	r9, r9, #1
 800c074:	e7e8      	b.n	800c048 <_printf_float+0x238>
 800c076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc39      	bgt.n	800c0f0 <_printf_float+0x2e0>
 800c07c:	4a1b      	ldr	r2, [pc, #108]	@ (800c0ec <_printf_float+0x2dc>)
 800c07e:	2301      	movs	r3, #1
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af1d 	beq.w	800bec6 <_printf_float+0xb6>
 800c08c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c090:	ea59 0303 	orrs.w	r3, r9, r3
 800c094:	d102      	bne.n	800c09c <_printf_float+0x28c>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	07d9      	lsls	r1, r3, #31
 800c09a:	d5d7      	bpl.n	800c04c <_printf_float+0x23c>
 800c09c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af0d 	beq.w	800bec6 <_printf_float+0xb6>
 800c0ac:	f04f 0a00 	mov.w	sl, #0
 800c0b0:	f104 0b1a 	add.w	fp, r4, #26
 800c0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b6:	425b      	negs	r3, r3
 800c0b8:	4553      	cmp	r3, sl
 800c0ba:	dc01      	bgt.n	800c0c0 <_printf_float+0x2b0>
 800c0bc:	464b      	mov	r3, r9
 800c0be:	e793      	b.n	800bfe8 <_printf_float+0x1d8>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	465a      	mov	r2, fp
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	f43f aefb 	beq.w	800bec6 <_printf_float+0xb6>
 800c0d0:	f10a 0a01 	add.w	sl, sl, #1
 800c0d4:	e7ee      	b.n	800c0b4 <_printf_float+0x2a4>
 800c0d6:	bf00      	nop
 800c0d8:	7fefffff 	.word	0x7fefffff
 800c0dc:	0800fb3c 	.word	0x0800fb3c
 800c0e0:	0800fb38 	.word	0x0800fb38
 800c0e4:	0800fb44 	.word	0x0800fb44
 800c0e8:	0800fb40 	.word	0x0800fb40
 800c0ec:	0800fb48 	.word	0x0800fb48
 800c0f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0f6:	4553      	cmp	r3, sl
 800c0f8:	bfa8      	it	ge
 800c0fa:	4653      	movge	r3, sl
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	4699      	mov	r9, r3
 800c100:	dc36      	bgt.n	800c170 <_printf_float+0x360>
 800c102:	f04f 0b00 	mov.w	fp, #0
 800c106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c10a:	f104 021a 	add.w	r2, r4, #26
 800c10e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c110:	9306      	str	r3, [sp, #24]
 800c112:	eba3 0309 	sub.w	r3, r3, r9
 800c116:	455b      	cmp	r3, fp
 800c118:	dc31      	bgt.n	800c17e <_printf_float+0x36e>
 800c11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c11c:	459a      	cmp	sl, r3
 800c11e:	dc3a      	bgt.n	800c196 <_printf_float+0x386>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	07da      	lsls	r2, r3, #31
 800c124:	d437      	bmi.n	800c196 <_printf_float+0x386>
 800c126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c128:	ebaa 0903 	sub.w	r9, sl, r3
 800c12c:	9b06      	ldr	r3, [sp, #24]
 800c12e:	ebaa 0303 	sub.w	r3, sl, r3
 800c132:	4599      	cmp	r9, r3
 800c134:	bfa8      	it	ge
 800c136:	4699      	movge	r9, r3
 800c138:	f1b9 0f00 	cmp.w	r9, #0
 800c13c:	dc33      	bgt.n	800c1a6 <_printf_float+0x396>
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c146:	f104 0b1a 	add.w	fp, r4, #26
 800c14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c14c:	ebaa 0303 	sub.w	r3, sl, r3
 800c150:	eba3 0309 	sub.w	r3, r3, r9
 800c154:	4543      	cmp	r3, r8
 800c156:	f77f af79 	ble.w	800c04c <_printf_float+0x23c>
 800c15a:	2301      	movs	r3, #1
 800c15c:	465a      	mov	r2, fp
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	f43f aeae 	beq.w	800bec6 <_printf_float+0xb6>
 800c16a:	f108 0801 	add.w	r8, r8, #1
 800c16e:	e7ec      	b.n	800c14a <_printf_float+0x33a>
 800c170:	4642      	mov	r2, r8
 800c172:	4631      	mov	r1, r6
 800c174:	4628      	mov	r0, r5
 800c176:	47b8      	blx	r7
 800c178:	3001      	adds	r0, #1
 800c17a:	d1c2      	bne.n	800c102 <_printf_float+0x2f2>
 800c17c:	e6a3      	b.n	800bec6 <_printf_float+0xb6>
 800c17e:	2301      	movs	r3, #1
 800c180:	4631      	mov	r1, r6
 800c182:	4628      	mov	r0, r5
 800c184:	9206      	str	r2, [sp, #24]
 800c186:	47b8      	blx	r7
 800c188:	3001      	adds	r0, #1
 800c18a:	f43f ae9c 	beq.w	800bec6 <_printf_float+0xb6>
 800c18e:	9a06      	ldr	r2, [sp, #24]
 800c190:	f10b 0b01 	add.w	fp, fp, #1
 800c194:	e7bb      	b.n	800c10e <_printf_float+0x2fe>
 800c196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d1c0      	bne.n	800c126 <_printf_float+0x316>
 800c1a4:	e68f      	b.n	800bec6 <_printf_float+0xb6>
 800c1a6:	9a06      	ldr	r2, [sp, #24]
 800c1a8:	464b      	mov	r3, r9
 800c1aa:	4442      	add	r2, r8
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47b8      	blx	r7
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d1c3      	bne.n	800c13e <_printf_float+0x32e>
 800c1b6:	e686      	b.n	800bec6 <_printf_float+0xb6>
 800c1b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1bc:	f1ba 0f01 	cmp.w	sl, #1
 800c1c0:	dc01      	bgt.n	800c1c6 <_printf_float+0x3b6>
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d536      	bpl.n	800c234 <_printf_float+0x424>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f43f ae78 	beq.w	800bec6 <_printf_float+0xb6>
 800c1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b8      	blx	r7
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	f43f ae70 	beq.w	800bec6 <_printf_float+0xb6>
 800c1e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1f2:	f7f4 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1f6:	b9c0      	cbnz	r0, 800c22a <_printf_float+0x41a>
 800c1f8:	4653      	mov	r3, sl
 800c1fa:	f108 0201 	add.w	r2, r8, #1
 800c1fe:	4631      	mov	r1, r6
 800c200:	4628      	mov	r0, r5
 800c202:	47b8      	blx	r7
 800c204:	3001      	adds	r0, #1
 800c206:	d10c      	bne.n	800c222 <_printf_float+0x412>
 800c208:	e65d      	b.n	800bec6 <_printf_float+0xb6>
 800c20a:	2301      	movs	r3, #1
 800c20c:	465a      	mov	r2, fp
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f ae56 	beq.w	800bec6 <_printf_float+0xb6>
 800c21a:	f108 0801 	add.w	r8, r8, #1
 800c21e:	45d0      	cmp	r8, sl
 800c220:	dbf3      	blt.n	800c20a <_printf_float+0x3fa>
 800c222:	464b      	mov	r3, r9
 800c224:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c228:	e6df      	b.n	800bfea <_printf_float+0x1da>
 800c22a:	f04f 0800 	mov.w	r8, #0
 800c22e:	f104 0b1a 	add.w	fp, r4, #26
 800c232:	e7f4      	b.n	800c21e <_printf_float+0x40e>
 800c234:	2301      	movs	r3, #1
 800c236:	4642      	mov	r2, r8
 800c238:	e7e1      	b.n	800c1fe <_printf_float+0x3ee>
 800c23a:	2301      	movs	r3, #1
 800c23c:	464a      	mov	r2, r9
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	f43f ae3e 	beq.w	800bec6 <_printf_float+0xb6>
 800c24a:	f108 0801 	add.w	r8, r8, #1
 800c24e:	68e3      	ldr	r3, [r4, #12]
 800c250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c252:	1a5b      	subs	r3, r3, r1
 800c254:	4543      	cmp	r3, r8
 800c256:	dcf0      	bgt.n	800c23a <_printf_float+0x42a>
 800c258:	e6fc      	b.n	800c054 <_printf_float+0x244>
 800c25a:	f04f 0800 	mov.w	r8, #0
 800c25e:	f104 0919 	add.w	r9, r4, #25
 800c262:	e7f4      	b.n	800c24e <_printf_float+0x43e>

0800c264 <_printf_common>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	4616      	mov	r6, r2
 800c26a:	4698      	mov	r8, r3
 800c26c:	688a      	ldr	r2, [r1, #8]
 800c26e:	690b      	ldr	r3, [r1, #16]
 800c270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c274:	4293      	cmp	r3, r2
 800c276:	bfb8      	it	lt
 800c278:	4613      	movlt	r3, r2
 800c27a:	6033      	str	r3, [r6, #0]
 800c27c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c280:	4607      	mov	r7, r0
 800c282:	460c      	mov	r4, r1
 800c284:	b10a      	cbz	r2, 800c28a <_printf_common+0x26>
 800c286:	3301      	adds	r3, #1
 800c288:	6033      	str	r3, [r6, #0]
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	0699      	lsls	r1, r3, #26
 800c28e:	bf42      	ittt	mi
 800c290:	6833      	ldrmi	r3, [r6, #0]
 800c292:	3302      	addmi	r3, #2
 800c294:	6033      	strmi	r3, [r6, #0]
 800c296:	6825      	ldr	r5, [r4, #0]
 800c298:	f015 0506 	ands.w	r5, r5, #6
 800c29c:	d106      	bne.n	800c2ac <_printf_common+0x48>
 800c29e:	f104 0a19 	add.w	sl, r4, #25
 800c2a2:	68e3      	ldr	r3, [r4, #12]
 800c2a4:	6832      	ldr	r2, [r6, #0]
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	42ab      	cmp	r3, r5
 800c2aa:	dc26      	bgt.n	800c2fa <_printf_common+0x96>
 800c2ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	3b00      	subs	r3, #0
 800c2b4:	bf18      	it	ne
 800c2b6:	2301      	movne	r3, #1
 800c2b8:	0692      	lsls	r2, r2, #26
 800c2ba:	d42b      	bmi.n	800c314 <_printf_common+0xb0>
 800c2bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2c0:	4641      	mov	r1, r8
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	47c8      	blx	r9
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d01e      	beq.n	800c308 <_printf_common+0xa4>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	6922      	ldr	r2, [r4, #16]
 800c2ce:	f003 0306 	and.w	r3, r3, #6
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	bf02      	ittt	eq
 800c2d6:	68e5      	ldreq	r5, [r4, #12]
 800c2d8:	6833      	ldreq	r3, [r6, #0]
 800c2da:	1aed      	subeq	r5, r5, r3
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	bf0c      	ite	eq
 800c2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2e4:	2500      	movne	r5, #0
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	bfc4      	itt	gt
 800c2ea:	1a9b      	subgt	r3, r3, r2
 800c2ec:	18ed      	addgt	r5, r5, r3
 800c2ee:	2600      	movs	r6, #0
 800c2f0:	341a      	adds	r4, #26
 800c2f2:	42b5      	cmp	r5, r6
 800c2f4:	d11a      	bne.n	800c32c <_printf_common+0xc8>
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	e008      	b.n	800c30c <_printf_common+0xa8>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	4641      	mov	r1, r8
 800c300:	4638      	mov	r0, r7
 800c302:	47c8      	blx	r9
 800c304:	3001      	adds	r0, #1
 800c306:	d103      	bne.n	800c310 <_printf_common+0xac>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c310:	3501      	adds	r5, #1
 800c312:	e7c6      	b.n	800c2a2 <_printf_common+0x3e>
 800c314:	18e1      	adds	r1, r4, r3
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	2030      	movs	r0, #48	@ 0x30
 800c31a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c31e:	4422      	add	r2, r4
 800c320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c328:	3302      	adds	r3, #2
 800c32a:	e7c7      	b.n	800c2bc <_printf_common+0x58>
 800c32c:	2301      	movs	r3, #1
 800c32e:	4622      	mov	r2, r4
 800c330:	4641      	mov	r1, r8
 800c332:	4638      	mov	r0, r7
 800c334:	47c8      	blx	r9
 800c336:	3001      	adds	r0, #1
 800c338:	d0e6      	beq.n	800c308 <_printf_common+0xa4>
 800c33a:	3601      	adds	r6, #1
 800c33c:	e7d9      	b.n	800c2f2 <_printf_common+0x8e>
	...

0800c340 <_printf_i>:
 800c340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c344:	7e0f      	ldrb	r7, [r1, #24]
 800c346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c348:	2f78      	cmp	r7, #120	@ 0x78
 800c34a:	4691      	mov	r9, r2
 800c34c:	4680      	mov	r8, r0
 800c34e:	460c      	mov	r4, r1
 800c350:	469a      	mov	sl, r3
 800c352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c356:	d807      	bhi.n	800c368 <_printf_i+0x28>
 800c358:	2f62      	cmp	r7, #98	@ 0x62
 800c35a:	d80a      	bhi.n	800c372 <_printf_i+0x32>
 800c35c:	2f00      	cmp	r7, #0
 800c35e:	f000 80d1 	beq.w	800c504 <_printf_i+0x1c4>
 800c362:	2f58      	cmp	r7, #88	@ 0x58
 800c364:	f000 80b8 	beq.w	800c4d8 <_printf_i+0x198>
 800c368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c36c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c370:	e03a      	b.n	800c3e8 <_printf_i+0xa8>
 800c372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c376:	2b15      	cmp	r3, #21
 800c378:	d8f6      	bhi.n	800c368 <_printf_i+0x28>
 800c37a:	a101      	add	r1, pc, #4	@ (adr r1, 800c380 <_printf_i+0x40>)
 800c37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c380:	0800c3d9 	.word	0x0800c3d9
 800c384:	0800c3ed 	.word	0x0800c3ed
 800c388:	0800c369 	.word	0x0800c369
 800c38c:	0800c369 	.word	0x0800c369
 800c390:	0800c369 	.word	0x0800c369
 800c394:	0800c369 	.word	0x0800c369
 800c398:	0800c3ed 	.word	0x0800c3ed
 800c39c:	0800c369 	.word	0x0800c369
 800c3a0:	0800c369 	.word	0x0800c369
 800c3a4:	0800c369 	.word	0x0800c369
 800c3a8:	0800c369 	.word	0x0800c369
 800c3ac:	0800c4eb 	.word	0x0800c4eb
 800c3b0:	0800c417 	.word	0x0800c417
 800c3b4:	0800c4a5 	.word	0x0800c4a5
 800c3b8:	0800c369 	.word	0x0800c369
 800c3bc:	0800c369 	.word	0x0800c369
 800c3c0:	0800c50d 	.word	0x0800c50d
 800c3c4:	0800c369 	.word	0x0800c369
 800c3c8:	0800c417 	.word	0x0800c417
 800c3cc:	0800c369 	.word	0x0800c369
 800c3d0:	0800c369 	.word	0x0800c369
 800c3d4:	0800c4ad 	.word	0x0800c4ad
 800c3d8:	6833      	ldr	r3, [r6, #0]
 800c3da:	1d1a      	adds	r2, r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6032      	str	r2, [r6, #0]
 800c3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e09c      	b.n	800c526 <_printf_i+0x1e6>
 800c3ec:	6833      	ldr	r3, [r6, #0]
 800c3ee:	6820      	ldr	r0, [r4, #0]
 800c3f0:	1d19      	adds	r1, r3, #4
 800c3f2:	6031      	str	r1, [r6, #0]
 800c3f4:	0606      	lsls	r6, r0, #24
 800c3f6:	d501      	bpl.n	800c3fc <_printf_i+0xbc>
 800c3f8:	681d      	ldr	r5, [r3, #0]
 800c3fa:	e003      	b.n	800c404 <_printf_i+0xc4>
 800c3fc:	0645      	lsls	r5, r0, #25
 800c3fe:	d5fb      	bpl.n	800c3f8 <_printf_i+0xb8>
 800c400:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c404:	2d00      	cmp	r5, #0
 800c406:	da03      	bge.n	800c410 <_printf_i+0xd0>
 800c408:	232d      	movs	r3, #45	@ 0x2d
 800c40a:	426d      	negs	r5, r5
 800c40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c410:	4858      	ldr	r0, [pc, #352]	@ (800c574 <_printf_i+0x234>)
 800c412:	230a      	movs	r3, #10
 800c414:	e011      	b.n	800c43a <_printf_i+0xfa>
 800c416:	6821      	ldr	r1, [r4, #0]
 800c418:	6833      	ldr	r3, [r6, #0]
 800c41a:	0608      	lsls	r0, r1, #24
 800c41c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c420:	d402      	bmi.n	800c428 <_printf_i+0xe8>
 800c422:	0649      	lsls	r1, r1, #25
 800c424:	bf48      	it	mi
 800c426:	b2ad      	uxthmi	r5, r5
 800c428:	2f6f      	cmp	r7, #111	@ 0x6f
 800c42a:	4852      	ldr	r0, [pc, #328]	@ (800c574 <_printf_i+0x234>)
 800c42c:	6033      	str	r3, [r6, #0]
 800c42e:	bf14      	ite	ne
 800c430:	230a      	movne	r3, #10
 800c432:	2308      	moveq	r3, #8
 800c434:	2100      	movs	r1, #0
 800c436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c43a:	6866      	ldr	r6, [r4, #4]
 800c43c:	60a6      	str	r6, [r4, #8]
 800c43e:	2e00      	cmp	r6, #0
 800c440:	db05      	blt.n	800c44e <_printf_i+0x10e>
 800c442:	6821      	ldr	r1, [r4, #0]
 800c444:	432e      	orrs	r6, r5
 800c446:	f021 0104 	bic.w	r1, r1, #4
 800c44a:	6021      	str	r1, [r4, #0]
 800c44c:	d04b      	beq.n	800c4e6 <_printf_i+0x1a6>
 800c44e:	4616      	mov	r6, r2
 800c450:	fbb5 f1f3 	udiv	r1, r5, r3
 800c454:	fb03 5711 	mls	r7, r3, r1, r5
 800c458:	5dc7      	ldrb	r7, [r0, r7]
 800c45a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c45e:	462f      	mov	r7, r5
 800c460:	42bb      	cmp	r3, r7
 800c462:	460d      	mov	r5, r1
 800c464:	d9f4      	bls.n	800c450 <_printf_i+0x110>
 800c466:	2b08      	cmp	r3, #8
 800c468:	d10b      	bne.n	800c482 <_printf_i+0x142>
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	07df      	lsls	r7, r3, #31
 800c46e:	d508      	bpl.n	800c482 <_printf_i+0x142>
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	6861      	ldr	r1, [r4, #4]
 800c474:	4299      	cmp	r1, r3
 800c476:	bfde      	ittt	le
 800c478:	2330      	movle	r3, #48	@ 0x30
 800c47a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c47e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c482:	1b92      	subs	r2, r2, r6
 800c484:	6122      	str	r2, [r4, #16]
 800c486:	f8cd a000 	str.w	sl, [sp]
 800c48a:	464b      	mov	r3, r9
 800c48c:	aa03      	add	r2, sp, #12
 800c48e:	4621      	mov	r1, r4
 800c490:	4640      	mov	r0, r8
 800c492:	f7ff fee7 	bl	800c264 <_printf_common>
 800c496:	3001      	adds	r0, #1
 800c498:	d14a      	bne.n	800c530 <_printf_i+0x1f0>
 800c49a:	f04f 30ff 	mov.w	r0, #4294967295
 800c49e:	b004      	add	sp, #16
 800c4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	f043 0320 	orr.w	r3, r3, #32
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	4832      	ldr	r0, [pc, #200]	@ (800c578 <_printf_i+0x238>)
 800c4ae:	2778      	movs	r7, #120	@ 0x78
 800c4b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	6831      	ldr	r1, [r6, #0]
 800c4b8:	061f      	lsls	r7, r3, #24
 800c4ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4be:	d402      	bmi.n	800c4c6 <_printf_i+0x186>
 800c4c0:	065f      	lsls	r7, r3, #25
 800c4c2:	bf48      	it	mi
 800c4c4:	b2ad      	uxthmi	r5, r5
 800c4c6:	6031      	str	r1, [r6, #0]
 800c4c8:	07d9      	lsls	r1, r3, #31
 800c4ca:	bf44      	itt	mi
 800c4cc:	f043 0320 	orrmi.w	r3, r3, #32
 800c4d0:	6023      	strmi	r3, [r4, #0]
 800c4d2:	b11d      	cbz	r5, 800c4dc <_printf_i+0x19c>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	e7ad      	b.n	800c434 <_printf_i+0xf4>
 800c4d8:	4826      	ldr	r0, [pc, #152]	@ (800c574 <_printf_i+0x234>)
 800c4da:	e7e9      	b.n	800c4b0 <_printf_i+0x170>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	f023 0320 	bic.w	r3, r3, #32
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	e7f6      	b.n	800c4d4 <_printf_i+0x194>
 800c4e6:	4616      	mov	r6, r2
 800c4e8:	e7bd      	b.n	800c466 <_printf_i+0x126>
 800c4ea:	6833      	ldr	r3, [r6, #0]
 800c4ec:	6825      	ldr	r5, [r4, #0]
 800c4ee:	6961      	ldr	r1, [r4, #20]
 800c4f0:	1d18      	adds	r0, r3, #4
 800c4f2:	6030      	str	r0, [r6, #0]
 800c4f4:	062e      	lsls	r6, r5, #24
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	d501      	bpl.n	800c4fe <_printf_i+0x1be>
 800c4fa:	6019      	str	r1, [r3, #0]
 800c4fc:	e002      	b.n	800c504 <_printf_i+0x1c4>
 800c4fe:	0668      	lsls	r0, r5, #25
 800c500:	d5fb      	bpl.n	800c4fa <_printf_i+0x1ba>
 800c502:	8019      	strh	r1, [r3, #0]
 800c504:	2300      	movs	r3, #0
 800c506:	6123      	str	r3, [r4, #16]
 800c508:	4616      	mov	r6, r2
 800c50a:	e7bc      	b.n	800c486 <_printf_i+0x146>
 800c50c:	6833      	ldr	r3, [r6, #0]
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	6032      	str	r2, [r6, #0]
 800c512:	681e      	ldr	r6, [r3, #0]
 800c514:	6862      	ldr	r2, [r4, #4]
 800c516:	2100      	movs	r1, #0
 800c518:	4630      	mov	r0, r6
 800c51a:	f7f3 fe59 	bl	80001d0 <memchr>
 800c51e:	b108      	cbz	r0, 800c524 <_printf_i+0x1e4>
 800c520:	1b80      	subs	r0, r0, r6
 800c522:	6060      	str	r0, [r4, #4]
 800c524:	6863      	ldr	r3, [r4, #4]
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	2300      	movs	r3, #0
 800c52a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c52e:	e7aa      	b.n	800c486 <_printf_i+0x146>
 800c530:	6923      	ldr	r3, [r4, #16]
 800c532:	4632      	mov	r2, r6
 800c534:	4649      	mov	r1, r9
 800c536:	4640      	mov	r0, r8
 800c538:	47d0      	blx	sl
 800c53a:	3001      	adds	r0, #1
 800c53c:	d0ad      	beq.n	800c49a <_printf_i+0x15a>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	079b      	lsls	r3, r3, #30
 800c542:	d413      	bmi.n	800c56c <_printf_i+0x22c>
 800c544:	68e0      	ldr	r0, [r4, #12]
 800c546:	9b03      	ldr	r3, [sp, #12]
 800c548:	4298      	cmp	r0, r3
 800c54a:	bfb8      	it	lt
 800c54c:	4618      	movlt	r0, r3
 800c54e:	e7a6      	b.n	800c49e <_printf_i+0x15e>
 800c550:	2301      	movs	r3, #1
 800c552:	4632      	mov	r2, r6
 800c554:	4649      	mov	r1, r9
 800c556:	4640      	mov	r0, r8
 800c558:	47d0      	blx	sl
 800c55a:	3001      	adds	r0, #1
 800c55c:	d09d      	beq.n	800c49a <_printf_i+0x15a>
 800c55e:	3501      	adds	r5, #1
 800c560:	68e3      	ldr	r3, [r4, #12]
 800c562:	9903      	ldr	r1, [sp, #12]
 800c564:	1a5b      	subs	r3, r3, r1
 800c566:	42ab      	cmp	r3, r5
 800c568:	dcf2      	bgt.n	800c550 <_printf_i+0x210>
 800c56a:	e7eb      	b.n	800c544 <_printf_i+0x204>
 800c56c:	2500      	movs	r5, #0
 800c56e:	f104 0619 	add.w	r6, r4, #25
 800c572:	e7f5      	b.n	800c560 <_printf_i+0x220>
 800c574:	0800fb4a 	.word	0x0800fb4a
 800c578:	0800fb5b 	.word	0x0800fb5b

0800c57c <std>:
 800c57c:	2300      	movs	r3, #0
 800c57e:	b510      	push	{r4, lr}
 800c580:	4604      	mov	r4, r0
 800c582:	e9c0 3300 	strd	r3, r3, [r0]
 800c586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c58a:	6083      	str	r3, [r0, #8]
 800c58c:	8181      	strh	r1, [r0, #12]
 800c58e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c590:	81c2      	strh	r2, [r0, #14]
 800c592:	6183      	str	r3, [r0, #24]
 800c594:	4619      	mov	r1, r3
 800c596:	2208      	movs	r2, #8
 800c598:	305c      	adds	r0, #92	@ 0x5c
 800c59a:	f000 fa4f 	bl	800ca3c <memset>
 800c59e:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <std+0x58>)
 800c5a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d8 <std+0x5c>)
 800c5a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5dc <std+0x60>)
 800c5a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <std+0x64>)
 800c5ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <std+0x68>)
 800c5b0:	6224      	str	r4, [r4, #32]
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	d006      	beq.n	800c5c4 <std+0x48>
 800c5b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5ba:	4294      	cmp	r4, r2
 800c5bc:	d002      	beq.n	800c5c4 <std+0x48>
 800c5be:	33d0      	adds	r3, #208	@ 0xd0
 800c5c0:	429c      	cmp	r4, r3
 800c5c2:	d105      	bne.n	800c5d0 <std+0x54>
 800c5c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5cc:	f000 bab2 	b.w	800cb34 <__retarget_lock_init_recursive>
 800c5d0:	bd10      	pop	{r4, pc}
 800c5d2:	bf00      	nop
 800c5d4:	0800c86d 	.word	0x0800c86d
 800c5d8:	0800c88f 	.word	0x0800c88f
 800c5dc:	0800c8c7 	.word	0x0800c8c7
 800c5e0:	0800c8eb 	.word	0x0800c8eb
 800c5e4:	200017d8 	.word	0x200017d8

0800c5e8 <stdio_exit_handler>:
 800c5e8:	4a02      	ldr	r2, [pc, #8]	@ (800c5f4 <stdio_exit_handler+0xc>)
 800c5ea:	4903      	ldr	r1, [pc, #12]	@ (800c5f8 <stdio_exit_handler+0x10>)
 800c5ec:	4803      	ldr	r0, [pc, #12]	@ (800c5fc <stdio_exit_handler+0x14>)
 800c5ee:	f000 b869 	b.w	800c6c4 <_fwalk_sglue>
 800c5f2:	bf00      	nop
 800c5f4:	20000134 	.word	0x20000134
 800c5f8:	0800e739 	.word	0x0800e739
 800c5fc:	20000144 	.word	0x20000144

0800c600 <cleanup_stdio>:
 800c600:	6841      	ldr	r1, [r0, #4]
 800c602:	4b0c      	ldr	r3, [pc, #48]	@ (800c634 <cleanup_stdio+0x34>)
 800c604:	4299      	cmp	r1, r3
 800c606:	b510      	push	{r4, lr}
 800c608:	4604      	mov	r4, r0
 800c60a:	d001      	beq.n	800c610 <cleanup_stdio+0x10>
 800c60c:	f002 f894 	bl	800e738 <_fflush_r>
 800c610:	68a1      	ldr	r1, [r4, #8]
 800c612:	4b09      	ldr	r3, [pc, #36]	@ (800c638 <cleanup_stdio+0x38>)
 800c614:	4299      	cmp	r1, r3
 800c616:	d002      	beq.n	800c61e <cleanup_stdio+0x1e>
 800c618:	4620      	mov	r0, r4
 800c61a:	f002 f88d 	bl	800e738 <_fflush_r>
 800c61e:	68e1      	ldr	r1, [r4, #12]
 800c620:	4b06      	ldr	r3, [pc, #24]	@ (800c63c <cleanup_stdio+0x3c>)
 800c622:	4299      	cmp	r1, r3
 800c624:	d004      	beq.n	800c630 <cleanup_stdio+0x30>
 800c626:	4620      	mov	r0, r4
 800c628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c62c:	f002 b884 	b.w	800e738 <_fflush_r>
 800c630:	bd10      	pop	{r4, pc}
 800c632:	bf00      	nop
 800c634:	200017d8 	.word	0x200017d8
 800c638:	20001840 	.word	0x20001840
 800c63c:	200018a8 	.word	0x200018a8

0800c640 <global_stdio_init.part.0>:
 800c640:	b510      	push	{r4, lr}
 800c642:	4b0b      	ldr	r3, [pc, #44]	@ (800c670 <global_stdio_init.part.0+0x30>)
 800c644:	4c0b      	ldr	r4, [pc, #44]	@ (800c674 <global_stdio_init.part.0+0x34>)
 800c646:	4a0c      	ldr	r2, [pc, #48]	@ (800c678 <global_stdio_init.part.0+0x38>)
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	4620      	mov	r0, r4
 800c64c:	2200      	movs	r2, #0
 800c64e:	2104      	movs	r1, #4
 800c650:	f7ff ff94 	bl	800c57c <std>
 800c654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c658:	2201      	movs	r2, #1
 800c65a:	2109      	movs	r1, #9
 800c65c:	f7ff ff8e 	bl	800c57c <std>
 800c660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c664:	2202      	movs	r2, #2
 800c666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c66a:	2112      	movs	r1, #18
 800c66c:	f7ff bf86 	b.w	800c57c <std>
 800c670:	20001910 	.word	0x20001910
 800c674:	200017d8 	.word	0x200017d8
 800c678:	0800c5e9 	.word	0x0800c5e9

0800c67c <__sfp_lock_acquire>:
 800c67c:	4801      	ldr	r0, [pc, #4]	@ (800c684 <__sfp_lock_acquire+0x8>)
 800c67e:	f000 ba5a 	b.w	800cb36 <__retarget_lock_acquire_recursive>
 800c682:	bf00      	nop
 800c684:	20001919 	.word	0x20001919

0800c688 <__sfp_lock_release>:
 800c688:	4801      	ldr	r0, [pc, #4]	@ (800c690 <__sfp_lock_release+0x8>)
 800c68a:	f000 ba55 	b.w	800cb38 <__retarget_lock_release_recursive>
 800c68e:	bf00      	nop
 800c690:	20001919 	.word	0x20001919

0800c694 <__sinit>:
 800c694:	b510      	push	{r4, lr}
 800c696:	4604      	mov	r4, r0
 800c698:	f7ff fff0 	bl	800c67c <__sfp_lock_acquire>
 800c69c:	6a23      	ldr	r3, [r4, #32]
 800c69e:	b11b      	cbz	r3, 800c6a8 <__sinit+0x14>
 800c6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a4:	f7ff bff0 	b.w	800c688 <__sfp_lock_release>
 800c6a8:	4b04      	ldr	r3, [pc, #16]	@ (800c6bc <__sinit+0x28>)
 800c6aa:	6223      	str	r3, [r4, #32]
 800c6ac:	4b04      	ldr	r3, [pc, #16]	@ (800c6c0 <__sinit+0x2c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1f5      	bne.n	800c6a0 <__sinit+0xc>
 800c6b4:	f7ff ffc4 	bl	800c640 <global_stdio_init.part.0>
 800c6b8:	e7f2      	b.n	800c6a0 <__sinit+0xc>
 800c6ba:	bf00      	nop
 800c6bc:	0800c601 	.word	0x0800c601
 800c6c0:	20001910 	.word	0x20001910

0800c6c4 <_fwalk_sglue>:
 800c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	4688      	mov	r8, r1
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c6d8:	d505      	bpl.n	800c6e6 <_fwalk_sglue+0x22>
 800c6da:	6824      	ldr	r4, [r4, #0]
 800c6dc:	2c00      	cmp	r4, #0
 800c6de:	d1f7      	bne.n	800c6d0 <_fwalk_sglue+0xc>
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d907      	bls.n	800c6fc <_fwalk_sglue+0x38>
 800c6ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	d003      	beq.n	800c6fc <_fwalk_sglue+0x38>
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	47c0      	blx	r8
 800c6fa:	4306      	orrs	r6, r0
 800c6fc:	3568      	adds	r5, #104	@ 0x68
 800c6fe:	e7e9      	b.n	800c6d4 <_fwalk_sglue+0x10>

0800c700 <_puts_r>:
 800c700:	6a03      	ldr	r3, [r0, #32]
 800c702:	b570      	push	{r4, r5, r6, lr}
 800c704:	6884      	ldr	r4, [r0, #8]
 800c706:	4605      	mov	r5, r0
 800c708:	460e      	mov	r6, r1
 800c70a:	b90b      	cbnz	r3, 800c710 <_puts_r+0x10>
 800c70c:	f7ff ffc2 	bl	800c694 <__sinit>
 800c710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c712:	07db      	lsls	r3, r3, #31
 800c714:	d405      	bmi.n	800c722 <_puts_r+0x22>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	0598      	lsls	r0, r3, #22
 800c71a:	d402      	bmi.n	800c722 <_puts_r+0x22>
 800c71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c71e:	f000 fa0a 	bl	800cb36 <__retarget_lock_acquire_recursive>
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	0719      	lsls	r1, r3, #28
 800c726:	d502      	bpl.n	800c72e <_puts_r+0x2e>
 800c728:	6923      	ldr	r3, [r4, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d135      	bne.n	800c79a <_puts_r+0x9a>
 800c72e:	4621      	mov	r1, r4
 800c730:	4628      	mov	r0, r5
 800c732:	f000 f91d 	bl	800c970 <__swsetup_r>
 800c736:	b380      	cbz	r0, 800c79a <_puts_r+0x9a>
 800c738:	f04f 35ff 	mov.w	r5, #4294967295
 800c73c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c73e:	07da      	lsls	r2, r3, #31
 800c740:	d405      	bmi.n	800c74e <_puts_r+0x4e>
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	059b      	lsls	r3, r3, #22
 800c746:	d402      	bmi.n	800c74e <_puts_r+0x4e>
 800c748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c74a:	f000 f9f5 	bl	800cb38 <__retarget_lock_release_recursive>
 800c74e:	4628      	mov	r0, r5
 800c750:	bd70      	pop	{r4, r5, r6, pc}
 800c752:	2b00      	cmp	r3, #0
 800c754:	da04      	bge.n	800c760 <_puts_r+0x60>
 800c756:	69a2      	ldr	r2, [r4, #24]
 800c758:	429a      	cmp	r2, r3
 800c75a:	dc17      	bgt.n	800c78c <_puts_r+0x8c>
 800c75c:	290a      	cmp	r1, #10
 800c75e:	d015      	beq.n	800c78c <_puts_r+0x8c>
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	1c5a      	adds	r2, r3, #1
 800c764:	6022      	str	r2, [r4, #0]
 800c766:	7019      	strb	r1, [r3, #0]
 800c768:	68a3      	ldr	r3, [r4, #8]
 800c76a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c76e:	3b01      	subs	r3, #1
 800c770:	60a3      	str	r3, [r4, #8]
 800c772:	2900      	cmp	r1, #0
 800c774:	d1ed      	bne.n	800c752 <_puts_r+0x52>
 800c776:	2b00      	cmp	r3, #0
 800c778:	da11      	bge.n	800c79e <_puts_r+0x9e>
 800c77a:	4622      	mov	r2, r4
 800c77c:	210a      	movs	r1, #10
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 f8b7 	bl	800c8f2 <__swbuf_r>
 800c784:	3001      	adds	r0, #1
 800c786:	d0d7      	beq.n	800c738 <_puts_r+0x38>
 800c788:	250a      	movs	r5, #10
 800c78a:	e7d7      	b.n	800c73c <_puts_r+0x3c>
 800c78c:	4622      	mov	r2, r4
 800c78e:	4628      	mov	r0, r5
 800c790:	f000 f8af 	bl	800c8f2 <__swbuf_r>
 800c794:	3001      	adds	r0, #1
 800c796:	d1e7      	bne.n	800c768 <_puts_r+0x68>
 800c798:	e7ce      	b.n	800c738 <_puts_r+0x38>
 800c79a:	3e01      	subs	r6, #1
 800c79c:	e7e4      	b.n	800c768 <_puts_r+0x68>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	6022      	str	r2, [r4, #0]
 800c7a4:	220a      	movs	r2, #10
 800c7a6:	701a      	strb	r2, [r3, #0]
 800c7a8:	e7ee      	b.n	800c788 <_puts_r+0x88>
	...

0800c7ac <puts>:
 800c7ac:	4b02      	ldr	r3, [pc, #8]	@ (800c7b8 <puts+0xc>)
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	6818      	ldr	r0, [r3, #0]
 800c7b2:	f7ff bfa5 	b.w	800c700 <_puts_r>
 800c7b6:	bf00      	nop
 800c7b8:	20000140 	.word	0x20000140

0800c7bc <sniprintf>:
 800c7bc:	b40c      	push	{r2, r3}
 800c7be:	b530      	push	{r4, r5, lr}
 800c7c0:	4b18      	ldr	r3, [pc, #96]	@ (800c824 <sniprintf+0x68>)
 800c7c2:	1e0c      	subs	r4, r1, #0
 800c7c4:	681d      	ldr	r5, [r3, #0]
 800c7c6:	b09d      	sub	sp, #116	@ 0x74
 800c7c8:	da08      	bge.n	800c7dc <sniprintf+0x20>
 800c7ca:	238b      	movs	r3, #139	@ 0x8b
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d2:	b01d      	add	sp, #116	@ 0x74
 800c7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7d8:	b002      	add	sp, #8
 800c7da:	4770      	bx	lr
 800c7dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c7e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c7e4:	f04f 0300 	mov.w	r3, #0
 800c7e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c7ea:	bf14      	ite	ne
 800c7ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c7f0:	4623      	moveq	r3, r4
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	9307      	str	r3, [sp, #28]
 800c7f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c7fa:	9002      	str	r0, [sp, #8]
 800c7fc:	9006      	str	r0, [sp, #24]
 800c7fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c802:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c804:	ab21      	add	r3, sp, #132	@ 0x84
 800c806:	a902      	add	r1, sp, #8
 800c808:	4628      	mov	r0, r5
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	f001 fcd2 	bl	800e1b4 <_svfiprintf_r>
 800c810:	1c43      	adds	r3, r0, #1
 800c812:	bfbc      	itt	lt
 800c814:	238b      	movlt	r3, #139	@ 0x8b
 800c816:	602b      	strlt	r3, [r5, #0]
 800c818:	2c00      	cmp	r4, #0
 800c81a:	d0da      	beq.n	800c7d2 <sniprintf+0x16>
 800c81c:	9b02      	ldr	r3, [sp, #8]
 800c81e:	2200      	movs	r2, #0
 800c820:	701a      	strb	r2, [r3, #0]
 800c822:	e7d6      	b.n	800c7d2 <sniprintf+0x16>
 800c824:	20000140 	.word	0x20000140

0800c828 <siprintf>:
 800c828:	b40e      	push	{r1, r2, r3}
 800c82a:	b510      	push	{r4, lr}
 800c82c:	b09d      	sub	sp, #116	@ 0x74
 800c82e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c830:	9002      	str	r0, [sp, #8]
 800c832:	9006      	str	r0, [sp, #24]
 800c834:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c838:	480a      	ldr	r0, [pc, #40]	@ (800c864 <siprintf+0x3c>)
 800c83a:	9107      	str	r1, [sp, #28]
 800c83c:	9104      	str	r1, [sp, #16]
 800c83e:	490a      	ldr	r1, [pc, #40]	@ (800c868 <siprintf+0x40>)
 800c840:	f853 2b04 	ldr.w	r2, [r3], #4
 800c844:	9105      	str	r1, [sp, #20]
 800c846:	2400      	movs	r4, #0
 800c848:	a902      	add	r1, sp, #8
 800c84a:	6800      	ldr	r0, [r0, #0]
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c850:	f001 fcb0 	bl	800e1b4 <_svfiprintf_r>
 800c854:	9b02      	ldr	r3, [sp, #8]
 800c856:	701c      	strb	r4, [r3, #0]
 800c858:	b01d      	add	sp, #116	@ 0x74
 800c85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c85e:	b003      	add	sp, #12
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20000140 	.word	0x20000140
 800c868:	ffff0208 	.word	0xffff0208

0800c86c <__sread>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c874:	f000 f910 	bl	800ca98 <_read_r>
 800c878:	2800      	cmp	r0, #0
 800c87a:	bfab      	itete	ge
 800c87c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c87e:	89a3      	ldrhlt	r3, [r4, #12]
 800c880:	181b      	addge	r3, r3, r0
 800c882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c886:	bfac      	ite	ge
 800c888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c88a:	81a3      	strhlt	r3, [r4, #12]
 800c88c:	bd10      	pop	{r4, pc}

0800c88e <__swrite>:
 800c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c892:	461f      	mov	r7, r3
 800c894:	898b      	ldrh	r3, [r1, #12]
 800c896:	05db      	lsls	r3, r3, #23
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	4616      	mov	r6, r2
 800c89e:	d505      	bpl.n	800c8ac <__swrite+0x1e>
 800c8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f000 f8e4 	bl	800ca74 <_lseek_r>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	4632      	mov	r2, r6
 800c8ba:	463b      	mov	r3, r7
 800c8bc:	4628      	mov	r0, r5
 800c8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c2:	f000 b8fb 	b.w	800cabc <_write_r>

0800c8c6 <__sseek>:
 800c8c6:	b510      	push	{r4, lr}
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ce:	f000 f8d1 	bl	800ca74 <_lseek_r>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	89a3      	ldrh	r3, [r4, #12]
 800c8d6:	bf15      	itete	ne
 800c8d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8e2:	81a3      	strheq	r3, [r4, #12]
 800c8e4:	bf18      	it	ne
 800c8e6:	81a3      	strhne	r3, [r4, #12]
 800c8e8:	bd10      	pop	{r4, pc}

0800c8ea <__sclose>:
 800c8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ee:	f000 b8b1 	b.w	800ca54 <_close_r>

0800c8f2 <__swbuf_r>:
 800c8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f4:	460e      	mov	r6, r1
 800c8f6:	4614      	mov	r4, r2
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	b118      	cbz	r0, 800c904 <__swbuf_r+0x12>
 800c8fc:	6a03      	ldr	r3, [r0, #32]
 800c8fe:	b90b      	cbnz	r3, 800c904 <__swbuf_r+0x12>
 800c900:	f7ff fec8 	bl	800c694 <__sinit>
 800c904:	69a3      	ldr	r3, [r4, #24]
 800c906:	60a3      	str	r3, [r4, #8]
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	071a      	lsls	r2, r3, #28
 800c90c:	d501      	bpl.n	800c912 <__swbuf_r+0x20>
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	b943      	cbnz	r3, 800c924 <__swbuf_r+0x32>
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f000 f82b 	bl	800c970 <__swsetup_r>
 800c91a:	b118      	cbz	r0, 800c924 <__swbuf_r+0x32>
 800c91c:	f04f 37ff 	mov.w	r7, #4294967295
 800c920:	4638      	mov	r0, r7
 800c922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	6922      	ldr	r2, [r4, #16]
 800c928:	1a98      	subs	r0, r3, r2
 800c92a:	6963      	ldr	r3, [r4, #20]
 800c92c:	b2f6      	uxtb	r6, r6
 800c92e:	4283      	cmp	r3, r0
 800c930:	4637      	mov	r7, r6
 800c932:	dc05      	bgt.n	800c940 <__swbuf_r+0x4e>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f001 fefe 	bl	800e738 <_fflush_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d1ed      	bne.n	800c91c <__swbuf_r+0x2a>
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	3b01      	subs	r3, #1
 800c944:	60a3      	str	r3, [r4, #8]
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	6022      	str	r2, [r4, #0]
 800c94c:	701e      	strb	r6, [r3, #0]
 800c94e:	6962      	ldr	r2, [r4, #20]
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	429a      	cmp	r2, r3
 800c954:	d004      	beq.n	800c960 <__swbuf_r+0x6e>
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	07db      	lsls	r3, r3, #31
 800c95a:	d5e1      	bpl.n	800c920 <__swbuf_r+0x2e>
 800c95c:	2e0a      	cmp	r6, #10
 800c95e:	d1df      	bne.n	800c920 <__swbuf_r+0x2e>
 800c960:	4621      	mov	r1, r4
 800c962:	4628      	mov	r0, r5
 800c964:	f001 fee8 	bl	800e738 <_fflush_r>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d0d9      	beq.n	800c920 <__swbuf_r+0x2e>
 800c96c:	e7d6      	b.n	800c91c <__swbuf_r+0x2a>
	...

0800c970 <__swsetup_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4b29      	ldr	r3, [pc, #164]	@ (800ca18 <__swsetup_r+0xa8>)
 800c974:	4605      	mov	r5, r0
 800c976:	6818      	ldr	r0, [r3, #0]
 800c978:	460c      	mov	r4, r1
 800c97a:	b118      	cbz	r0, 800c984 <__swsetup_r+0x14>
 800c97c:	6a03      	ldr	r3, [r0, #32]
 800c97e:	b90b      	cbnz	r3, 800c984 <__swsetup_r+0x14>
 800c980:	f7ff fe88 	bl	800c694 <__sinit>
 800c984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c988:	0719      	lsls	r1, r3, #28
 800c98a:	d422      	bmi.n	800c9d2 <__swsetup_r+0x62>
 800c98c:	06da      	lsls	r2, r3, #27
 800c98e:	d407      	bmi.n	800c9a0 <__swsetup_r+0x30>
 800c990:	2209      	movs	r2, #9
 800c992:	602a      	str	r2, [r5, #0]
 800c994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c998:	81a3      	strh	r3, [r4, #12]
 800c99a:	f04f 30ff 	mov.w	r0, #4294967295
 800c99e:	e033      	b.n	800ca08 <__swsetup_r+0x98>
 800c9a0:	0758      	lsls	r0, r3, #29
 800c9a2:	d512      	bpl.n	800c9ca <__swsetup_r+0x5a>
 800c9a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9a6:	b141      	cbz	r1, 800c9ba <__swsetup_r+0x4a>
 800c9a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	d002      	beq.n	800c9b6 <__swsetup_r+0x46>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 ff29 	bl	800d808 <_free_r>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	6063      	str	r3, [r4, #4]
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	f043 0308 	orr.w	r3, r3, #8
 800c9d0:	81a3      	strh	r3, [r4, #12]
 800c9d2:	6923      	ldr	r3, [r4, #16]
 800c9d4:	b94b      	cbnz	r3, 800c9ea <__swsetup_r+0x7a>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9e0:	d003      	beq.n	800c9ea <__swsetup_r+0x7a>
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	f001 fef5 	bl	800e7d4 <__smakebuf_r>
 800c9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ee:	f013 0201 	ands.w	r2, r3, #1
 800c9f2:	d00a      	beq.n	800ca0a <__swsetup_r+0x9a>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	60a2      	str	r2, [r4, #8]
 800c9f8:	6962      	ldr	r2, [r4, #20]
 800c9fa:	4252      	negs	r2, r2
 800c9fc:	61a2      	str	r2, [r4, #24]
 800c9fe:	6922      	ldr	r2, [r4, #16]
 800ca00:	b942      	cbnz	r2, 800ca14 <__swsetup_r+0xa4>
 800ca02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca06:	d1c5      	bne.n	800c994 <__swsetup_r+0x24>
 800ca08:	bd38      	pop	{r3, r4, r5, pc}
 800ca0a:	0799      	lsls	r1, r3, #30
 800ca0c:	bf58      	it	pl
 800ca0e:	6962      	ldrpl	r2, [r4, #20]
 800ca10:	60a2      	str	r2, [r4, #8]
 800ca12:	e7f4      	b.n	800c9fe <__swsetup_r+0x8e>
 800ca14:	2000      	movs	r0, #0
 800ca16:	e7f7      	b.n	800ca08 <__swsetup_r+0x98>
 800ca18:	20000140 	.word	0x20000140

0800ca1c <memcmp>:
 800ca1c:	b510      	push	{r4, lr}
 800ca1e:	3901      	subs	r1, #1
 800ca20:	4402      	add	r2, r0
 800ca22:	4290      	cmp	r0, r2
 800ca24:	d101      	bne.n	800ca2a <memcmp+0xe>
 800ca26:	2000      	movs	r0, #0
 800ca28:	e005      	b.n	800ca36 <memcmp+0x1a>
 800ca2a:	7803      	ldrb	r3, [r0, #0]
 800ca2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	d001      	beq.n	800ca38 <memcmp+0x1c>
 800ca34:	1b18      	subs	r0, r3, r4
 800ca36:	bd10      	pop	{r4, pc}
 800ca38:	3001      	adds	r0, #1
 800ca3a:	e7f2      	b.n	800ca22 <memcmp+0x6>

0800ca3c <memset>:
 800ca3c:	4402      	add	r2, r0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d100      	bne.n	800ca46 <memset+0xa>
 800ca44:	4770      	bx	lr
 800ca46:	f803 1b01 	strb.w	r1, [r3], #1
 800ca4a:	e7f9      	b.n	800ca40 <memset+0x4>

0800ca4c <_localeconv_r>:
 800ca4c:	4800      	ldr	r0, [pc, #0]	@ (800ca50 <_localeconv_r+0x4>)
 800ca4e:	4770      	bx	lr
 800ca50:	20000280 	.word	0x20000280

0800ca54 <_close_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d06      	ldr	r5, [pc, #24]	@ (800ca70 <_close_r+0x1c>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	602b      	str	r3, [r5, #0]
 800ca60:	f7f7 fd98 	bl	8004594 <_close>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_close_r+0x1a>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_close_r+0x1a>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	20001914 	.word	0x20001914

0800ca74 <_lseek_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d07      	ldr	r5, [pc, #28]	@ (800ca94 <_lseek_r+0x20>)
 800ca78:	4604      	mov	r4, r0
 800ca7a:	4608      	mov	r0, r1
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	2200      	movs	r2, #0
 800ca80:	602a      	str	r2, [r5, #0]
 800ca82:	461a      	mov	r2, r3
 800ca84:	f7f7 fdad 	bl	80045e2 <_lseek>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	d102      	bne.n	800ca92 <_lseek_r+0x1e>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b103      	cbz	r3, 800ca92 <_lseek_r+0x1e>
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
 800ca94:	20001914 	.word	0x20001914

0800ca98 <_read_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d07      	ldr	r5, [pc, #28]	@ (800cab8 <_read_r+0x20>)
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	4608      	mov	r0, r1
 800caa0:	4611      	mov	r1, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	602a      	str	r2, [r5, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	f7f7 fd3b 	bl	8004522 <_read>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_read_r+0x1e>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_read_r+0x1e>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20001914 	.word	0x20001914

0800cabc <_write_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d07      	ldr	r5, [pc, #28]	@ (800cadc <_write_r+0x20>)
 800cac0:	4604      	mov	r4, r0
 800cac2:	4608      	mov	r0, r1
 800cac4:	4611      	mov	r1, r2
 800cac6:	2200      	movs	r2, #0
 800cac8:	602a      	str	r2, [r5, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	f7f7 fd46 	bl	800455c <_write>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	d102      	bne.n	800cada <_write_r+0x1e>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	b103      	cbz	r3, 800cada <_write_r+0x1e>
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	20001914 	.word	0x20001914

0800cae0 <__errno>:
 800cae0:	4b01      	ldr	r3, [pc, #4]	@ (800cae8 <__errno+0x8>)
 800cae2:	6818      	ldr	r0, [r3, #0]
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	20000140 	.word	0x20000140

0800caec <__libc_init_array>:
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	4d0d      	ldr	r5, [pc, #52]	@ (800cb24 <__libc_init_array+0x38>)
 800caf0:	4c0d      	ldr	r4, [pc, #52]	@ (800cb28 <__libc_init_array+0x3c>)
 800caf2:	1b64      	subs	r4, r4, r5
 800caf4:	10a4      	asrs	r4, r4, #2
 800caf6:	2600      	movs	r6, #0
 800caf8:	42a6      	cmp	r6, r4
 800cafa:	d109      	bne.n	800cb10 <__libc_init_array+0x24>
 800cafc:	4d0b      	ldr	r5, [pc, #44]	@ (800cb2c <__libc_init_array+0x40>)
 800cafe:	4c0c      	ldr	r4, [pc, #48]	@ (800cb30 <__libc_init_array+0x44>)
 800cb00:	f002 fb9e 	bl	800f240 <_init>
 800cb04:	1b64      	subs	r4, r4, r5
 800cb06:	10a4      	asrs	r4, r4, #2
 800cb08:	2600      	movs	r6, #0
 800cb0a:	42a6      	cmp	r6, r4
 800cb0c:	d105      	bne.n	800cb1a <__libc_init_array+0x2e>
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb14:	4798      	blx	r3
 800cb16:	3601      	adds	r6, #1
 800cb18:	e7ee      	b.n	800caf8 <__libc_init_array+0xc>
 800cb1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb1e:	4798      	blx	r3
 800cb20:	3601      	adds	r6, #1
 800cb22:	e7f2      	b.n	800cb0a <__libc_init_array+0x1e>
 800cb24:	0800fecc 	.word	0x0800fecc
 800cb28:	0800fecc 	.word	0x0800fecc
 800cb2c:	0800fecc 	.word	0x0800fecc
 800cb30:	0800fed0 	.word	0x0800fed0

0800cb34 <__retarget_lock_init_recursive>:
 800cb34:	4770      	bx	lr

0800cb36 <__retarget_lock_acquire_recursive>:
 800cb36:	4770      	bx	lr

0800cb38 <__retarget_lock_release_recursive>:
 800cb38:	4770      	bx	lr

0800cb3a <memcpy>:
 800cb3a:	440a      	add	r2, r1
 800cb3c:	4291      	cmp	r1, r2
 800cb3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb42:	d100      	bne.n	800cb46 <memcpy+0xc>
 800cb44:	4770      	bx	lr
 800cb46:	b510      	push	{r4, lr}
 800cb48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb50:	4291      	cmp	r1, r2
 800cb52:	d1f9      	bne.n	800cb48 <memcpy+0xe>
 800cb54:	bd10      	pop	{r4, pc}

0800cb56 <quorem>:
 800cb56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5a:	6903      	ldr	r3, [r0, #16]
 800cb5c:	690c      	ldr	r4, [r1, #16]
 800cb5e:	42a3      	cmp	r3, r4
 800cb60:	4607      	mov	r7, r0
 800cb62:	db7e      	blt.n	800cc62 <quorem+0x10c>
 800cb64:	3c01      	subs	r4, #1
 800cb66:	f101 0814 	add.w	r8, r1, #20
 800cb6a:	00a3      	lsls	r3, r4, #2
 800cb6c:	f100 0514 	add.w	r5, r0, #20
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb80:	3301      	adds	r3, #1
 800cb82:	429a      	cmp	r2, r3
 800cb84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb88:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb8c:	d32e      	bcc.n	800cbec <quorem+0x96>
 800cb8e:	f04f 0a00 	mov.w	sl, #0
 800cb92:	46c4      	mov	ip, r8
 800cb94:	46ae      	mov	lr, r5
 800cb96:	46d3      	mov	fp, sl
 800cb98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb9c:	b298      	uxth	r0, r3
 800cb9e:	fb06 a000 	mla	r0, r6, r0, sl
 800cba2:	0c02      	lsrs	r2, r0, #16
 800cba4:	0c1b      	lsrs	r3, r3, #16
 800cba6:	fb06 2303 	mla	r3, r6, r3, r2
 800cbaa:	f8de 2000 	ldr.w	r2, [lr]
 800cbae:	b280      	uxth	r0, r0
 800cbb0:	b292      	uxth	r2, r2
 800cbb2:	1a12      	subs	r2, r2, r0
 800cbb4:	445a      	add	r2, fp
 800cbb6:	f8de 0000 	ldr.w	r0, [lr]
 800cbba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cbc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cbc8:	b292      	uxth	r2, r2
 800cbca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cbce:	45e1      	cmp	r9, ip
 800cbd0:	f84e 2b04 	str.w	r2, [lr], #4
 800cbd4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cbd8:	d2de      	bcs.n	800cb98 <quorem+0x42>
 800cbda:	9b00      	ldr	r3, [sp, #0]
 800cbdc:	58eb      	ldr	r3, [r5, r3]
 800cbde:	b92b      	cbnz	r3, 800cbec <quorem+0x96>
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	3b04      	subs	r3, #4
 800cbe4:	429d      	cmp	r5, r3
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	d32f      	bcc.n	800cc4a <quorem+0xf4>
 800cbea:	613c      	str	r4, [r7, #16]
 800cbec:	4638      	mov	r0, r7
 800cbee:	f001 f97d 	bl	800deec <__mcmp>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	db25      	blt.n	800cc42 <quorem+0xec>
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbfe:	f8d1 c000 	ldr.w	ip, [r1]
 800cc02:	fa1f fe82 	uxth.w	lr, r2
 800cc06:	fa1f f38c 	uxth.w	r3, ip
 800cc0a:	eba3 030e 	sub.w	r3, r3, lr
 800cc0e:	4403      	add	r3, r0
 800cc10:	0c12      	lsrs	r2, r2, #16
 800cc12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc20:	45c1      	cmp	r9, r8
 800cc22:	f841 3b04 	str.w	r3, [r1], #4
 800cc26:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc2a:	d2e6      	bcs.n	800cbfa <quorem+0xa4>
 800cc2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc34:	b922      	cbnz	r2, 800cc40 <quorem+0xea>
 800cc36:	3b04      	subs	r3, #4
 800cc38:	429d      	cmp	r5, r3
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	d30b      	bcc.n	800cc56 <quorem+0x100>
 800cc3e:	613c      	str	r4, [r7, #16]
 800cc40:	3601      	adds	r6, #1
 800cc42:	4630      	mov	r0, r6
 800cc44:	b003      	add	sp, #12
 800cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4a:	6812      	ldr	r2, [r2, #0]
 800cc4c:	3b04      	subs	r3, #4
 800cc4e:	2a00      	cmp	r2, #0
 800cc50:	d1cb      	bne.n	800cbea <quorem+0x94>
 800cc52:	3c01      	subs	r4, #1
 800cc54:	e7c6      	b.n	800cbe4 <quorem+0x8e>
 800cc56:	6812      	ldr	r2, [r2, #0]
 800cc58:	3b04      	subs	r3, #4
 800cc5a:	2a00      	cmp	r2, #0
 800cc5c:	d1ef      	bne.n	800cc3e <quorem+0xe8>
 800cc5e:	3c01      	subs	r4, #1
 800cc60:	e7ea      	b.n	800cc38 <quorem+0xe2>
 800cc62:	2000      	movs	r0, #0
 800cc64:	e7ee      	b.n	800cc44 <quorem+0xee>
	...

0800cc68 <_dtoa_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	69c7      	ldr	r7, [r0, #28]
 800cc6e:	b097      	sub	sp, #92	@ 0x5c
 800cc70:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cc74:	ec55 4b10 	vmov	r4, r5, d0
 800cc78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cc7a:	9107      	str	r1, [sp, #28]
 800cc7c:	4681      	mov	r9, r0
 800cc7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc80:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc82:	b97f      	cbnz	r7, 800cca4 <_dtoa_r+0x3c>
 800cc84:	2010      	movs	r0, #16
 800cc86:	f000 fe09 	bl	800d89c <malloc>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cc90:	b920      	cbnz	r0, 800cc9c <_dtoa_r+0x34>
 800cc92:	4ba9      	ldr	r3, [pc, #676]	@ (800cf38 <_dtoa_r+0x2d0>)
 800cc94:	21ef      	movs	r1, #239	@ 0xef
 800cc96:	48a9      	ldr	r0, [pc, #676]	@ (800cf3c <_dtoa_r+0x2d4>)
 800cc98:	f001 fe24 	bl	800e8e4 <__assert_func>
 800cc9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cca0:	6007      	str	r7, [r0, #0]
 800cca2:	60c7      	str	r7, [r0, #12]
 800cca4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cca8:	6819      	ldr	r1, [r3, #0]
 800ccaa:	b159      	cbz	r1, 800ccc4 <_dtoa_r+0x5c>
 800ccac:	685a      	ldr	r2, [r3, #4]
 800ccae:	604a      	str	r2, [r1, #4]
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	4093      	lsls	r3, r2
 800ccb4:	608b      	str	r3, [r1, #8]
 800ccb6:	4648      	mov	r0, r9
 800ccb8:	f000 fee6 	bl	800da88 <_Bfree>
 800ccbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	1e2b      	subs	r3, r5, #0
 800ccc6:	bfb9      	ittee	lt
 800ccc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cccc:	9305      	strlt	r3, [sp, #20]
 800ccce:	2300      	movge	r3, #0
 800ccd0:	6033      	strge	r3, [r6, #0]
 800ccd2:	9f05      	ldr	r7, [sp, #20]
 800ccd4:	4b9a      	ldr	r3, [pc, #616]	@ (800cf40 <_dtoa_r+0x2d8>)
 800ccd6:	bfbc      	itt	lt
 800ccd8:	2201      	movlt	r2, #1
 800ccda:	6032      	strlt	r2, [r6, #0]
 800ccdc:	43bb      	bics	r3, r7
 800ccde:	d112      	bne.n	800cd06 <_dtoa_r+0x9e>
 800cce0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cce2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccec:	4323      	orrs	r3, r4
 800ccee:	f000 855a 	beq.w	800d7a6 <_dtoa_r+0xb3e>
 800ccf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ccf4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cf54 <_dtoa_r+0x2ec>
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f000 855c 	beq.w	800d7b6 <_dtoa_r+0xb4e>
 800ccfe:	f10a 0303 	add.w	r3, sl, #3
 800cd02:	f000 bd56 	b.w	800d7b2 <_dtoa_r+0xb4a>
 800cd06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	ec51 0b17 	vmov	r0, r1, d7
 800cd10:	2300      	movs	r3, #0
 800cd12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cd16:	f7f3 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd1a:	4680      	mov	r8, r0
 800cd1c:	b158      	cbz	r0, 800cd36 <_dtoa_r+0xce>
 800cd1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd20:	2301      	movs	r3, #1
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd26:	b113      	cbz	r3, 800cd2e <_dtoa_r+0xc6>
 800cd28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cd2a:	4b86      	ldr	r3, [pc, #536]	@ (800cf44 <_dtoa_r+0x2dc>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cf58 <_dtoa_r+0x2f0>
 800cd32:	f000 bd40 	b.w	800d7b6 <_dtoa_r+0xb4e>
 800cd36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cd3a:	aa14      	add	r2, sp, #80	@ 0x50
 800cd3c:	a915      	add	r1, sp, #84	@ 0x54
 800cd3e:	4648      	mov	r0, r9
 800cd40:	f001 f984 	bl	800e04c <__d2b>
 800cd44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd48:	9002      	str	r0, [sp, #8]
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	d078      	beq.n	800ce40 <_dtoa_r+0x1d8>
 800cd4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cd54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd68:	4619      	mov	r1, r3
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4b76      	ldr	r3, [pc, #472]	@ (800cf48 <_dtoa_r+0x2e0>)
 800cd6e:	f7f3 fa8b 	bl	8000288 <__aeabi_dsub>
 800cd72:	a36b      	add	r3, pc, #428	@ (adr r3, 800cf20 <_dtoa_r+0x2b8>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	f7f3 fc3e 	bl	80005f8 <__aeabi_dmul>
 800cd7c:	a36a      	add	r3, pc, #424	@ (adr r3, 800cf28 <_dtoa_r+0x2c0>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	f7f3 fa83 	bl	800028c <__adddf3>
 800cd86:	4604      	mov	r4, r0
 800cd88:	4630      	mov	r0, r6
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	f7f3 fbca 	bl	8000524 <__aeabi_i2d>
 800cd90:	a367      	add	r3, pc, #412	@ (adr r3, 800cf30 <_dtoa_r+0x2c8>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	f7f3 fc2f 	bl	80005f8 <__aeabi_dmul>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fa73 	bl	800028c <__adddf3>
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f7f3 fed5 	bl	8000b58 <__aeabi_d2iz>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fe90 	bl	8000adc <__aeabi_dcmplt>
 800cdbc:	b140      	cbz	r0, 800cdd0 <_dtoa_r+0x168>
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	f7f3 fbb0 	bl	8000524 <__aeabi_i2d>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	462b      	mov	r3, r5
 800cdc8:	f7f3 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdcc:	b900      	cbnz	r0, 800cdd0 <_dtoa_r+0x168>
 800cdce:	3f01      	subs	r7, #1
 800cdd0:	2f16      	cmp	r7, #22
 800cdd2:	d852      	bhi.n	800ce7a <_dtoa_r+0x212>
 800cdd4:	4b5d      	ldr	r3, [pc, #372]	@ (800cf4c <_dtoa_r+0x2e4>)
 800cdd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cde2:	f7f3 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d049      	beq.n	800ce7e <_dtoa_r+0x216>
 800cdea:	3f01      	subs	r7, #1
 800cdec:	2300      	movs	r3, #0
 800cdee:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cdf2:	1b9b      	subs	r3, r3, r6
 800cdf4:	1e5a      	subs	r2, r3, #1
 800cdf6:	bf45      	ittet	mi
 800cdf8:	f1c3 0301 	rsbmi	r3, r3, #1
 800cdfc:	9300      	strmi	r3, [sp, #0]
 800cdfe:	2300      	movpl	r3, #0
 800ce00:	2300      	movmi	r3, #0
 800ce02:	9206      	str	r2, [sp, #24]
 800ce04:	bf54      	ite	pl
 800ce06:	9300      	strpl	r3, [sp, #0]
 800ce08:	9306      	strmi	r3, [sp, #24]
 800ce0a:	2f00      	cmp	r7, #0
 800ce0c:	db39      	blt.n	800ce82 <_dtoa_r+0x21a>
 800ce0e:	9b06      	ldr	r3, [sp, #24]
 800ce10:	970d      	str	r7, [sp, #52]	@ 0x34
 800ce12:	443b      	add	r3, r7
 800ce14:	9306      	str	r3, [sp, #24]
 800ce16:	2300      	movs	r3, #0
 800ce18:	9308      	str	r3, [sp, #32]
 800ce1a:	9b07      	ldr	r3, [sp, #28]
 800ce1c:	2b09      	cmp	r3, #9
 800ce1e:	d863      	bhi.n	800cee8 <_dtoa_r+0x280>
 800ce20:	2b05      	cmp	r3, #5
 800ce22:	bfc4      	itt	gt
 800ce24:	3b04      	subgt	r3, #4
 800ce26:	9307      	strgt	r3, [sp, #28]
 800ce28:	9b07      	ldr	r3, [sp, #28]
 800ce2a:	f1a3 0302 	sub.w	r3, r3, #2
 800ce2e:	bfcc      	ite	gt
 800ce30:	2400      	movgt	r4, #0
 800ce32:	2401      	movle	r4, #1
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d863      	bhi.n	800cf00 <_dtoa_r+0x298>
 800ce38:	e8df f003 	tbb	[pc, r3]
 800ce3c:	2b375452 	.word	0x2b375452
 800ce40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ce44:	441e      	add	r6, r3
 800ce46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce4a:	2b20      	cmp	r3, #32
 800ce4c:	bfc1      	itttt	gt
 800ce4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce52:	409f      	lslgt	r7, r3
 800ce54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce58:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce5c:	bfd6      	itet	le
 800ce5e:	f1c3 0320 	rsble	r3, r3, #32
 800ce62:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce66:	fa04 f003 	lslle.w	r0, r4, r3
 800ce6a:	f7f3 fb4b 	bl	8000504 <__aeabi_ui2d>
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce74:	3e01      	subs	r6, #1
 800ce76:	9212      	str	r2, [sp, #72]	@ 0x48
 800ce78:	e776      	b.n	800cd68 <_dtoa_r+0x100>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e7b7      	b.n	800cdee <_dtoa_r+0x186>
 800ce7e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ce80:	e7b6      	b.n	800cdf0 <_dtoa_r+0x188>
 800ce82:	9b00      	ldr	r3, [sp, #0]
 800ce84:	1bdb      	subs	r3, r3, r7
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	427b      	negs	r3, r7
 800ce8a:	9308      	str	r3, [sp, #32]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ce90:	e7c3      	b.n	800ce1a <_dtoa_r+0x1b2>
 800ce92:	2301      	movs	r3, #1
 800ce94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce98:	eb07 0b03 	add.w	fp, r7, r3
 800ce9c:	f10b 0301 	add.w	r3, fp, #1
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	9303      	str	r3, [sp, #12]
 800cea4:	bfb8      	it	lt
 800cea6:	2301      	movlt	r3, #1
 800cea8:	e006      	b.n	800ceb8 <_dtoa_r+0x250>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	dd28      	ble.n	800cf06 <_dtoa_r+0x29e>
 800ceb4:	469b      	mov	fp, r3
 800ceb6:	9303      	str	r3, [sp, #12]
 800ceb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cebc:	2100      	movs	r1, #0
 800cebe:	2204      	movs	r2, #4
 800cec0:	f102 0514 	add.w	r5, r2, #20
 800cec4:	429d      	cmp	r5, r3
 800cec6:	d926      	bls.n	800cf16 <_dtoa_r+0x2ae>
 800cec8:	6041      	str	r1, [r0, #4]
 800ceca:	4648      	mov	r0, r9
 800cecc:	f000 fd9c 	bl	800da08 <_Balloc>
 800ced0:	4682      	mov	sl, r0
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d142      	bne.n	800cf5c <_dtoa_r+0x2f4>
 800ced6:	4b1e      	ldr	r3, [pc, #120]	@ (800cf50 <_dtoa_r+0x2e8>)
 800ced8:	4602      	mov	r2, r0
 800ceda:	f240 11af 	movw	r1, #431	@ 0x1af
 800cede:	e6da      	b.n	800cc96 <_dtoa_r+0x2e>
 800cee0:	2300      	movs	r3, #0
 800cee2:	e7e3      	b.n	800ceac <_dtoa_r+0x244>
 800cee4:	2300      	movs	r3, #0
 800cee6:	e7d5      	b.n	800ce94 <_dtoa_r+0x22c>
 800cee8:	2401      	movs	r4, #1
 800ceea:	2300      	movs	r3, #0
 800ceec:	9307      	str	r3, [sp, #28]
 800ceee:	9409      	str	r4, [sp, #36]	@ 0x24
 800cef0:	f04f 3bff 	mov.w	fp, #4294967295
 800cef4:	2200      	movs	r2, #0
 800cef6:	f8cd b00c 	str.w	fp, [sp, #12]
 800cefa:	2312      	movs	r3, #18
 800cefc:	920c      	str	r2, [sp, #48]	@ 0x30
 800cefe:	e7db      	b.n	800ceb8 <_dtoa_r+0x250>
 800cf00:	2301      	movs	r3, #1
 800cf02:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf04:	e7f4      	b.n	800cef0 <_dtoa_r+0x288>
 800cf06:	f04f 0b01 	mov.w	fp, #1
 800cf0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf0e:	465b      	mov	r3, fp
 800cf10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cf14:	e7d0      	b.n	800ceb8 <_dtoa_r+0x250>
 800cf16:	3101      	adds	r1, #1
 800cf18:	0052      	lsls	r2, r2, #1
 800cf1a:	e7d1      	b.n	800cec0 <_dtoa_r+0x258>
 800cf1c:	f3af 8000 	nop.w
 800cf20:	636f4361 	.word	0x636f4361
 800cf24:	3fd287a7 	.word	0x3fd287a7
 800cf28:	8b60c8b3 	.word	0x8b60c8b3
 800cf2c:	3fc68a28 	.word	0x3fc68a28
 800cf30:	509f79fb 	.word	0x509f79fb
 800cf34:	3fd34413 	.word	0x3fd34413
 800cf38:	0800fb79 	.word	0x0800fb79
 800cf3c:	0800fb90 	.word	0x0800fb90
 800cf40:	7ff00000 	.word	0x7ff00000
 800cf44:	0800fb49 	.word	0x0800fb49
 800cf48:	3ff80000 	.word	0x3ff80000
 800cf4c:	0800fce0 	.word	0x0800fce0
 800cf50:	0800fbe8 	.word	0x0800fbe8
 800cf54:	0800fb75 	.word	0x0800fb75
 800cf58:	0800fb48 	.word	0x0800fb48
 800cf5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf60:	6018      	str	r0, [r3, #0]
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	2b0e      	cmp	r3, #14
 800cf66:	f200 80a1 	bhi.w	800d0ac <_dtoa_r+0x444>
 800cf6a:	2c00      	cmp	r4, #0
 800cf6c:	f000 809e 	beq.w	800d0ac <_dtoa_r+0x444>
 800cf70:	2f00      	cmp	r7, #0
 800cf72:	dd33      	ble.n	800cfdc <_dtoa_r+0x374>
 800cf74:	4b9c      	ldr	r3, [pc, #624]	@ (800d1e8 <_dtoa_r+0x580>)
 800cf76:	f007 020f 	and.w	r2, r7, #15
 800cf7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf7e:	ed93 7b00 	vldr	d7, [r3]
 800cf82:	05f8      	lsls	r0, r7, #23
 800cf84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cf88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf8c:	d516      	bpl.n	800cfbc <_dtoa_r+0x354>
 800cf8e:	4b97      	ldr	r3, [pc, #604]	@ (800d1ec <_dtoa_r+0x584>)
 800cf90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cf94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf98:	f7f3 fc58 	bl	800084c <__aeabi_ddiv>
 800cf9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfa0:	f004 040f 	and.w	r4, r4, #15
 800cfa4:	2603      	movs	r6, #3
 800cfa6:	4d91      	ldr	r5, [pc, #580]	@ (800d1ec <_dtoa_r+0x584>)
 800cfa8:	b954      	cbnz	r4, 800cfc0 <_dtoa_r+0x358>
 800cfaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cfae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfb2:	f7f3 fc4b 	bl	800084c <__aeabi_ddiv>
 800cfb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfba:	e028      	b.n	800d00e <_dtoa_r+0x3a6>
 800cfbc:	2602      	movs	r6, #2
 800cfbe:	e7f2      	b.n	800cfa6 <_dtoa_r+0x33e>
 800cfc0:	07e1      	lsls	r1, r4, #31
 800cfc2:	d508      	bpl.n	800cfd6 <_dtoa_r+0x36e>
 800cfc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cfc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfcc:	f7f3 fb14 	bl	80005f8 <__aeabi_dmul>
 800cfd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cfd4:	3601      	adds	r6, #1
 800cfd6:	1064      	asrs	r4, r4, #1
 800cfd8:	3508      	adds	r5, #8
 800cfda:	e7e5      	b.n	800cfa8 <_dtoa_r+0x340>
 800cfdc:	f000 80af 	beq.w	800d13e <_dtoa_r+0x4d6>
 800cfe0:	427c      	negs	r4, r7
 800cfe2:	4b81      	ldr	r3, [pc, #516]	@ (800d1e8 <_dtoa_r+0x580>)
 800cfe4:	4d81      	ldr	r5, [pc, #516]	@ (800d1ec <_dtoa_r+0x584>)
 800cfe6:	f004 020f 	and.w	r2, r4, #15
 800cfea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cff6:	f7f3 faff 	bl	80005f8 <__aeabi_dmul>
 800cffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cffe:	1124      	asrs	r4, r4, #4
 800d000:	2300      	movs	r3, #0
 800d002:	2602      	movs	r6, #2
 800d004:	2c00      	cmp	r4, #0
 800d006:	f040 808f 	bne.w	800d128 <_dtoa_r+0x4c0>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1d3      	bne.n	800cfb6 <_dtoa_r+0x34e>
 800d00e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d010:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8094 	beq.w	800d142 <_dtoa_r+0x4da>
 800d01a:	4b75      	ldr	r3, [pc, #468]	@ (800d1f0 <_dtoa_r+0x588>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	4620      	mov	r0, r4
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800d026:	2800      	cmp	r0, #0
 800d028:	f000 808b 	beq.w	800d142 <_dtoa_r+0x4da>
 800d02c:	9b03      	ldr	r3, [sp, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 8087 	beq.w	800d142 <_dtoa_r+0x4da>
 800d034:	f1bb 0f00 	cmp.w	fp, #0
 800d038:	dd34      	ble.n	800d0a4 <_dtoa_r+0x43c>
 800d03a:	4620      	mov	r0, r4
 800d03c:	4b6d      	ldr	r3, [pc, #436]	@ (800d1f4 <_dtoa_r+0x58c>)
 800d03e:	2200      	movs	r2, #0
 800d040:	4629      	mov	r1, r5
 800d042:	f7f3 fad9 	bl	80005f8 <__aeabi_dmul>
 800d046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d04a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d04e:	3601      	adds	r6, #1
 800d050:	465c      	mov	r4, fp
 800d052:	4630      	mov	r0, r6
 800d054:	f7f3 fa66 	bl	8000524 <__aeabi_i2d>
 800d058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d05c:	f7f3 facc 	bl	80005f8 <__aeabi_dmul>
 800d060:	4b65      	ldr	r3, [pc, #404]	@ (800d1f8 <_dtoa_r+0x590>)
 800d062:	2200      	movs	r2, #0
 800d064:	f7f3 f912 	bl	800028c <__adddf3>
 800d068:	4605      	mov	r5, r0
 800d06a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d06e:	2c00      	cmp	r4, #0
 800d070:	d16a      	bne.n	800d148 <_dtoa_r+0x4e0>
 800d072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d076:	4b61      	ldr	r3, [pc, #388]	@ (800d1fc <_dtoa_r+0x594>)
 800d078:	2200      	movs	r2, #0
 800d07a:	f7f3 f905 	bl	8000288 <__aeabi_dsub>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d086:	462a      	mov	r2, r5
 800d088:	4633      	mov	r3, r6
 800d08a:	f7f3 fd45 	bl	8000b18 <__aeabi_dcmpgt>
 800d08e:	2800      	cmp	r0, #0
 800d090:	f040 8298 	bne.w	800d5c4 <_dtoa_r+0x95c>
 800d094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d098:	462a      	mov	r2, r5
 800d09a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d09e:	f7f3 fd1d 	bl	8000adc <__aeabi_dcmplt>
 800d0a2:	bb38      	cbnz	r0, 800d0f4 <_dtoa_r+0x48c>
 800d0a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d0a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d0ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f2c0 8157 	blt.w	800d362 <_dtoa_r+0x6fa>
 800d0b4:	2f0e      	cmp	r7, #14
 800d0b6:	f300 8154 	bgt.w	800d362 <_dtoa_r+0x6fa>
 800d0ba:	4b4b      	ldr	r3, [pc, #300]	@ (800d1e8 <_dtoa_r+0x580>)
 800d0bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0c0:	ed93 7b00 	vldr	d7, [r3]
 800d0c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	ed8d 7b00 	vstr	d7, [sp]
 800d0cc:	f280 80e5 	bge.w	800d29a <_dtoa_r+0x632>
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f300 80e1 	bgt.w	800d29a <_dtoa_r+0x632>
 800d0d8:	d10c      	bne.n	800d0f4 <_dtoa_r+0x48c>
 800d0da:	4b48      	ldr	r3, [pc, #288]	@ (800d1fc <_dtoa_r+0x594>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	ec51 0b17 	vmov	r0, r1, d7
 800d0e2:	f7f3 fa89 	bl	80005f8 <__aeabi_dmul>
 800d0e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0ea:	f7f3 fd0b 	bl	8000b04 <__aeabi_dcmpge>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	f000 8266 	beq.w	800d5c0 <_dtoa_r+0x958>
 800d0f4:	2400      	movs	r4, #0
 800d0f6:	4625      	mov	r5, r4
 800d0f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0fa:	4656      	mov	r6, sl
 800d0fc:	ea6f 0803 	mvn.w	r8, r3
 800d100:	2700      	movs	r7, #0
 800d102:	4621      	mov	r1, r4
 800d104:	4648      	mov	r0, r9
 800d106:	f000 fcbf 	bl	800da88 <_Bfree>
 800d10a:	2d00      	cmp	r5, #0
 800d10c:	f000 80bd 	beq.w	800d28a <_dtoa_r+0x622>
 800d110:	b12f      	cbz	r7, 800d11e <_dtoa_r+0x4b6>
 800d112:	42af      	cmp	r7, r5
 800d114:	d003      	beq.n	800d11e <_dtoa_r+0x4b6>
 800d116:	4639      	mov	r1, r7
 800d118:	4648      	mov	r0, r9
 800d11a:	f000 fcb5 	bl	800da88 <_Bfree>
 800d11e:	4629      	mov	r1, r5
 800d120:	4648      	mov	r0, r9
 800d122:	f000 fcb1 	bl	800da88 <_Bfree>
 800d126:	e0b0      	b.n	800d28a <_dtoa_r+0x622>
 800d128:	07e2      	lsls	r2, r4, #31
 800d12a:	d505      	bpl.n	800d138 <_dtoa_r+0x4d0>
 800d12c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d130:	f7f3 fa62 	bl	80005f8 <__aeabi_dmul>
 800d134:	3601      	adds	r6, #1
 800d136:	2301      	movs	r3, #1
 800d138:	1064      	asrs	r4, r4, #1
 800d13a:	3508      	adds	r5, #8
 800d13c:	e762      	b.n	800d004 <_dtoa_r+0x39c>
 800d13e:	2602      	movs	r6, #2
 800d140:	e765      	b.n	800d00e <_dtoa_r+0x3a6>
 800d142:	9c03      	ldr	r4, [sp, #12]
 800d144:	46b8      	mov	r8, r7
 800d146:	e784      	b.n	800d052 <_dtoa_r+0x3ea>
 800d148:	4b27      	ldr	r3, [pc, #156]	@ (800d1e8 <_dtoa_r+0x580>)
 800d14a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d14c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d154:	4454      	add	r4, sl
 800d156:	2900      	cmp	r1, #0
 800d158:	d054      	beq.n	800d204 <_dtoa_r+0x59c>
 800d15a:	4929      	ldr	r1, [pc, #164]	@ (800d200 <_dtoa_r+0x598>)
 800d15c:	2000      	movs	r0, #0
 800d15e:	f7f3 fb75 	bl	800084c <__aeabi_ddiv>
 800d162:	4633      	mov	r3, r6
 800d164:	462a      	mov	r2, r5
 800d166:	f7f3 f88f 	bl	8000288 <__aeabi_dsub>
 800d16a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d16e:	4656      	mov	r6, sl
 800d170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d174:	f7f3 fcf0 	bl	8000b58 <__aeabi_d2iz>
 800d178:	4605      	mov	r5, r0
 800d17a:	f7f3 f9d3 	bl	8000524 <__aeabi_i2d>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d186:	f7f3 f87f 	bl	8000288 <__aeabi_dsub>
 800d18a:	3530      	adds	r5, #48	@ 0x30
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d194:	f806 5b01 	strb.w	r5, [r6], #1
 800d198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d19c:	f7f3 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d172      	bne.n	800d28a <_dtoa_r+0x622>
 800d1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1a8:	4911      	ldr	r1, [pc, #68]	@ (800d1f0 <_dtoa_r+0x588>)
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	f7f3 f86c 	bl	8000288 <__aeabi_dsub>
 800d1b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d1b4:	f7f3 fc92 	bl	8000adc <__aeabi_dcmplt>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	f040 80b4 	bne.w	800d326 <_dtoa_r+0x6be>
 800d1be:	42a6      	cmp	r6, r4
 800d1c0:	f43f af70 	beq.w	800d0a4 <_dtoa_r+0x43c>
 800d1c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f4 <_dtoa_r+0x58c>)
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f7f3 fa14 	bl	80005f8 <__aeabi_dmul>
 800d1d0:	4b08      	ldr	r3, [pc, #32]	@ (800d1f4 <_dtoa_r+0x58c>)
 800d1d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1dc:	f7f3 fa0c 	bl	80005f8 <__aeabi_dmul>
 800d1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1e4:	e7c4      	b.n	800d170 <_dtoa_r+0x508>
 800d1e6:	bf00      	nop
 800d1e8:	0800fce0 	.word	0x0800fce0
 800d1ec:	0800fcb8 	.word	0x0800fcb8
 800d1f0:	3ff00000 	.word	0x3ff00000
 800d1f4:	40240000 	.word	0x40240000
 800d1f8:	401c0000 	.word	0x401c0000
 800d1fc:	40140000 	.word	0x40140000
 800d200:	3fe00000 	.word	0x3fe00000
 800d204:	4631      	mov	r1, r6
 800d206:	4628      	mov	r0, r5
 800d208:	f7f3 f9f6 	bl	80005f8 <__aeabi_dmul>
 800d20c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d210:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d212:	4656      	mov	r6, sl
 800d214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d218:	f7f3 fc9e 	bl	8000b58 <__aeabi_d2iz>
 800d21c:	4605      	mov	r5, r0
 800d21e:	f7f3 f981 	bl	8000524 <__aeabi_i2d>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d22a:	f7f3 f82d 	bl	8000288 <__aeabi_dsub>
 800d22e:	3530      	adds	r5, #48	@ 0x30
 800d230:	f806 5b01 	strb.w	r5, [r6], #1
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	42a6      	cmp	r6, r4
 800d23a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	d124      	bne.n	800d28e <_dtoa_r+0x626>
 800d244:	4baf      	ldr	r3, [pc, #700]	@ (800d504 <_dtoa_r+0x89c>)
 800d246:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d24a:	f7f3 f81f 	bl	800028c <__adddf3>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d256:	f7f3 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d163      	bne.n	800d326 <_dtoa_r+0x6be>
 800d25e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d262:	49a8      	ldr	r1, [pc, #672]	@ (800d504 <_dtoa_r+0x89c>)
 800d264:	2000      	movs	r0, #0
 800d266:	f7f3 f80f 	bl	8000288 <__aeabi_dsub>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d272:	f7f3 fc33 	bl	8000adc <__aeabi_dcmplt>
 800d276:	2800      	cmp	r0, #0
 800d278:	f43f af14 	beq.w	800d0a4 <_dtoa_r+0x43c>
 800d27c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d27e:	1e73      	subs	r3, r6, #1
 800d280:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d282:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d286:	2b30      	cmp	r3, #48	@ 0x30
 800d288:	d0f8      	beq.n	800d27c <_dtoa_r+0x614>
 800d28a:	4647      	mov	r7, r8
 800d28c:	e03b      	b.n	800d306 <_dtoa_r+0x69e>
 800d28e:	4b9e      	ldr	r3, [pc, #632]	@ (800d508 <_dtoa_r+0x8a0>)
 800d290:	f7f3 f9b2 	bl	80005f8 <__aeabi_dmul>
 800d294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d298:	e7bc      	b.n	800d214 <_dtoa_r+0x5ac>
 800d29a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d29e:	4656      	mov	r6, sl
 800d2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7f3 fad0 	bl	800084c <__aeabi_ddiv>
 800d2ac:	f7f3 fc54 	bl	8000b58 <__aeabi_d2iz>
 800d2b0:	4680      	mov	r8, r0
 800d2b2:	f7f3 f937 	bl	8000524 <__aeabi_i2d>
 800d2b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ba:	f7f3 f99d 	bl	80005f8 <__aeabi_dmul>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d2ca:	f7f2 ffdd 	bl	8000288 <__aeabi_dsub>
 800d2ce:	f806 4b01 	strb.w	r4, [r6], #1
 800d2d2:	9d03      	ldr	r5, [sp, #12]
 800d2d4:	eba6 040a 	sub.w	r4, r6, sl
 800d2d8:	42a5      	cmp	r5, r4
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	d133      	bne.n	800d348 <_dtoa_r+0x6e0>
 800d2e0:	f7f2 ffd4 	bl	800028c <__adddf3>
 800d2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	460d      	mov	r5, r1
 800d2ec:	f7f3 fc14 	bl	8000b18 <__aeabi_dcmpgt>
 800d2f0:	b9c0      	cbnz	r0, 800d324 <_dtoa_r+0x6bc>
 800d2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f7f3 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2fe:	b110      	cbz	r0, 800d306 <_dtoa_r+0x69e>
 800d300:	f018 0f01 	tst.w	r8, #1
 800d304:	d10e      	bne.n	800d324 <_dtoa_r+0x6bc>
 800d306:	9902      	ldr	r1, [sp, #8]
 800d308:	4648      	mov	r0, r9
 800d30a:	f000 fbbd 	bl	800da88 <_Bfree>
 800d30e:	2300      	movs	r3, #0
 800d310:	7033      	strb	r3, [r6, #0]
 800d312:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d314:	3701      	adds	r7, #1
 800d316:	601f      	str	r7, [r3, #0]
 800d318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 824b 	beq.w	800d7b6 <_dtoa_r+0xb4e>
 800d320:	601e      	str	r6, [r3, #0]
 800d322:	e248      	b.n	800d7b6 <_dtoa_r+0xb4e>
 800d324:	46b8      	mov	r8, r7
 800d326:	4633      	mov	r3, r6
 800d328:	461e      	mov	r6, r3
 800d32a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d32e:	2a39      	cmp	r2, #57	@ 0x39
 800d330:	d106      	bne.n	800d340 <_dtoa_r+0x6d8>
 800d332:	459a      	cmp	sl, r3
 800d334:	d1f8      	bne.n	800d328 <_dtoa_r+0x6c0>
 800d336:	2230      	movs	r2, #48	@ 0x30
 800d338:	f108 0801 	add.w	r8, r8, #1
 800d33c:	f88a 2000 	strb.w	r2, [sl]
 800d340:	781a      	ldrb	r2, [r3, #0]
 800d342:	3201      	adds	r2, #1
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	e7a0      	b.n	800d28a <_dtoa_r+0x622>
 800d348:	4b6f      	ldr	r3, [pc, #444]	@ (800d508 <_dtoa_r+0x8a0>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	f7f3 f954 	bl	80005f8 <__aeabi_dmul>
 800d350:	2200      	movs	r2, #0
 800d352:	2300      	movs	r3, #0
 800d354:	4604      	mov	r4, r0
 800d356:	460d      	mov	r5, r1
 800d358:	f7f3 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d09f      	beq.n	800d2a0 <_dtoa_r+0x638>
 800d360:	e7d1      	b.n	800d306 <_dtoa_r+0x69e>
 800d362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d364:	2a00      	cmp	r2, #0
 800d366:	f000 80ea 	beq.w	800d53e <_dtoa_r+0x8d6>
 800d36a:	9a07      	ldr	r2, [sp, #28]
 800d36c:	2a01      	cmp	r2, #1
 800d36e:	f300 80cd 	bgt.w	800d50c <_dtoa_r+0x8a4>
 800d372:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d374:	2a00      	cmp	r2, #0
 800d376:	f000 80c1 	beq.w	800d4fc <_dtoa_r+0x894>
 800d37a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d37e:	9c08      	ldr	r4, [sp, #32]
 800d380:	9e00      	ldr	r6, [sp, #0]
 800d382:	9a00      	ldr	r2, [sp, #0]
 800d384:	441a      	add	r2, r3
 800d386:	9200      	str	r2, [sp, #0]
 800d388:	9a06      	ldr	r2, [sp, #24]
 800d38a:	2101      	movs	r1, #1
 800d38c:	441a      	add	r2, r3
 800d38e:	4648      	mov	r0, r9
 800d390:	9206      	str	r2, [sp, #24]
 800d392:	f000 fc2d 	bl	800dbf0 <__i2b>
 800d396:	4605      	mov	r5, r0
 800d398:	b166      	cbz	r6, 800d3b4 <_dtoa_r+0x74c>
 800d39a:	9b06      	ldr	r3, [sp, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dd09      	ble.n	800d3b4 <_dtoa_r+0x74c>
 800d3a0:	42b3      	cmp	r3, r6
 800d3a2:	9a00      	ldr	r2, [sp, #0]
 800d3a4:	bfa8      	it	ge
 800d3a6:	4633      	movge	r3, r6
 800d3a8:	1ad2      	subs	r2, r2, r3
 800d3aa:	9200      	str	r2, [sp, #0]
 800d3ac:	9a06      	ldr	r2, [sp, #24]
 800d3ae:	1af6      	subs	r6, r6, r3
 800d3b0:	1ad3      	subs	r3, r2, r3
 800d3b2:	9306      	str	r3, [sp, #24]
 800d3b4:	9b08      	ldr	r3, [sp, #32]
 800d3b6:	b30b      	cbz	r3, 800d3fc <_dtoa_r+0x794>
 800d3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 80c6 	beq.w	800d54c <_dtoa_r+0x8e4>
 800d3c0:	2c00      	cmp	r4, #0
 800d3c2:	f000 80c0 	beq.w	800d546 <_dtoa_r+0x8de>
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	4648      	mov	r0, r9
 800d3cc:	f000 fcc8 	bl	800dd60 <__pow5mult>
 800d3d0:	9a02      	ldr	r2, [sp, #8]
 800d3d2:	4601      	mov	r1, r0
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	4648      	mov	r0, r9
 800d3d8:	f000 fc20 	bl	800dc1c <__multiply>
 800d3dc:	9902      	ldr	r1, [sp, #8]
 800d3de:	4680      	mov	r8, r0
 800d3e0:	4648      	mov	r0, r9
 800d3e2:	f000 fb51 	bl	800da88 <_Bfree>
 800d3e6:	9b08      	ldr	r3, [sp, #32]
 800d3e8:	1b1b      	subs	r3, r3, r4
 800d3ea:	9308      	str	r3, [sp, #32]
 800d3ec:	f000 80b1 	beq.w	800d552 <_dtoa_r+0x8ea>
 800d3f0:	9a08      	ldr	r2, [sp, #32]
 800d3f2:	4641      	mov	r1, r8
 800d3f4:	4648      	mov	r0, r9
 800d3f6:	f000 fcb3 	bl	800dd60 <__pow5mult>
 800d3fa:	9002      	str	r0, [sp, #8]
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	4648      	mov	r0, r9
 800d400:	f000 fbf6 	bl	800dbf0 <__i2b>
 800d404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d406:	4604      	mov	r4, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 81d8 	beq.w	800d7be <_dtoa_r+0xb56>
 800d40e:	461a      	mov	r2, r3
 800d410:	4601      	mov	r1, r0
 800d412:	4648      	mov	r0, r9
 800d414:	f000 fca4 	bl	800dd60 <__pow5mult>
 800d418:	9b07      	ldr	r3, [sp, #28]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	4604      	mov	r4, r0
 800d41e:	f300 809f 	bgt.w	800d560 <_dtoa_r+0x8f8>
 800d422:	9b04      	ldr	r3, [sp, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f040 8097 	bne.w	800d558 <_dtoa_r+0x8f0>
 800d42a:	9b05      	ldr	r3, [sp, #20]
 800d42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d430:	2b00      	cmp	r3, #0
 800d432:	f040 8093 	bne.w	800d55c <_dtoa_r+0x8f4>
 800d436:	9b05      	ldr	r3, [sp, #20]
 800d438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d43c:	0d1b      	lsrs	r3, r3, #20
 800d43e:	051b      	lsls	r3, r3, #20
 800d440:	b133      	cbz	r3, 800d450 <_dtoa_r+0x7e8>
 800d442:	9b00      	ldr	r3, [sp, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	9b06      	ldr	r3, [sp, #24]
 800d44a:	3301      	adds	r3, #1
 800d44c:	9306      	str	r3, [sp, #24]
 800d44e:	2301      	movs	r3, #1
 800d450:	9308      	str	r3, [sp, #32]
 800d452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d454:	2b00      	cmp	r3, #0
 800d456:	f000 81b8 	beq.w	800d7ca <_dtoa_r+0xb62>
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d460:	6918      	ldr	r0, [r3, #16]
 800d462:	f000 fb79 	bl	800db58 <__hi0bits>
 800d466:	f1c0 0020 	rsb	r0, r0, #32
 800d46a:	9b06      	ldr	r3, [sp, #24]
 800d46c:	4418      	add	r0, r3
 800d46e:	f010 001f 	ands.w	r0, r0, #31
 800d472:	f000 8082 	beq.w	800d57a <_dtoa_r+0x912>
 800d476:	f1c0 0320 	rsb	r3, r0, #32
 800d47a:	2b04      	cmp	r3, #4
 800d47c:	dd73      	ble.n	800d566 <_dtoa_r+0x8fe>
 800d47e:	9b00      	ldr	r3, [sp, #0]
 800d480:	f1c0 001c 	rsb	r0, r0, #28
 800d484:	4403      	add	r3, r0
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	9b06      	ldr	r3, [sp, #24]
 800d48a:	4403      	add	r3, r0
 800d48c:	4406      	add	r6, r0
 800d48e:	9306      	str	r3, [sp, #24]
 800d490:	9b00      	ldr	r3, [sp, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	dd05      	ble.n	800d4a2 <_dtoa_r+0x83a>
 800d496:	9902      	ldr	r1, [sp, #8]
 800d498:	461a      	mov	r2, r3
 800d49a:	4648      	mov	r0, r9
 800d49c:	f000 fcba 	bl	800de14 <__lshift>
 800d4a0:	9002      	str	r0, [sp, #8]
 800d4a2:	9b06      	ldr	r3, [sp, #24]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	dd05      	ble.n	800d4b4 <_dtoa_r+0x84c>
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 fcb1 	bl	800de14 <__lshift>
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d061      	beq.n	800d57e <_dtoa_r+0x916>
 800d4ba:	9802      	ldr	r0, [sp, #8]
 800d4bc:	4621      	mov	r1, r4
 800d4be:	f000 fd15 	bl	800deec <__mcmp>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	da5b      	bge.n	800d57e <_dtoa_r+0x916>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	9902      	ldr	r1, [sp, #8]
 800d4ca:	220a      	movs	r2, #10
 800d4cc:	4648      	mov	r0, r9
 800d4ce:	f000 fafd 	bl	800dacc <__multadd>
 800d4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d4:	9002      	str	r0, [sp, #8]
 800d4d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 8177 	beq.w	800d7ce <_dtoa_r+0xb66>
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	220a      	movs	r2, #10
 800d4e6:	4648      	mov	r0, r9
 800d4e8:	f000 faf0 	bl	800dacc <__multadd>
 800d4ec:	f1bb 0f00 	cmp.w	fp, #0
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	dc6f      	bgt.n	800d5d4 <_dtoa_r+0x96c>
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	dc49      	bgt.n	800d58e <_dtoa_r+0x926>
 800d4fa:	e06b      	b.n	800d5d4 <_dtoa_r+0x96c>
 800d4fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d502:	e73c      	b.n	800d37e <_dtoa_r+0x716>
 800d504:	3fe00000 	.word	0x3fe00000
 800d508:	40240000 	.word	0x40240000
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	1e5c      	subs	r4, r3, #1
 800d510:	9b08      	ldr	r3, [sp, #32]
 800d512:	42a3      	cmp	r3, r4
 800d514:	db09      	blt.n	800d52a <_dtoa_r+0x8c2>
 800d516:	1b1c      	subs	r4, r3, r4
 800d518:	9b03      	ldr	r3, [sp, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f6bf af30 	bge.w	800d380 <_dtoa_r+0x718>
 800d520:	9b00      	ldr	r3, [sp, #0]
 800d522:	9a03      	ldr	r2, [sp, #12]
 800d524:	1a9e      	subs	r6, r3, r2
 800d526:	2300      	movs	r3, #0
 800d528:	e72b      	b.n	800d382 <_dtoa_r+0x71a>
 800d52a:	9b08      	ldr	r3, [sp, #32]
 800d52c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d52e:	9408      	str	r4, [sp, #32]
 800d530:	1ae3      	subs	r3, r4, r3
 800d532:	441a      	add	r2, r3
 800d534:	9e00      	ldr	r6, [sp, #0]
 800d536:	9b03      	ldr	r3, [sp, #12]
 800d538:	920d      	str	r2, [sp, #52]	@ 0x34
 800d53a:	2400      	movs	r4, #0
 800d53c:	e721      	b.n	800d382 <_dtoa_r+0x71a>
 800d53e:	9c08      	ldr	r4, [sp, #32]
 800d540:	9e00      	ldr	r6, [sp, #0]
 800d542:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d544:	e728      	b.n	800d398 <_dtoa_r+0x730>
 800d546:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d54a:	e751      	b.n	800d3f0 <_dtoa_r+0x788>
 800d54c:	9a08      	ldr	r2, [sp, #32]
 800d54e:	9902      	ldr	r1, [sp, #8]
 800d550:	e750      	b.n	800d3f4 <_dtoa_r+0x78c>
 800d552:	f8cd 8008 	str.w	r8, [sp, #8]
 800d556:	e751      	b.n	800d3fc <_dtoa_r+0x794>
 800d558:	2300      	movs	r3, #0
 800d55a:	e779      	b.n	800d450 <_dtoa_r+0x7e8>
 800d55c:	9b04      	ldr	r3, [sp, #16]
 800d55e:	e777      	b.n	800d450 <_dtoa_r+0x7e8>
 800d560:	2300      	movs	r3, #0
 800d562:	9308      	str	r3, [sp, #32]
 800d564:	e779      	b.n	800d45a <_dtoa_r+0x7f2>
 800d566:	d093      	beq.n	800d490 <_dtoa_r+0x828>
 800d568:	9a00      	ldr	r2, [sp, #0]
 800d56a:	331c      	adds	r3, #28
 800d56c:	441a      	add	r2, r3
 800d56e:	9200      	str	r2, [sp, #0]
 800d570:	9a06      	ldr	r2, [sp, #24]
 800d572:	441a      	add	r2, r3
 800d574:	441e      	add	r6, r3
 800d576:	9206      	str	r2, [sp, #24]
 800d578:	e78a      	b.n	800d490 <_dtoa_r+0x828>
 800d57a:	4603      	mov	r3, r0
 800d57c:	e7f4      	b.n	800d568 <_dtoa_r+0x900>
 800d57e:	9b03      	ldr	r3, [sp, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	46b8      	mov	r8, r7
 800d584:	dc20      	bgt.n	800d5c8 <_dtoa_r+0x960>
 800d586:	469b      	mov	fp, r3
 800d588:	9b07      	ldr	r3, [sp, #28]
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	dd1e      	ble.n	800d5cc <_dtoa_r+0x964>
 800d58e:	f1bb 0f00 	cmp.w	fp, #0
 800d592:	f47f adb1 	bne.w	800d0f8 <_dtoa_r+0x490>
 800d596:	4621      	mov	r1, r4
 800d598:	465b      	mov	r3, fp
 800d59a:	2205      	movs	r2, #5
 800d59c:	4648      	mov	r0, r9
 800d59e:	f000 fa95 	bl	800dacc <__multadd>
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	9802      	ldr	r0, [sp, #8]
 800d5a8:	f000 fca0 	bl	800deec <__mcmp>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	f77f ada3 	ble.w	800d0f8 <_dtoa_r+0x490>
 800d5b2:	4656      	mov	r6, sl
 800d5b4:	2331      	movs	r3, #49	@ 0x31
 800d5b6:	f806 3b01 	strb.w	r3, [r6], #1
 800d5ba:	f108 0801 	add.w	r8, r8, #1
 800d5be:	e59f      	b.n	800d100 <_dtoa_r+0x498>
 800d5c0:	9c03      	ldr	r4, [sp, #12]
 800d5c2:	46b8      	mov	r8, r7
 800d5c4:	4625      	mov	r5, r4
 800d5c6:	e7f4      	b.n	800d5b2 <_dtoa_r+0x94a>
 800d5c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f000 8101 	beq.w	800d7d6 <_dtoa_r+0xb6e>
 800d5d4:	2e00      	cmp	r6, #0
 800d5d6:	dd05      	ble.n	800d5e4 <_dtoa_r+0x97c>
 800d5d8:	4629      	mov	r1, r5
 800d5da:	4632      	mov	r2, r6
 800d5dc:	4648      	mov	r0, r9
 800d5de:	f000 fc19 	bl	800de14 <__lshift>
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	9b08      	ldr	r3, [sp, #32]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d05c      	beq.n	800d6a4 <_dtoa_r+0xa3c>
 800d5ea:	6869      	ldr	r1, [r5, #4]
 800d5ec:	4648      	mov	r0, r9
 800d5ee:	f000 fa0b 	bl	800da08 <_Balloc>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b928      	cbnz	r0, 800d602 <_dtoa_r+0x99a>
 800d5f6:	4b82      	ldr	r3, [pc, #520]	@ (800d800 <_dtoa_r+0xb98>)
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5fe:	f7ff bb4a 	b.w	800cc96 <_dtoa_r+0x2e>
 800d602:	692a      	ldr	r2, [r5, #16]
 800d604:	3202      	adds	r2, #2
 800d606:	0092      	lsls	r2, r2, #2
 800d608:	f105 010c 	add.w	r1, r5, #12
 800d60c:	300c      	adds	r0, #12
 800d60e:	f7ff fa94 	bl	800cb3a <memcpy>
 800d612:	2201      	movs	r2, #1
 800d614:	4631      	mov	r1, r6
 800d616:	4648      	mov	r0, r9
 800d618:	f000 fbfc 	bl	800de14 <__lshift>
 800d61c:	f10a 0301 	add.w	r3, sl, #1
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	eb0a 030b 	add.w	r3, sl, fp
 800d626:	9308      	str	r3, [sp, #32]
 800d628:	9b04      	ldr	r3, [sp, #16]
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	462f      	mov	r7, r5
 800d630:	9306      	str	r3, [sp, #24]
 800d632:	4605      	mov	r5, r0
 800d634:	9b00      	ldr	r3, [sp, #0]
 800d636:	9802      	ldr	r0, [sp, #8]
 800d638:	4621      	mov	r1, r4
 800d63a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d63e:	f7ff fa8a 	bl	800cb56 <quorem>
 800d642:	4603      	mov	r3, r0
 800d644:	3330      	adds	r3, #48	@ 0x30
 800d646:	9003      	str	r0, [sp, #12]
 800d648:	4639      	mov	r1, r7
 800d64a:	9802      	ldr	r0, [sp, #8]
 800d64c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d64e:	f000 fc4d 	bl	800deec <__mcmp>
 800d652:	462a      	mov	r2, r5
 800d654:	9004      	str	r0, [sp, #16]
 800d656:	4621      	mov	r1, r4
 800d658:	4648      	mov	r0, r9
 800d65a:	f000 fc63 	bl	800df24 <__mdiff>
 800d65e:	68c2      	ldr	r2, [r0, #12]
 800d660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d662:	4606      	mov	r6, r0
 800d664:	bb02      	cbnz	r2, 800d6a8 <_dtoa_r+0xa40>
 800d666:	4601      	mov	r1, r0
 800d668:	9802      	ldr	r0, [sp, #8]
 800d66a:	f000 fc3f 	bl	800deec <__mcmp>
 800d66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d670:	4602      	mov	r2, r0
 800d672:	4631      	mov	r1, r6
 800d674:	4648      	mov	r0, r9
 800d676:	920c      	str	r2, [sp, #48]	@ 0x30
 800d678:	9309      	str	r3, [sp, #36]	@ 0x24
 800d67a:	f000 fa05 	bl	800da88 <_Bfree>
 800d67e:	9b07      	ldr	r3, [sp, #28]
 800d680:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d682:	9e00      	ldr	r6, [sp, #0]
 800d684:	ea42 0103 	orr.w	r1, r2, r3
 800d688:	9b06      	ldr	r3, [sp, #24]
 800d68a:	4319      	orrs	r1, r3
 800d68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d68e:	d10d      	bne.n	800d6ac <_dtoa_r+0xa44>
 800d690:	2b39      	cmp	r3, #57	@ 0x39
 800d692:	d027      	beq.n	800d6e4 <_dtoa_r+0xa7c>
 800d694:	9a04      	ldr	r2, [sp, #16]
 800d696:	2a00      	cmp	r2, #0
 800d698:	dd01      	ble.n	800d69e <_dtoa_r+0xa36>
 800d69a:	9b03      	ldr	r3, [sp, #12]
 800d69c:	3331      	adds	r3, #49	@ 0x31
 800d69e:	f88b 3000 	strb.w	r3, [fp]
 800d6a2:	e52e      	b.n	800d102 <_dtoa_r+0x49a>
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	e7b9      	b.n	800d61c <_dtoa_r+0x9b4>
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	e7e2      	b.n	800d672 <_dtoa_r+0xa0a>
 800d6ac:	9904      	ldr	r1, [sp, #16]
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	db04      	blt.n	800d6bc <_dtoa_r+0xa54>
 800d6b2:	9807      	ldr	r0, [sp, #28]
 800d6b4:	4301      	orrs	r1, r0
 800d6b6:	9806      	ldr	r0, [sp, #24]
 800d6b8:	4301      	orrs	r1, r0
 800d6ba:	d120      	bne.n	800d6fe <_dtoa_r+0xa96>
 800d6bc:	2a00      	cmp	r2, #0
 800d6be:	ddee      	ble.n	800d69e <_dtoa_r+0xa36>
 800d6c0:	9902      	ldr	r1, [sp, #8]
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	4648      	mov	r0, r9
 800d6c8:	f000 fba4 	bl	800de14 <__lshift>
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	9002      	str	r0, [sp, #8]
 800d6d0:	f000 fc0c 	bl	800deec <__mcmp>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	9b00      	ldr	r3, [sp, #0]
 800d6d8:	dc02      	bgt.n	800d6e0 <_dtoa_r+0xa78>
 800d6da:	d1e0      	bne.n	800d69e <_dtoa_r+0xa36>
 800d6dc:	07da      	lsls	r2, r3, #31
 800d6de:	d5de      	bpl.n	800d69e <_dtoa_r+0xa36>
 800d6e0:	2b39      	cmp	r3, #57	@ 0x39
 800d6e2:	d1da      	bne.n	800d69a <_dtoa_r+0xa32>
 800d6e4:	2339      	movs	r3, #57	@ 0x39
 800d6e6:	f88b 3000 	strb.w	r3, [fp]
 800d6ea:	4633      	mov	r3, r6
 800d6ec:	461e      	mov	r6, r3
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6f4:	2a39      	cmp	r2, #57	@ 0x39
 800d6f6:	d04e      	beq.n	800d796 <_dtoa_r+0xb2e>
 800d6f8:	3201      	adds	r2, #1
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	e501      	b.n	800d102 <_dtoa_r+0x49a>
 800d6fe:	2a00      	cmp	r2, #0
 800d700:	dd03      	ble.n	800d70a <_dtoa_r+0xaa2>
 800d702:	2b39      	cmp	r3, #57	@ 0x39
 800d704:	d0ee      	beq.n	800d6e4 <_dtoa_r+0xa7c>
 800d706:	3301      	adds	r3, #1
 800d708:	e7c9      	b.n	800d69e <_dtoa_r+0xa36>
 800d70a:	9a00      	ldr	r2, [sp, #0]
 800d70c:	9908      	ldr	r1, [sp, #32]
 800d70e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d712:	428a      	cmp	r2, r1
 800d714:	d028      	beq.n	800d768 <_dtoa_r+0xb00>
 800d716:	9902      	ldr	r1, [sp, #8]
 800d718:	2300      	movs	r3, #0
 800d71a:	220a      	movs	r2, #10
 800d71c:	4648      	mov	r0, r9
 800d71e:	f000 f9d5 	bl	800dacc <__multadd>
 800d722:	42af      	cmp	r7, r5
 800d724:	9002      	str	r0, [sp, #8]
 800d726:	f04f 0300 	mov.w	r3, #0
 800d72a:	f04f 020a 	mov.w	r2, #10
 800d72e:	4639      	mov	r1, r7
 800d730:	4648      	mov	r0, r9
 800d732:	d107      	bne.n	800d744 <_dtoa_r+0xadc>
 800d734:	f000 f9ca 	bl	800dacc <__multadd>
 800d738:	4607      	mov	r7, r0
 800d73a:	4605      	mov	r5, r0
 800d73c:	9b00      	ldr	r3, [sp, #0]
 800d73e:	3301      	adds	r3, #1
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	e777      	b.n	800d634 <_dtoa_r+0x9cc>
 800d744:	f000 f9c2 	bl	800dacc <__multadd>
 800d748:	4629      	mov	r1, r5
 800d74a:	4607      	mov	r7, r0
 800d74c:	2300      	movs	r3, #0
 800d74e:	220a      	movs	r2, #10
 800d750:	4648      	mov	r0, r9
 800d752:	f000 f9bb 	bl	800dacc <__multadd>
 800d756:	4605      	mov	r5, r0
 800d758:	e7f0      	b.n	800d73c <_dtoa_r+0xad4>
 800d75a:	f1bb 0f00 	cmp.w	fp, #0
 800d75e:	bfcc      	ite	gt
 800d760:	465e      	movgt	r6, fp
 800d762:	2601      	movle	r6, #1
 800d764:	4456      	add	r6, sl
 800d766:	2700      	movs	r7, #0
 800d768:	9902      	ldr	r1, [sp, #8]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	2201      	movs	r2, #1
 800d76e:	4648      	mov	r0, r9
 800d770:	f000 fb50 	bl	800de14 <__lshift>
 800d774:	4621      	mov	r1, r4
 800d776:	9002      	str	r0, [sp, #8]
 800d778:	f000 fbb8 	bl	800deec <__mcmp>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	dcb4      	bgt.n	800d6ea <_dtoa_r+0xa82>
 800d780:	d102      	bne.n	800d788 <_dtoa_r+0xb20>
 800d782:	9b00      	ldr	r3, [sp, #0]
 800d784:	07db      	lsls	r3, r3, #31
 800d786:	d4b0      	bmi.n	800d6ea <_dtoa_r+0xa82>
 800d788:	4633      	mov	r3, r6
 800d78a:	461e      	mov	r6, r3
 800d78c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d790:	2a30      	cmp	r2, #48	@ 0x30
 800d792:	d0fa      	beq.n	800d78a <_dtoa_r+0xb22>
 800d794:	e4b5      	b.n	800d102 <_dtoa_r+0x49a>
 800d796:	459a      	cmp	sl, r3
 800d798:	d1a8      	bne.n	800d6ec <_dtoa_r+0xa84>
 800d79a:	2331      	movs	r3, #49	@ 0x31
 800d79c:	f108 0801 	add.w	r8, r8, #1
 800d7a0:	f88a 3000 	strb.w	r3, [sl]
 800d7a4:	e4ad      	b.n	800d102 <_dtoa_r+0x49a>
 800d7a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d804 <_dtoa_r+0xb9c>
 800d7ac:	b11b      	cbz	r3, 800d7b6 <_dtoa_r+0xb4e>
 800d7ae:	f10a 0308 	add.w	r3, sl, #8
 800d7b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d7b4:	6013      	str	r3, [r2, #0]
 800d7b6:	4650      	mov	r0, sl
 800d7b8:	b017      	add	sp, #92	@ 0x5c
 800d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7be:	9b07      	ldr	r3, [sp, #28]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	f77f ae2e 	ble.w	800d422 <_dtoa_r+0x7ba>
 800d7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7c8:	9308      	str	r3, [sp, #32]
 800d7ca:	2001      	movs	r0, #1
 800d7cc:	e64d      	b.n	800d46a <_dtoa_r+0x802>
 800d7ce:	f1bb 0f00 	cmp.w	fp, #0
 800d7d2:	f77f aed9 	ble.w	800d588 <_dtoa_r+0x920>
 800d7d6:	4656      	mov	r6, sl
 800d7d8:	9802      	ldr	r0, [sp, #8]
 800d7da:	4621      	mov	r1, r4
 800d7dc:	f7ff f9bb 	bl	800cb56 <quorem>
 800d7e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d7e4:	f806 3b01 	strb.w	r3, [r6], #1
 800d7e8:	eba6 020a 	sub.w	r2, r6, sl
 800d7ec:	4593      	cmp	fp, r2
 800d7ee:	ddb4      	ble.n	800d75a <_dtoa_r+0xaf2>
 800d7f0:	9902      	ldr	r1, [sp, #8]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	220a      	movs	r2, #10
 800d7f6:	4648      	mov	r0, r9
 800d7f8:	f000 f968 	bl	800dacc <__multadd>
 800d7fc:	9002      	str	r0, [sp, #8]
 800d7fe:	e7eb      	b.n	800d7d8 <_dtoa_r+0xb70>
 800d800:	0800fbe8 	.word	0x0800fbe8
 800d804:	0800fb6c 	.word	0x0800fb6c

0800d808 <_free_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4605      	mov	r5, r0
 800d80c:	2900      	cmp	r1, #0
 800d80e:	d041      	beq.n	800d894 <_free_r+0x8c>
 800d810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d814:	1f0c      	subs	r4, r1, #4
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfb8      	it	lt
 800d81a:	18e4      	addlt	r4, r4, r3
 800d81c:	f000 f8e8 	bl	800d9f0 <__malloc_lock>
 800d820:	4a1d      	ldr	r2, [pc, #116]	@ (800d898 <_free_r+0x90>)
 800d822:	6813      	ldr	r3, [r2, #0]
 800d824:	b933      	cbnz	r3, 800d834 <_free_r+0x2c>
 800d826:	6063      	str	r3, [r4, #4]
 800d828:	6014      	str	r4, [r2, #0]
 800d82a:	4628      	mov	r0, r5
 800d82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d830:	f000 b8e4 	b.w	800d9fc <__malloc_unlock>
 800d834:	42a3      	cmp	r3, r4
 800d836:	d908      	bls.n	800d84a <_free_r+0x42>
 800d838:	6820      	ldr	r0, [r4, #0]
 800d83a:	1821      	adds	r1, r4, r0
 800d83c:	428b      	cmp	r3, r1
 800d83e:	bf01      	itttt	eq
 800d840:	6819      	ldreq	r1, [r3, #0]
 800d842:	685b      	ldreq	r3, [r3, #4]
 800d844:	1809      	addeq	r1, r1, r0
 800d846:	6021      	streq	r1, [r4, #0]
 800d848:	e7ed      	b.n	800d826 <_free_r+0x1e>
 800d84a:	461a      	mov	r2, r3
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	b10b      	cbz	r3, 800d854 <_free_r+0x4c>
 800d850:	42a3      	cmp	r3, r4
 800d852:	d9fa      	bls.n	800d84a <_free_r+0x42>
 800d854:	6811      	ldr	r1, [r2, #0]
 800d856:	1850      	adds	r0, r2, r1
 800d858:	42a0      	cmp	r0, r4
 800d85a:	d10b      	bne.n	800d874 <_free_r+0x6c>
 800d85c:	6820      	ldr	r0, [r4, #0]
 800d85e:	4401      	add	r1, r0
 800d860:	1850      	adds	r0, r2, r1
 800d862:	4283      	cmp	r3, r0
 800d864:	6011      	str	r1, [r2, #0]
 800d866:	d1e0      	bne.n	800d82a <_free_r+0x22>
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	6053      	str	r3, [r2, #4]
 800d86e:	4408      	add	r0, r1
 800d870:	6010      	str	r0, [r2, #0]
 800d872:	e7da      	b.n	800d82a <_free_r+0x22>
 800d874:	d902      	bls.n	800d87c <_free_r+0x74>
 800d876:	230c      	movs	r3, #12
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	e7d6      	b.n	800d82a <_free_r+0x22>
 800d87c:	6820      	ldr	r0, [r4, #0]
 800d87e:	1821      	adds	r1, r4, r0
 800d880:	428b      	cmp	r3, r1
 800d882:	bf04      	itt	eq
 800d884:	6819      	ldreq	r1, [r3, #0]
 800d886:	685b      	ldreq	r3, [r3, #4]
 800d888:	6063      	str	r3, [r4, #4]
 800d88a:	bf04      	itt	eq
 800d88c:	1809      	addeq	r1, r1, r0
 800d88e:	6021      	streq	r1, [r4, #0]
 800d890:	6054      	str	r4, [r2, #4]
 800d892:	e7ca      	b.n	800d82a <_free_r+0x22>
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	20001920 	.word	0x20001920

0800d89c <malloc>:
 800d89c:	4b02      	ldr	r3, [pc, #8]	@ (800d8a8 <malloc+0xc>)
 800d89e:	4601      	mov	r1, r0
 800d8a0:	6818      	ldr	r0, [r3, #0]
 800d8a2:	f000 b825 	b.w	800d8f0 <_malloc_r>
 800d8a6:	bf00      	nop
 800d8a8:	20000140 	.word	0x20000140

0800d8ac <sbrk_aligned>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800d8ec <sbrk_aligned+0x40>)
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	6831      	ldr	r1, [r6, #0]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	b911      	cbnz	r1, 800d8be <sbrk_aligned+0x12>
 800d8b8:	f001 f804 	bl	800e8c4 <_sbrk_r>
 800d8bc:	6030      	str	r0, [r6, #0]
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	f000 ffff 	bl	800e8c4 <_sbrk_r>
 800d8c6:	1c43      	adds	r3, r0, #1
 800d8c8:	d103      	bne.n	800d8d2 <sbrk_aligned+0x26>
 800d8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	bd70      	pop	{r4, r5, r6, pc}
 800d8d2:	1cc4      	adds	r4, r0, #3
 800d8d4:	f024 0403 	bic.w	r4, r4, #3
 800d8d8:	42a0      	cmp	r0, r4
 800d8da:	d0f8      	beq.n	800d8ce <sbrk_aligned+0x22>
 800d8dc:	1a21      	subs	r1, r4, r0
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 fff0 	bl	800e8c4 <_sbrk_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d1f2      	bne.n	800d8ce <sbrk_aligned+0x22>
 800d8e8:	e7ef      	b.n	800d8ca <sbrk_aligned+0x1e>
 800d8ea:	bf00      	nop
 800d8ec:	2000191c 	.word	0x2000191c

0800d8f0 <_malloc_r>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	1ccd      	adds	r5, r1, #3
 800d8f6:	f025 0503 	bic.w	r5, r5, #3
 800d8fa:	3508      	adds	r5, #8
 800d8fc:	2d0c      	cmp	r5, #12
 800d8fe:	bf38      	it	cc
 800d900:	250c      	movcc	r5, #12
 800d902:	2d00      	cmp	r5, #0
 800d904:	4606      	mov	r6, r0
 800d906:	db01      	blt.n	800d90c <_malloc_r+0x1c>
 800d908:	42a9      	cmp	r1, r5
 800d90a:	d904      	bls.n	800d916 <_malloc_r+0x26>
 800d90c:	230c      	movs	r3, #12
 800d90e:	6033      	str	r3, [r6, #0]
 800d910:	2000      	movs	r0, #0
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9ec <_malloc_r+0xfc>
 800d91a:	f000 f869 	bl	800d9f0 <__malloc_lock>
 800d91e:	f8d8 3000 	ldr.w	r3, [r8]
 800d922:	461c      	mov	r4, r3
 800d924:	bb44      	cbnz	r4, 800d978 <_malloc_r+0x88>
 800d926:	4629      	mov	r1, r5
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff ffbf 	bl	800d8ac <sbrk_aligned>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	4604      	mov	r4, r0
 800d932:	d158      	bne.n	800d9e6 <_malloc_r+0xf6>
 800d934:	f8d8 4000 	ldr.w	r4, [r8]
 800d938:	4627      	mov	r7, r4
 800d93a:	2f00      	cmp	r7, #0
 800d93c:	d143      	bne.n	800d9c6 <_malloc_r+0xd6>
 800d93e:	2c00      	cmp	r4, #0
 800d940:	d04b      	beq.n	800d9da <_malloc_r+0xea>
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	4639      	mov	r1, r7
 800d946:	4630      	mov	r0, r6
 800d948:	eb04 0903 	add.w	r9, r4, r3
 800d94c:	f000 ffba 	bl	800e8c4 <_sbrk_r>
 800d950:	4581      	cmp	r9, r0
 800d952:	d142      	bne.n	800d9da <_malloc_r+0xea>
 800d954:	6821      	ldr	r1, [r4, #0]
 800d956:	1a6d      	subs	r5, r5, r1
 800d958:	4629      	mov	r1, r5
 800d95a:	4630      	mov	r0, r6
 800d95c:	f7ff ffa6 	bl	800d8ac <sbrk_aligned>
 800d960:	3001      	adds	r0, #1
 800d962:	d03a      	beq.n	800d9da <_malloc_r+0xea>
 800d964:	6823      	ldr	r3, [r4, #0]
 800d966:	442b      	add	r3, r5
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	f8d8 3000 	ldr.w	r3, [r8]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	bb62      	cbnz	r2, 800d9cc <_malloc_r+0xdc>
 800d972:	f8c8 7000 	str.w	r7, [r8]
 800d976:	e00f      	b.n	800d998 <_malloc_r+0xa8>
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	1b52      	subs	r2, r2, r5
 800d97c:	d420      	bmi.n	800d9c0 <_malloc_r+0xd0>
 800d97e:	2a0b      	cmp	r2, #11
 800d980:	d917      	bls.n	800d9b2 <_malloc_r+0xc2>
 800d982:	1961      	adds	r1, r4, r5
 800d984:	42a3      	cmp	r3, r4
 800d986:	6025      	str	r5, [r4, #0]
 800d988:	bf18      	it	ne
 800d98a:	6059      	strne	r1, [r3, #4]
 800d98c:	6863      	ldr	r3, [r4, #4]
 800d98e:	bf08      	it	eq
 800d990:	f8c8 1000 	streq.w	r1, [r8]
 800d994:	5162      	str	r2, [r4, r5]
 800d996:	604b      	str	r3, [r1, #4]
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 f82f 	bl	800d9fc <__malloc_unlock>
 800d99e:	f104 000b 	add.w	r0, r4, #11
 800d9a2:	1d23      	adds	r3, r4, #4
 800d9a4:	f020 0007 	bic.w	r0, r0, #7
 800d9a8:	1ac2      	subs	r2, r0, r3
 800d9aa:	bf1c      	itt	ne
 800d9ac:	1a1b      	subne	r3, r3, r0
 800d9ae:	50a3      	strne	r3, [r4, r2]
 800d9b0:	e7af      	b.n	800d912 <_malloc_r+0x22>
 800d9b2:	6862      	ldr	r2, [r4, #4]
 800d9b4:	42a3      	cmp	r3, r4
 800d9b6:	bf0c      	ite	eq
 800d9b8:	f8c8 2000 	streq.w	r2, [r8]
 800d9bc:	605a      	strne	r2, [r3, #4]
 800d9be:	e7eb      	b.n	800d998 <_malloc_r+0xa8>
 800d9c0:	4623      	mov	r3, r4
 800d9c2:	6864      	ldr	r4, [r4, #4]
 800d9c4:	e7ae      	b.n	800d924 <_malloc_r+0x34>
 800d9c6:	463c      	mov	r4, r7
 800d9c8:	687f      	ldr	r7, [r7, #4]
 800d9ca:	e7b6      	b.n	800d93a <_malloc_r+0x4a>
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	42a3      	cmp	r3, r4
 800d9d2:	d1fb      	bne.n	800d9cc <_malloc_r+0xdc>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	6053      	str	r3, [r2, #4]
 800d9d8:	e7de      	b.n	800d998 <_malloc_r+0xa8>
 800d9da:	230c      	movs	r3, #12
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f000 f80c 	bl	800d9fc <__malloc_unlock>
 800d9e4:	e794      	b.n	800d910 <_malloc_r+0x20>
 800d9e6:	6005      	str	r5, [r0, #0]
 800d9e8:	e7d6      	b.n	800d998 <_malloc_r+0xa8>
 800d9ea:	bf00      	nop
 800d9ec:	20001920 	.word	0x20001920

0800d9f0 <__malloc_lock>:
 800d9f0:	4801      	ldr	r0, [pc, #4]	@ (800d9f8 <__malloc_lock+0x8>)
 800d9f2:	f7ff b8a0 	b.w	800cb36 <__retarget_lock_acquire_recursive>
 800d9f6:	bf00      	nop
 800d9f8:	20001918 	.word	0x20001918

0800d9fc <__malloc_unlock>:
 800d9fc:	4801      	ldr	r0, [pc, #4]	@ (800da04 <__malloc_unlock+0x8>)
 800d9fe:	f7ff b89b 	b.w	800cb38 <__retarget_lock_release_recursive>
 800da02:	bf00      	nop
 800da04:	20001918 	.word	0x20001918

0800da08 <_Balloc>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	69c6      	ldr	r6, [r0, #28]
 800da0c:	4604      	mov	r4, r0
 800da0e:	460d      	mov	r5, r1
 800da10:	b976      	cbnz	r6, 800da30 <_Balloc+0x28>
 800da12:	2010      	movs	r0, #16
 800da14:	f7ff ff42 	bl	800d89c <malloc>
 800da18:	4602      	mov	r2, r0
 800da1a:	61e0      	str	r0, [r4, #28]
 800da1c:	b920      	cbnz	r0, 800da28 <_Balloc+0x20>
 800da1e:	4b18      	ldr	r3, [pc, #96]	@ (800da80 <_Balloc+0x78>)
 800da20:	4818      	ldr	r0, [pc, #96]	@ (800da84 <_Balloc+0x7c>)
 800da22:	216b      	movs	r1, #107	@ 0x6b
 800da24:	f000 ff5e 	bl	800e8e4 <__assert_func>
 800da28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da2c:	6006      	str	r6, [r0, #0]
 800da2e:	60c6      	str	r6, [r0, #12]
 800da30:	69e6      	ldr	r6, [r4, #28]
 800da32:	68f3      	ldr	r3, [r6, #12]
 800da34:	b183      	cbz	r3, 800da58 <_Balloc+0x50>
 800da36:	69e3      	ldr	r3, [r4, #28]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da3e:	b9b8      	cbnz	r0, 800da70 <_Balloc+0x68>
 800da40:	2101      	movs	r1, #1
 800da42:	fa01 f605 	lsl.w	r6, r1, r5
 800da46:	1d72      	adds	r2, r6, #5
 800da48:	0092      	lsls	r2, r2, #2
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 ff68 	bl	800e920 <_calloc_r>
 800da50:	b160      	cbz	r0, 800da6c <_Balloc+0x64>
 800da52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da56:	e00e      	b.n	800da76 <_Balloc+0x6e>
 800da58:	2221      	movs	r2, #33	@ 0x21
 800da5a:	2104      	movs	r1, #4
 800da5c:	4620      	mov	r0, r4
 800da5e:	f000 ff5f 	bl	800e920 <_calloc_r>
 800da62:	69e3      	ldr	r3, [r4, #28]
 800da64:	60f0      	str	r0, [r6, #12]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1e4      	bne.n	800da36 <_Balloc+0x2e>
 800da6c:	2000      	movs	r0, #0
 800da6e:	bd70      	pop	{r4, r5, r6, pc}
 800da70:	6802      	ldr	r2, [r0, #0]
 800da72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da76:	2300      	movs	r3, #0
 800da78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da7c:	e7f7      	b.n	800da6e <_Balloc+0x66>
 800da7e:	bf00      	nop
 800da80:	0800fb79 	.word	0x0800fb79
 800da84:	0800fbf9 	.word	0x0800fbf9

0800da88 <_Bfree>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	69c6      	ldr	r6, [r0, #28]
 800da8c:	4605      	mov	r5, r0
 800da8e:	460c      	mov	r4, r1
 800da90:	b976      	cbnz	r6, 800dab0 <_Bfree+0x28>
 800da92:	2010      	movs	r0, #16
 800da94:	f7ff ff02 	bl	800d89c <malloc>
 800da98:	4602      	mov	r2, r0
 800da9a:	61e8      	str	r0, [r5, #28]
 800da9c:	b920      	cbnz	r0, 800daa8 <_Bfree+0x20>
 800da9e:	4b09      	ldr	r3, [pc, #36]	@ (800dac4 <_Bfree+0x3c>)
 800daa0:	4809      	ldr	r0, [pc, #36]	@ (800dac8 <_Bfree+0x40>)
 800daa2:	218f      	movs	r1, #143	@ 0x8f
 800daa4:	f000 ff1e 	bl	800e8e4 <__assert_func>
 800daa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800daac:	6006      	str	r6, [r0, #0]
 800daae:	60c6      	str	r6, [r0, #12]
 800dab0:	b13c      	cbz	r4, 800dac2 <_Bfree+0x3a>
 800dab2:	69eb      	ldr	r3, [r5, #28]
 800dab4:	6862      	ldr	r2, [r4, #4]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dabc:	6021      	str	r1, [r4, #0]
 800dabe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dac2:	bd70      	pop	{r4, r5, r6, pc}
 800dac4:	0800fb79 	.word	0x0800fb79
 800dac8:	0800fbf9 	.word	0x0800fbf9

0800dacc <__multadd>:
 800dacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad0:	690d      	ldr	r5, [r1, #16]
 800dad2:	4607      	mov	r7, r0
 800dad4:	460c      	mov	r4, r1
 800dad6:	461e      	mov	r6, r3
 800dad8:	f101 0c14 	add.w	ip, r1, #20
 800dadc:	2000      	movs	r0, #0
 800dade:	f8dc 3000 	ldr.w	r3, [ip]
 800dae2:	b299      	uxth	r1, r3
 800dae4:	fb02 6101 	mla	r1, r2, r1, r6
 800dae8:	0c1e      	lsrs	r6, r3, #16
 800daea:	0c0b      	lsrs	r3, r1, #16
 800daec:	fb02 3306 	mla	r3, r2, r6, r3
 800daf0:	b289      	uxth	r1, r1
 800daf2:	3001      	adds	r0, #1
 800daf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800daf8:	4285      	cmp	r5, r0
 800dafa:	f84c 1b04 	str.w	r1, [ip], #4
 800dafe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db02:	dcec      	bgt.n	800dade <__multadd+0x12>
 800db04:	b30e      	cbz	r6, 800db4a <__multadd+0x7e>
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	42ab      	cmp	r3, r5
 800db0a:	dc19      	bgt.n	800db40 <__multadd+0x74>
 800db0c:	6861      	ldr	r1, [r4, #4]
 800db0e:	4638      	mov	r0, r7
 800db10:	3101      	adds	r1, #1
 800db12:	f7ff ff79 	bl	800da08 <_Balloc>
 800db16:	4680      	mov	r8, r0
 800db18:	b928      	cbnz	r0, 800db26 <__multadd+0x5a>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4b0c      	ldr	r3, [pc, #48]	@ (800db50 <__multadd+0x84>)
 800db1e:	480d      	ldr	r0, [pc, #52]	@ (800db54 <__multadd+0x88>)
 800db20:	21ba      	movs	r1, #186	@ 0xba
 800db22:	f000 fedf 	bl	800e8e4 <__assert_func>
 800db26:	6922      	ldr	r2, [r4, #16]
 800db28:	3202      	adds	r2, #2
 800db2a:	f104 010c 	add.w	r1, r4, #12
 800db2e:	0092      	lsls	r2, r2, #2
 800db30:	300c      	adds	r0, #12
 800db32:	f7ff f802 	bl	800cb3a <memcpy>
 800db36:	4621      	mov	r1, r4
 800db38:	4638      	mov	r0, r7
 800db3a:	f7ff ffa5 	bl	800da88 <_Bfree>
 800db3e:	4644      	mov	r4, r8
 800db40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db44:	3501      	adds	r5, #1
 800db46:	615e      	str	r6, [r3, #20]
 800db48:	6125      	str	r5, [r4, #16]
 800db4a:	4620      	mov	r0, r4
 800db4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db50:	0800fbe8 	.word	0x0800fbe8
 800db54:	0800fbf9 	.word	0x0800fbf9

0800db58 <__hi0bits>:
 800db58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db5c:	4603      	mov	r3, r0
 800db5e:	bf36      	itet	cc
 800db60:	0403      	lslcc	r3, r0, #16
 800db62:	2000      	movcs	r0, #0
 800db64:	2010      	movcc	r0, #16
 800db66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db6a:	bf3c      	itt	cc
 800db6c:	021b      	lslcc	r3, r3, #8
 800db6e:	3008      	addcc	r0, #8
 800db70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db74:	bf3c      	itt	cc
 800db76:	011b      	lslcc	r3, r3, #4
 800db78:	3004      	addcc	r0, #4
 800db7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db7e:	bf3c      	itt	cc
 800db80:	009b      	lslcc	r3, r3, #2
 800db82:	3002      	addcc	r0, #2
 800db84:	2b00      	cmp	r3, #0
 800db86:	db05      	blt.n	800db94 <__hi0bits+0x3c>
 800db88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db8c:	f100 0001 	add.w	r0, r0, #1
 800db90:	bf08      	it	eq
 800db92:	2020      	moveq	r0, #32
 800db94:	4770      	bx	lr

0800db96 <__lo0bits>:
 800db96:	6803      	ldr	r3, [r0, #0]
 800db98:	4602      	mov	r2, r0
 800db9a:	f013 0007 	ands.w	r0, r3, #7
 800db9e:	d00b      	beq.n	800dbb8 <__lo0bits+0x22>
 800dba0:	07d9      	lsls	r1, r3, #31
 800dba2:	d421      	bmi.n	800dbe8 <__lo0bits+0x52>
 800dba4:	0798      	lsls	r0, r3, #30
 800dba6:	bf49      	itett	mi
 800dba8:	085b      	lsrmi	r3, r3, #1
 800dbaa:	089b      	lsrpl	r3, r3, #2
 800dbac:	2001      	movmi	r0, #1
 800dbae:	6013      	strmi	r3, [r2, #0]
 800dbb0:	bf5c      	itt	pl
 800dbb2:	6013      	strpl	r3, [r2, #0]
 800dbb4:	2002      	movpl	r0, #2
 800dbb6:	4770      	bx	lr
 800dbb8:	b299      	uxth	r1, r3
 800dbba:	b909      	cbnz	r1, 800dbc0 <__lo0bits+0x2a>
 800dbbc:	0c1b      	lsrs	r3, r3, #16
 800dbbe:	2010      	movs	r0, #16
 800dbc0:	b2d9      	uxtb	r1, r3
 800dbc2:	b909      	cbnz	r1, 800dbc8 <__lo0bits+0x32>
 800dbc4:	3008      	adds	r0, #8
 800dbc6:	0a1b      	lsrs	r3, r3, #8
 800dbc8:	0719      	lsls	r1, r3, #28
 800dbca:	bf04      	itt	eq
 800dbcc:	091b      	lsreq	r3, r3, #4
 800dbce:	3004      	addeq	r0, #4
 800dbd0:	0799      	lsls	r1, r3, #30
 800dbd2:	bf04      	itt	eq
 800dbd4:	089b      	lsreq	r3, r3, #2
 800dbd6:	3002      	addeq	r0, #2
 800dbd8:	07d9      	lsls	r1, r3, #31
 800dbda:	d403      	bmi.n	800dbe4 <__lo0bits+0x4e>
 800dbdc:	085b      	lsrs	r3, r3, #1
 800dbde:	f100 0001 	add.w	r0, r0, #1
 800dbe2:	d003      	beq.n	800dbec <__lo0bits+0x56>
 800dbe4:	6013      	str	r3, [r2, #0]
 800dbe6:	4770      	bx	lr
 800dbe8:	2000      	movs	r0, #0
 800dbea:	4770      	bx	lr
 800dbec:	2020      	movs	r0, #32
 800dbee:	4770      	bx	lr

0800dbf0 <__i2b>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	f7ff ff07 	bl	800da08 <_Balloc>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	b928      	cbnz	r0, 800dc0a <__i2b+0x1a>
 800dbfe:	4b05      	ldr	r3, [pc, #20]	@ (800dc14 <__i2b+0x24>)
 800dc00:	4805      	ldr	r0, [pc, #20]	@ (800dc18 <__i2b+0x28>)
 800dc02:	f240 1145 	movw	r1, #325	@ 0x145
 800dc06:	f000 fe6d 	bl	800e8e4 <__assert_func>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	6144      	str	r4, [r0, #20]
 800dc0e:	6103      	str	r3, [r0, #16]
 800dc10:	bd10      	pop	{r4, pc}
 800dc12:	bf00      	nop
 800dc14:	0800fbe8 	.word	0x0800fbe8
 800dc18:	0800fbf9 	.word	0x0800fbf9

0800dc1c <__multiply>:
 800dc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc20:	4617      	mov	r7, r2
 800dc22:	690a      	ldr	r2, [r1, #16]
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	bfa8      	it	ge
 800dc2a:	463b      	movge	r3, r7
 800dc2c:	4689      	mov	r9, r1
 800dc2e:	bfa4      	itt	ge
 800dc30:	460f      	movge	r7, r1
 800dc32:	4699      	movge	r9, r3
 800dc34:	693d      	ldr	r5, [r7, #16]
 800dc36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	eb05 060a 	add.w	r6, r5, sl
 800dc42:	42b3      	cmp	r3, r6
 800dc44:	b085      	sub	sp, #20
 800dc46:	bfb8      	it	lt
 800dc48:	3101      	addlt	r1, #1
 800dc4a:	f7ff fedd 	bl	800da08 <_Balloc>
 800dc4e:	b930      	cbnz	r0, 800dc5e <__multiply+0x42>
 800dc50:	4602      	mov	r2, r0
 800dc52:	4b41      	ldr	r3, [pc, #260]	@ (800dd58 <__multiply+0x13c>)
 800dc54:	4841      	ldr	r0, [pc, #260]	@ (800dd5c <__multiply+0x140>)
 800dc56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc5a:	f000 fe43 	bl	800e8e4 <__assert_func>
 800dc5e:	f100 0414 	add.w	r4, r0, #20
 800dc62:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dc66:	4623      	mov	r3, r4
 800dc68:	2200      	movs	r2, #0
 800dc6a:	4573      	cmp	r3, lr
 800dc6c:	d320      	bcc.n	800dcb0 <__multiply+0x94>
 800dc6e:	f107 0814 	add.w	r8, r7, #20
 800dc72:	f109 0114 	add.w	r1, r9, #20
 800dc76:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dc7a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dc7e:	9302      	str	r3, [sp, #8]
 800dc80:	1beb      	subs	r3, r5, r7
 800dc82:	3b15      	subs	r3, #21
 800dc84:	f023 0303 	bic.w	r3, r3, #3
 800dc88:	3304      	adds	r3, #4
 800dc8a:	3715      	adds	r7, #21
 800dc8c:	42bd      	cmp	r5, r7
 800dc8e:	bf38      	it	cc
 800dc90:	2304      	movcc	r3, #4
 800dc92:	9301      	str	r3, [sp, #4]
 800dc94:	9b02      	ldr	r3, [sp, #8]
 800dc96:	9103      	str	r1, [sp, #12]
 800dc98:	428b      	cmp	r3, r1
 800dc9a:	d80c      	bhi.n	800dcb6 <__multiply+0x9a>
 800dc9c:	2e00      	cmp	r6, #0
 800dc9e:	dd03      	ble.n	800dca8 <__multiply+0x8c>
 800dca0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d055      	beq.n	800dd54 <__multiply+0x138>
 800dca8:	6106      	str	r6, [r0, #16]
 800dcaa:	b005      	add	sp, #20
 800dcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb0:	f843 2b04 	str.w	r2, [r3], #4
 800dcb4:	e7d9      	b.n	800dc6a <__multiply+0x4e>
 800dcb6:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcba:	f1ba 0f00 	cmp.w	sl, #0
 800dcbe:	d01f      	beq.n	800dd00 <__multiply+0xe4>
 800dcc0:	46c4      	mov	ip, r8
 800dcc2:	46a1      	mov	r9, r4
 800dcc4:	2700      	movs	r7, #0
 800dcc6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dcca:	f8d9 3000 	ldr.w	r3, [r9]
 800dcce:	fa1f fb82 	uxth.w	fp, r2
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dcd8:	443b      	add	r3, r7
 800dcda:	f8d9 7000 	ldr.w	r7, [r9]
 800dcde:	0c12      	lsrs	r2, r2, #16
 800dce0:	0c3f      	lsrs	r7, r7, #16
 800dce2:	fb0a 7202 	mla	r2, sl, r2, r7
 800dce6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcf0:	4565      	cmp	r5, ip
 800dcf2:	f849 3b04 	str.w	r3, [r9], #4
 800dcf6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dcfa:	d8e4      	bhi.n	800dcc6 <__multiply+0xaa>
 800dcfc:	9b01      	ldr	r3, [sp, #4]
 800dcfe:	50e7      	str	r7, [r4, r3]
 800dd00:	9b03      	ldr	r3, [sp, #12]
 800dd02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd06:	3104      	adds	r1, #4
 800dd08:	f1b9 0f00 	cmp.w	r9, #0
 800dd0c:	d020      	beq.n	800dd50 <__multiply+0x134>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	4647      	mov	r7, r8
 800dd12:	46a4      	mov	ip, r4
 800dd14:	f04f 0a00 	mov.w	sl, #0
 800dd18:	f8b7 b000 	ldrh.w	fp, [r7]
 800dd1c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dd20:	fb09 220b 	mla	r2, r9, fp, r2
 800dd24:	4452      	add	r2, sl
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd2c:	f84c 3b04 	str.w	r3, [ip], #4
 800dd30:	f857 3b04 	ldr.w	r3, [r7], #4
 800dd34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd38:	f8bc 3000 	ldrh.w	r3, [ip]
 800dd3c:	fb09 330a 	mla	r3, r9, sl, r3
 800dd40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dd44:	42bd      	cmp	r5, r7
 800dd46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd4a:	d8e5      	bhi.n	800dd18 <__multiply+0xfc>
 800dd4c:	9a01      	ldr	r2, [sp, #4]
 800dd4e:	50a3      	str	r3, [r4, r2]
 800dd50:	3404      	adds	r4, #4
 800dd52:	e79f      	b.n	800dc94 <__multiply+0x78>
 800dd54:	3e01      	subs	r6, #1
 800dd56:	e7a1      	b.n	800dc9c <__multiply+0x80>
 800dd58:	0800fbe8 	.word	0x0800fbe8
 800dd5c:	0800fbf9 	.word	0x0800fbf9

0800dd60 <__pow5mult>:
 800dd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd64:	4615      	mov	r5, r2
 800dd66:	f012 0203 	ands.w	r2, r2, #3
 800dd6a:	4607      	mov	r7, r0
 800dd6c:	460e      	mov	r6, r1
 800dd6e:	d007      	beq.n	800dd80 <__pow5mult+0x20>
 800dd70:	4c25      	ldr	r4, [pc, #148]	@ (800de08 <__pow5mult+0xa8>)
 800dd72:	3a01      	subs	r2, #1
 800dd74:	2300      	movs	r3, #0
 800dd76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd7a:	f7ff fea7 	bl	800dacc <__multadd>
 800dd7e:	4606      	mov	r6, r0
 800dd80:	10ad      	asrs	r5, r5, #2
 800dd82:	d03d      	beq.n	800de00 <__pow5mult+0xa0>
 800dd84:	69fc      	ldr	r4, [r7, #28]
 800dd86:	b97c      	cbnz	r4, 800dda8 <__pow5mult+0x48>
 800dd88:	2010      	movs	r0, #16
 800dd8a:	f7ff fd87 	bl	800d89c <malloc>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	61f8      	str	r0, [r7, #28]
 800dd92:	b928      	cbnz	r0, 800dda0 <__pow5mult+0x40>
 800dd94:	4b1d      	ldr	r3, [pc, #116]	@ (800de0c <__pow5mult+0xac>)
 800dd96:	481e      	ldr	r0, [pc, #120]	@ (800de10 <__pow5mult+0xb0>)
 800dd98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd9c:	f000 fda2 	bl	800e8e4 <__assert_func>
 800dda0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dda4:	6004      	str	r4, [r0, #0]
 800dda6:	60c4      	str	r4, [r0, #12]
 800dda8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ddac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddb0:	b94c      	cbnz	r4, 800ddc6 <__pow5mult+0x66>
 800ddb2:	f240 2171 	movw	r1, #625	@ 0x271
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	f7ff ff1a 	bl	800dbf0 <__i2b>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	6003      	str	r3, [r0, #0]
 800ddc6:	f04f 0900 	mov.w	r9, #0
 800ddca:	07eb      	lsls	r3, r5, #31
 800ddcc:	d50a      	bpl.n	800dde4 <__pow5mult+0x84>
 800ddce:	4631      	mov	r1, r6
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	f7ff ff22 	bl	800dc1c <__multiply>
 800ddd8:	4631      	mov	r1, r6
 800ddda:	4680      	mov	r8, r0
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7ff fe53 	bl	800da88 <_Bfree>
 800dde2:	4646      	mov	r6, r8
 800dde4:	106d      	asrs	r5, r5, #1
 800dde6:	d00b      	beq.n	800de00 <__pow5mult+0xa0>
 800dde8:	6820      	ldr	r0, [r4, #0]
 800ddea:	b938      	cbnz	r0, 800ddfc <__pow5mult+0x9c>
 800ddec:	4622      	mov	r2, r4
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	f7ff ff13 	bl	800dc1c <__multiply>
 800ddf6:	6020      	str	r0, [r4, #0]
 800ddf8:	f8c0 9000 	str.w	r9, [r0]
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	e7e4      	b.n	800ddca <__pow5mult+0x6a>
 800de00:	4630      	mov	r0, r6
 800de02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de06:	bf00      	nop
 800de08:	0800fcac 	.word	0x0800fcac
 800de0c:	0800fb79 	.word	0x0800fb79
 800de10:	0800fbf9 	.word	0x0800fbf9

0800de14 <__lshift>:
 800de14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de18:	460c      	mov	r4, r1
 800de1a:	6849      	ldr	r1, [r1, #4]
 800de1c:	6923      	ldr	r3, [r4, #16]
 800de1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de22:	68a3      	ldr	r3, [r4, #8]
 800de24:	4607      	mov	r7, r0
 800de26:	4691      	mov	r9, r2
 800de28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de2c:	f108 0601 	add.w	r6, r8, #1
 800de30:	42b3      	cmp	r3, r6
 800de32:	db0b      	blt.n	800de4c <__lshift+0x38>
 800de34:	4638      	mov	r0, r7
 800de36:	f7ff fde7 	bl	800da08 <_Balloc>
 800de3a:	4605      	mov	r5, r0
 800de3c:	b948      	cbnz	r0, 800de52 <__lshift+0x3e>
 800de3e:	4602      	mov	r2, r0
 800de40:	4b28      	ldr	r3, [pc, #160]	@ (800dee4 <__lshift+0xd0>)
 800de42:	4829      	ldr	r0, [pc, #164]	@ (800dee8 <__lshift+0xd4>)
 800de44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de48:	f000 fd4c 	bl	800e8e4 <__assert_func>
 800de4c:	3101      	adds	r1, #1
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	e7ee      	b.n	800de30 <__lshift+0x1c>
 800de52:	2300      	movs	r3, #0
 800de54:	f100 0114 	add.w	r1, r0, #20
 800de58:	f100 0210 	add.w	r2, r0, #16
 800de5c:	4618      	mov	r0, r3
 800de5e:	4553      	cmp	r3, sl
 800de60:	db33      	blt.n	800deca <__lshift+0xb6>
 800de62:	6920      	ldr	r0, [r4, #16]
 800de64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de68:	f104 0314 	add.w	r3, r4, #20
 800de6c:	f019 091f 	ands.w	r9, r9, #31
 800de70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de78:	d02b      	beq.n	800ded2 <__lshift+0xbe>
 800de7a:	f1c9 0e20 	rsb	lr, r9, #32
 800de7e:	468a      	mov	sl, r1
 800de80:	2200      	movs	r2, #0
 800de82:	6818      	ldr	r0, [r3, #0]
 800de84:	fa00 f009 	lsl.w	r0, r0, r9
 800de88:	4310      	orrs	r0, r2
 800de8a:	f84a 0b04 	str.w	r0, [sl], #4
 800de8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de92:	459c      	cmp	ip, r3
 800de94:	fa22 f20e 	lsr.w	r2, r2, lr
 800de98:	d8f3      	bhi.n	800de82 <__lshift+0x6e>
 800de9a:	ebac 0304 	sub.w	r3, ip, r4
 800de9e:	3b15      	subs	r3, #21
 800dea0:	f023 0303 	bic.w	r3, r3, #3
 800dea4:	3304      	adds	r3, #4
 800dea6:	f104 0015 	add.w	r0, r4, #21
 800deaa:	4560      	cmp	r0, ip
 800deac:	bf88      	it	hi
 800deae:	2304      	movhi	r3, #4
 800deb0:	50ca      	str	r2, [r1, r3]
 800deb2:	b10a      	cbz	r2, 800deb8 <__lshift+0xa4>
 800deb4:	f108 0602 	add.w	r6, r8, #2
 800deb8:	3e01      	subs	r6, #1
 800deba:	4638      	mov	r0, r7
 800debc:	612e      	str	r6, [r5, #16]
 800debe:	4621      	mov	r1, r4
 800dec0:	f7ff fde2 	bl	800da88 <_Bfree>
 800dec4:	4628      	mov	r0, r5
 800dec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deca:	f842 0f04 	str.w	r0, [r2, #4]!
 800dece:	3301      	adds	r3, #1
 800ded0:	e7c5      	b.n	800de5e <__lshift+0x4a>
 800ded2:	3904      	subs	r1, #4
 800ded4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dedc:	459c      	cmp	ip, r3
 800dede:	d8f9      	bhi.n	800ded4 <__lshift+0xc0>
 800dee0:	e7ea      	b.n	800deb8 <__lshift+0xa4>
 800dee2:	bf00      	nop
 800dee4:	0800fbe8 	.word	0x0800fbe8
 800dee8:	0800fbf9 	.word	0x0800fbf9

0800deec <__mcmp>:
 800deec:	690a      	ldr	r2, [r1, #16]
 800deee:	4603      	mov	r3, r0
 800def0:	6900      	ldr	r0, [r0, #16]
 800def2:	1a80      	subs	r0, r0, r2
 800def4:	b530      	push	{r4, r5, lr}
 800def6:	d10e      	bne.n	800df16 <__mcmp+0x2a>
 800def8:	3314      	adds	r3, #20
 800defa:	3114      	adds	r1, #20
 800defc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df0c:	4295      	cmp	r5, r2
 800df0e:	d003      	beq.n	800df18 <__mcmp+0x2c>
 800df10:	d205      	bcs.n	800df1e <__mcmp+0x32>
 800df12:	f04f 30ff 	mov.w	r0, #4294967295
 800df16:	bd30      	pop	{r4, r5, pc}
 800df18:	42a3      	cmp	r3, r4
 800df1a:	d3f3      	bcc.n	800df04 <__mcmp+0x18>
 800df1c:	e7fb      	b.n	800df16 <__mcmp+0x2a>
 800df1e:	2001      	movs	r0, #1
 800df20:	e7f9      	b.n	800df16 <__mcmp+0x2a>
	...

0800df24 <__mdiff>:
 800df24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df28:	4689      	mov	r9, r1
 800df2a:	4606      	mov	r6, r0
 800df2c:	4611      	mov	r1, r2
 800df2e:	4648      	mov	r0, r9
 800df30:	4614      	mov	r4, r2
 800df32:	f7ff ffdb 	bl	800deec <__mcmp>
 800df36:	1e05      	subs	r5, r0, #0
 800df38:	d112      	bne.n	800df60 <__mdiff+0x3c>
 800df3a:	4629      	mov	r1, r5
 800df3c:	4630      	mov	r0, r6
 800df3e:	f7ff fd63 	bl	800da08 <_Balloc>
 800df42:	4602      	mov	r2, r0
 800df44:	b928      	cbnz	r0, 800df52 <__mdiff+0x2e>
 800df46:	4b3f      	ldr	r3, [pc, #252]	@ (800e044 <__mdiff+0x120>)
 800df48:	f240 2137 	movw	r1, #567	@ 0x237
 800df4c:	483e      	ldr	r0, [pc, #248]	@ (800e048 <__mdiff+0x124>)
 800df4e:	f000 fcc9 	bl	800e8e4 <__assert_func>
 800df52:	2301      	movs	r3, #1
 800df54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df58:	4610      	mov	r0, r2
 800df5a:	b003      	add	sp, #12
 800df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df60:	bfbc      	itt	lt
 800df62:	464b      	movlt	r3, r9
 800df64:	46a1      	movlt	r9, r4
 800df66:	4630      	mov	r0, r6
 800df68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df6c:	bfba      	itte	lt
 800df6e:	461c      	movlt	r4, r3
 800df70:	2501      	movlt	r5, #1
 800df72:	2500      	movge	r5, #0
 800df74:	f7ff fd48 	bl	800da08 <_Balloc>
 800df78:	4602      	mov	r2, r0
 800df7a:	b918      	cbnz	r0, 800df84 <__mdiff+0x60>
 800df7c:	4b31      	ldr	r3, [pc, #196]	@ (800e044 <__mdiff+0x120>)
 800df7e:	f240 2145 	movw	r1, #581	@ 0x245
 800df82:	e7e3      	b.n	800df4c <__mdiff+0x28>
 800df84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df88:	6926      	ldr	r6, [r4, #16]
 800df8a:	60c5      	str	r5, [r0, #12]
 800df8c:	f109 0310 	add.w	r3, r9, #16
 800df90:	f109 0514 	add.w	r5, r9, #20
 800df94:	f104 0e14 	add.w	lr, r4, #20
 800df98:	f100 0b14 	add.w	fp, r0, #20
 800df9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	46d9      	mov	r9, fp
 800dfa8:	f04f 0c00 	mov.w	ip, #0
 800dfac:	9b01      	ldr	r3, [sp, #4]
 800dfae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	fa1f f38a 	uxth.w	r3, sl
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	b283      	uxth	r3, r0
 800dfc0:	1acb      	subs	r3, r1, r3
 800dfc2:	0c00      	lsrs	r0, r0, #16
 800dfc4:	4463      	add	r3, ip
 800dfc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dfca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dfd4:	4576      	cmp	r6, lr
 800dfd6:	f849 3b04 	str.w	r3, [r9], #4
 800dfda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfde:	d8e5      	bhi.n	800dfac <__mdiff+0x88>
 800dfe0:	1b33      	subs	r3, r6, r4
 800dfe2:	3b15      	subs	r3, #21
 800dfe4:	f023 0303 	bic.w	r3, r3, #3
 800dfe8:	3415      	adds	r4, #21
 800dfea:	3304      	adds	r3, #4
 800dfec:	42a6      	cmp	r6, r4
 800dfee:	bf38      	it	cc
 800dff0:	2304      	movcc	r3, #4
 800dff2:	441d      	add	r5, r3
 800dff4:	445b      	add	r3, fp
 800dff6:	461e      	mov	r6, r3
 800dff8:	462c      	mov	r4, r5
 800dffa:	4544      	cmp	r4, r8
 800dffc:	d30e      	bcc.n	800e01c <__mdiff+0xf8>
 800dffe:	f108 0103 	add.w	r1, r8, #3
 800e002:	1b49      	subs	r1, r1, r5
 800e004:	f021 0103 	bic.w	r1, r1, #3
 800e008:	3d03      	subs	r5, #3
 800e00a:	45a8      	cmp	r8, r5
 800e00c:	bf38      	it	cc
 800e00e:	2100      	movcc	r1, #0
 800e010:	440b      	add	r3, r1
 800e012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e016:	b191      	cbz	r1, 800e03e <__mdiff+0x11a>
 800e018:	6117      	str	r7, [r2, #16]
 800e01a:	e79d      	b.n	800df58 <__mdiff+0x34>
 800e01c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e020:	46e6      	mov	lr, ip
 800e022:	0c08      	lsrs	r0, r1, #16
 800e024:	fa1c fc81 	uxtah	ip, ip, r1
 800e028:	4471      	add	r1, lr
 800e02a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e02e:	b289      	uxth	r1, r1
 800e030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e034:	f846 1b04 	str.w	r1, [r6], #4
 800e038:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e03c:	e7dd      	b.n	800dffa <__mdiff+0xd6>
 800e03e:	3f01      	subs	r7, #1
 800e040:	e7e7      	b.n	800e012 <__mdiff+0xee>
 800e042:	bf00      	nop
 800e044:	0800fbe8 	.word	0x0800fbe8
 800e048:	0800fbf9 	.word	0x0800fbf9

0800e04c <__d2b>:
 800e04c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e050:	460f      	mov	r7, r1
 800e052:	2101      	movs	r1, #1
 800e054:	ec59 8b10 	vmov	r8, r9, d0
 800e058:	4616      	mov	r6, r2
 800e05a:	f7ff fcd5 	bl	800da08 <_Balloc>
 800e05e:	4604      	mov	r4, r0
 800e060:	b930      	cbnz	r0, 800e070 <__d2b+0x24>
 800e062:	4602      	mov	r2, r0
 800e064:	4b23      	ldr	r3, [pc, #140]	@ (800e0f4 <__d2b+0xa8>)
 800e066:	4824      	ldr	r0, [pc, #144]	@ (800e0f8 <__d2b+0xac>)
 800e068:	f240 310f 	movw	r1, #783	@ 0x30f
 800e06c:	f000 fc3a 	bl	800e8e4 <__assert_func>
 800e070:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e074:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e078:	b10d      	cbz	r5, 800e07e <__d2b+0x32>
 800e07a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	f1b8 0300 	subs.w	r3, r8, #0
 800e084:	d023      	beq.n	800e0ce <__d2b+0x82>
 800e086:	4668      	mov	r0, sp
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	f7ff fd84 	bl	800db96 <__lo0bits>
 800e08e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e092:	b1d0      	cbz	r0, 800e0ca <__d2b+0x7e>
 800e094:	f1c0 0320 	rsb	r3, r0, #32
 800e098:	fa02 f303 	lsl.w	r3, r2, r3
 800e09c:	430b      	orrs	r3, r1
 800e09e:	40c2      	lsrs	r2, r0
 800e0a0:	6163      	str	r3, [r4, #20]
 800e0a2:	9201      	str	r2, [sp, #4]
 800e0a4:	9b01      	ldr	r3, [sp, #4]
 800e0a6:	61a3      	str	r3, [r4, #24]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	bf0c      	ite	eq
 800e0ac:	2201      	moveq	r2, #1
 800e0ae:	2202      	movne	r2, #2
 800e0b0:	6122      	str	r2, [r4, #16]
 800e0b2:	b1a5      	cbz	r5, 800e0de <__d2b+0x92>
 800e0b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e0b8:	4405      	add	r5, r0
 800e0ba:	603d      	str	r5, [r7, #0]
 800e0bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e0c0:	6030      	str	r0, [r6, #0]
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	b003      	add	sp, #12
 800e0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ca:	6161      	str	r1, [r4, #20]
 800e0cc:	e7ea      	b.n	800e0a4 <__d2b+0x58>
 800e0ce:	a801      	add	r0, sp, #4
 800e0d0:	f7ff fd61 	bl	800db96 <__lo0bits>
 800e0d4:	9b01      	ldr	r3, [sp, #4]
 800e0d6:	6163      	str	r3, [r4, #20]
 800e0d8:	3020      	adds	r0, #32
 800e0da:	2201      	movs	r2, #1
 800e0dc:	e7e8      	b.n	800e0b0 <__d2b+0x64>
 800e0de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e0e6:	6038      	str	r0, [r7, #0]
 800e0e8:	6918      	ldr	r0, [r3, #16]
 800e0ea:	f7ff fd35 	bl	800db58 <__hi0bits>
 800e0ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0f2:	e7e5      	b.n	800e0c0 <__d2b+0x74>
 800e0f4:	0800fbe8 	.word	0x0800fbe8
 800e0f8:	0800fbf9 	.word	0x0800fbf9

0800e0fc <__ssputs_r>:
 800e0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e100:	688e      	ldr	r6, [r1, #8]
 800e102:	461f      	mov	r7, r3
 800e104:	42be      	cmp	r6, r7
 800e106:	680b      	ldr	r3, [r1, #0]
 800e108:	4682      	mov	sl, r0
 800e10a:	460c      	mov	r4, r1
 800e10c:	4690      	mov	r8, r2
 800e10e:	d82d      	bhi.n	800e16c <__ssputs_r+0x70>
 800e110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e114:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e118:	d026      	beq.n	800e168 <__ssputs_r+0x6c>
 800e11a:	6965      	ldr	r5, [r4, #20]
 800e11c:	6909      	ldr	r1, [r1, #16]
 800e11e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e122:	eba3 0901 	sub.w	r9, r3, r1
 800e126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e12a:	1c7b      	adds	r3, r7, #1
 800e12c:	444b      	add	r3, r9
 800e12e:	106d      	asrs	r5, r5, #1
 800e130:	429d      	cmp	r5, r3
 800e132:	bf38      	it	cc
 800e134:	461d      	movcc	r5, r3
 800e136:	0553      	lsls	r3, r2, #21
 800e138:	d527      	bpl.n	800e18a <__ssputs_r+0x8e>
 800e13a:	4629      	mov	r1, r5
 800e13c:	f7ff fbd8 	bl	800d8f0 <_malloc_r>
 800e140:	4606      	mov	r6, r0
 800e142:	b360      	cbz	r0, 800e19e <__ssputs_r+0xa2>
 800e144:	6921      	ldr	r1, [r4, #16]
 800e146:	464a      	mov	r2, r9
 800e148:	f7fe fcf7 	bl	800cb3a <memcpy>
 800e14c:	89a3      	ldrh	r3, [r4, #12]
 800e14e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e156:	81a3      	strh	r3, [r4, #12]
 800e158:	6126      	str	r6, [r4, #16]
 800e15a:	6165      	str	r5, [r4, #20]
 800e15c:	444e      	add	r6, r9
 800e15e:	eba5 0509 	sub.w	r5, r5, r9
 800e162:	6026      	str	r6, [r4, #0]
 800e164:	60a5      	str	r5, [r4, #8]
 800e166:	463e      	mov	r6, r7
 800e168:	42be      	cmp	r6, r7
 800e16a:	d900      	bls.n	800e16e <__ssputs_r+0x72>
 800e16c:	463e      	mov	r6, r7
 800e16e:	6820      	ldr	r0, [r4, #0]
 800e170:	4632      	mov	r2, r6
 800e172:	4641      	mov	r1, r8
 800e174:	f000 fb6a 	bl	800e84c <memmove>
 800e178:	68a3      	ldr	r3, [r4, #8]
 800e17a:	1b9b      	subs	r3, r3, r6
 800e17c:	60a3      	str	r3, [r4, #8]
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	4433      	add	r3, r6
 800e182:	6023      	str	r3, [r4, #0]
 800e184:	2000      	movs	r0, #0
 800e186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e18a:	462a      	mov	r2, r5
 800e18c:	f000 fbee 	bl	800e96c <_realloc_r>
 800e190:	4606      	mov	r6, r0
 800e192:	2800      	cmp	r0, #0
 800e194:	d1e0      	bne.n	800e158 <__ssputs_r+0x5c>
 800e196:	6921      	ldr	r1, [r4, #16]
 800e198:	4650      	mov	r0, sl
 800e19a:	f7ff fb35 	bl	800d808 <_free_r>
 800e19e:	230c      	movs	r3, #12
 800e1a0:	f8ca 3000 	str.w	r3, [sl]
 800e1a4:	89a3      	ldrh	r3, [r4, #12]
 800e1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1aa:	81a3      	strh	r3, [r4, #12]
 800e1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b0:	e7e9      	b.n	800e186 <__ssputs_r+0x8a>
	...

0800e1b4 <_svfiprintf_r>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	4698      	mov	r8, r3
 800e1ba:	898b      	ldrh	r3, [r1, #12]
 800e1bc:	061b      	lsls	r3, r3, #24
 800e1be:	b09d      	sub	sp, #116	@ 0x74
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	d510      	bpl.n	800e1ea <_svfiprintf_r+0x36>
 800e1c8:	690b      	ldr	r3, [r1, #16]
 800e1ca:	b973      	cbnz	r3, 800e1ea <_svfiprintf_r+0x36>
 800e1cc:	2140      	movs	r1, #64	@ 0x40
 800e1ce:	f7ff fb8f 	bl	800d8f0 <_malloc_r>
 800e1d2:	6028      	str	r0, [r5, #0]
 800e1d4:	6128      	str	r0, [r5, #16]
 800e1d6:	b930      	cbnz	r0, 800e1e6 <_svfiprintf_r+0x32>
 800e1d8:	230c      	movs	r3, #12
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e0:	b01d      	add	sp, #116	@ 0x74
 800e1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e6:	2340      	movs	r3, #64	@ 0x40
 800e1e8:	616b      	str	r3, [r5, #20]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ee:	2320      	movs	r3, #32
 800e1f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1f8:	2330      	movs	r3, #48	@ 0x30
 800e1fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e398 <_svfiprintf_r+0x1e4>
 800e1fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e202:	f04f 0901 	mov.w	r9, #1
 800e206:	4623      	mov	r3, r4
 800e208:	469a      	mov	sl, r3
 800e20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e20e:	b10a      	cbz	r2, 800e214 <_svfiprintf_r+0x60>
 800e210:	2a25      	cmp	r2, #37	@ 0x25
 800e212:	d1f9      	bne.n	800e208 <_svfiprintf_r+0x54>
 800e214:	ebba 0b04 	subs.w	fp, sl, r4
 800e218:	d00b      	beq.n	800e232 <_svfiprintf_r+0x7e>
 800e21a:	465b      	mov	r3, fp
 800e21c:	4622      	mov	r2, r4
 800e21e:	4629      	mov	r1, r5
 800e220:	4638      	mov	r0, r7
 800e222:	f7ff ff6b 	bl	800e0fc <__ssputs_r>
 800e226:	3001      	adds	r0, #1
 800e228:	f000 80a7 	beq.w	800e37a <_svfiprintf_r+0x1c6>
 800e22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e22e:	445a      	add	r2, fp
 800e230:	9209      	str	r2, [sp, #36]	@ 0x24
 800e232:	f89a 3000 	ldrb.w	r3, [sl]
 800e236:	2b00      	cmp	r3, #0
 800e238:	f000 809f 	beq.w	800e37a <_svfiprintf_r+0x1c6>
 800e23c:	2300      	movs	r3, #0
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e246:	f10a 0a01 	add.w	sl, sl, #1
 800e24a:	9304      	str	r3, [sp, #16]
 800e24c:	9307      	str	r3, [sp, #28]
 800e24e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e252:	931a      	str	r3, [sp, #104]	@ 0x68
 800e254:	4654      	mov	r4, sl
 800e256:	2205      	movs	r2, #5
 800e258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e25c:	484e      	ldr	r0, [pc, #312]	@ (800e398 <_svfiprintf_r+0x1e4>)
 800e25e:	f7f1 ffb7 	bl	80001d0 <memchr>
 800e262:	9a04      	ldr	r2, [sp, #16]
 800e264:	b9d8      	cbnz	r0, 800e29e <_svfiprintf_r+0xea>
 800e266:	06d0      	lsls	r0, r2, #27
 800e268:	bf44      	itt	mi
 800e26a:	2320      	movmi	r3, #32
 800e26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e270:	0711      	lsls	r1, r2, #28
 800e272:	bf44      	itt	mi
 800e274:	232b      	movmi	r3, #43	@ 0x2b
 800e276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e27a:	f89a 3000 	ldrb.w	r3, [sl]
 800e27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e280:	d015      	beq.n	800e2ae <_svfiprintf_r+0xfa>
 800e282:	9a07      	ldr	r2, [sp, #28]
 800e284:	4654      	mov	r4, sl
 800e286:	2000      	movs	r0, #0
 800e288:	f04f 0c0a 	mov.w	ip, #10
 800e28c:	4621      	mov	r1, r4
 800e28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e292:	3b30      	subs	r3, #48	@ 0x30
 800e294:	2b09      	cmp	r3, #9
 800e296:	d94b      	bls.n	800e330 <_svfiprintf_r+0x17c>
 800e298:	b1b0      	cbz	r0, 800e2c8 <_svfiprintf_r+0x114>
 800e29a:	9207      	str	r2, [sp, #28]
 800e29c:	e014      	b.n	800e2c8 <_svfiprintf_r+0x114>
 800e29e:	eba0 0308 	sub.w	r3, r0, r8
 800e2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	9304      	str	r3, [sp, #16]
 800e2aa:	46a2      	mov	sl, r4
 800e2ac:	e7d2      	b.n	800e254 <_svfiprintf_r+0xa0>
 800e2ae:	9b03      	ldr	r3, [sp, #12]
 800e2b0:	1d19      	adds	r1, r3, #4
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	9103      	str	r1, [sp, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	bfbb      	ittet	lt
 800e2ba:	425b      	neglt	r3, r3
 800e2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e2c0:	9307      	strge	r3, [sp, #28]
 800e2c2:	9307      	strlt	r3, [sp, #28]
 800e2c4:	bfb8      	it	lt
 800e2c6:	9204      	strlt	r2, [sp, #16]
 800e2c8:	7823      	ldrb	r3, [r4, #0]
 800e2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2cc:	d10a      	bne.n	800e2e4 <_svfiprintf_r+0x130>
 800e2ce:	7863      	ldrb	r3, [r4, #1]
 800e2d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2d2:	d132      	bne.n	800e33a <_svfiprintf_r+0x186>
 800e2d4:	9b03      	ldr	r3, [sp, #12]
 800e2d6:	1d1a      	adds	r2, r3, #4
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	9203      	str	r2, [sp, #12]
 800e2dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2e0:	3402      	adds	r4, #2
 800e2e2:	9305      	str	r3, [sp, #20]
 800e2e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3a8 <_svfiprintf_r+0x1f4>
 800e2e8:	7821      	ldrb	r1, [r4, #0]
 800e2ea:	2203      	movs	r2, #3
 800e2ec:	4650      	mov	r0, sl
 800e2ee:	f7f1 ff6f 	bl	80001d0 <memchr>
 800e2f2:	b138      	cbz	r0, 800e304 <_svfiprintf_r+0x150>
 800e2f4:	9b04      	ldr	r3, [sp, #16]
 800e2f6:	eba0 000a 	sub.w	r0, r0, sl
 800e2fa:	2240      	movs	r2, #64	@ 0x40
 800e2fc:	4082      	lsls	r2, r0
 800e2fe:	4313      	orrs	r3, r2
 800e300:	3401      	adds	r4, #1
 800e302:	9304      	str	r3, [sp, #16]
 800e304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e308:	4824      	ldr	r0, [pc, #144]	@ (800e39c <_svfiprintf_r+0x1e8>)
 800e30a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e30e:	2206      	movs	r2, #6
 800e310:	f7f1 ff5e 	bl	80001d0 <memchr>
 800e314:	2800      	cmp	r0, #0
 800e316:	d036      	beq.n	800e386 <_svfiprintf_r+0x1d2>
 800e318:	4b21      	ldr	r3, [pc, #132]	@ (800e3a0 <_svfiprintf_r+0x1ec>)
 800e31a:	bb1b      	cbnz	r3, 800e364 <_svfiprintf_r+0x1b0>
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	3307      	adds	r3, #7
 800e320:	f023 0307 	bic.w	r3, r3, #7
 800e324:	3308      	adds	r3, #8
 800e326:	9303      	str	r3, [sp, #12]
 800e328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e32a:	4433      	add	r3, r6
 800e32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e32e:	e76a      	b.n	800e206 <_svfiprintf_r+0x52>
 800e330:	fb0c 3202 	mla	r2, ip, r2, r3
 800e334:	460c      	mov	r4, r1
 800e336:	2001      	movs	r0, #1
 800e338:	e7a8      	b.n	800e28c <_svfiprintf_r+0xd8>
 800e33a:	2300      	movs	r3, #0
 800e33c:	3401      	adds	r4, #1
 800e33e:	9305      	str	r3, [sp, #20]
 800e340:	4619      	mov	r1, r3
 800e342:	f04f 0c0a 	mov.w	ip, #10
 800e346:	4620      	mov	r0, r4
 800e348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e34c:	3a30      	subs	r2, #48	@ 0x30
 800e34e:	2a09      	cmp	r2, #9
 800e350:	d903      	bls.n	800e35a <_svfiprintf_r+0x1a6>
 800e352:	2b00      	cmp	r3, #0
 800e354:	d0c6      	beq.n	800e2e4 <_svfiprintf_r+0x130>
 800e356:	9105      	str	r1, [sp, #20]
 800e358:	e7c4      	b.n	800e2e4 <_svfiprintf_r+0x130>
 800e35a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e35e:	4604      	mov	r4, r0
 800e360:	2301      	movs	r3, #1
 800e362:	e7f0      	b.n	800e346 <_svfiprintf_r+0x192>
 800e364:	ab03      	add	r3, sp, #12
 800e366:	9300      	str	r3, [sp, #0]
 800e368:	462a      	mov	r2, r5
 800e36a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a4 <_svfiprintf_r+0x1f0>)
 800e36c:	a904      	add	r1, sp, #16
 800e36e:	4638      	mov	r0, r7
 800e370:	f7fd fd4e 	bl	800be10 <_printf_float>
 800e374:	1c42      	adds	r2, r0, #1
 800e376:	4606      	mov	r6, r0
 800e378:	d1d6      	bne.n	800e328 <_svfiprintf_r+0x174>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	065b      	lsls	r3, r3, #25
 800e37e:	f53f af2d 	bmi.w	800e1dc <_svfiprintf_r+0x28>
 800e382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e384:	e72c      	b.n	800e1e0 <_svfiprintf_r+0x2c>
 800e386:	ab03      	add	r3, sp, #12
 800e388:	9300      	str	r3, [sp, #0]
 800e38a:	462a      	mov	r2, r5
 800e38c:	4b05      	ldr	r3, [pc, #20]	@ (800e3a4 <_svfiprintf_r+0x1f0>)
 800e38e:	a904      	add	r1, sp, #16
 800e390:	4638      	mov	r0, r7
 800e392:	f7fd ffd5 	bl	800c340 <_printf_i>
 800e396:	e7ed      	b.n	800e374 <_svfiprintf_r+0x1c0>
 800e398:	0800fc52 	.word	0x0800fc52
 800e39c:	0800fc5c 	.word	0x0800fc5c
 800e3a0:	0800be11 	.word	0x0800be11
 800e3a4:	0800e0fd 	.word	0x0800e0fd
 800e3a8:	0800fc58 	.word	0x0800fc58

0800e3ac <__sfputc_r>:
 800e3ac:	6893      	ldr	r3, [r2, #8]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	b410      	push	{r4}
 800e3b4:	6093      	str	r3, [r2, #8]
 800e3b6:	da08      	bge.n	800e3ca <__sfputc_r+0x1e>
 800e3b8:	6994      	ldr	r4, [r2, #24]
 800e3ba:	42a3      	cmp	r3, r4
 800e3bc:	db01      	blt.n	800e3c2 <__sfputc_r+0x16>
 800e3be:	290a      	cmp	r1, #10
 800e3c0:	d103      	bne.n	800e3ca <__sfputc_r+0x1e>
 800e3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c6:	f7fe ba94 	b.w	800c8f2 <__swbuf_r>
 800e3ca:	6813      	ldr	r3, [r2, #0]
 800e3cc:	1c58      	adds	r0, r3, #1
 800e3ce:	6010      	str	r0, [r2, #0]
 800e3d0:	7019      	strb	r1, [r3, #0]
 800e3d2:	4608      	mov	r0, r1
 800e3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <__sfputs_r>:
 800e3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3dc:	4606      	mov	r6, r0
 800e3de:	460f      	mov	r7, r1
 800e3e0:	4614      	mov	r4, r2
 800e3e2:	18d5      	adds	r5, r2, r3
 800e3e4:	42ac      	cmp	r4, r5
 800e3e6:	d101      	bne.n	800e3ec <__sfputs_r+0x12>
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	e007      	b.n	800e3fc <__sfputs_r+0x22>
 800e3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3f0:	463a      	mov	r2, r7
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f7ff ffda 	bl	800e3ac <__sfputc_r>
 800e3f8:	1c43      	adds	r3, r0, #1
 800e3fa:	d1f3      	bne.n	800e3e4 <__sfputs_r+0xa>
 800e3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e400 <_vfiprintf_r>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	460d      	mov	r5, r1
 800e406:	b09d      	sub	sp, #116	@ 0x74
 800e408:	4614      	mov	r4, r2
 800e40a:	4698      	mov	r8, r3
 800e40c:	4606      	mov	r6, r0
 800e40e:	b118      	cbz	r0, 800e418 <_vfiprintf_r+0x18>
 800e410:	6a03      	ldr	r3, [r0, #32]
 800e412:	b90b      	cbnz	r3, 800e418 <_vfiprintf_r+0x18>
 800e414:	f7fe f93e 	bl	800c694 <__sinit>
 800e418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e41a:	07d9      	lsls	r1, r3, #31
 800e41c:	d405      	bmi.n	800e42a <_vfiprintf_r+0x2a>
 800e41e:	89ab      	ldrh	r3, [r5, #12]
 800e420:	059a      	lsls	r2, r3, #22
 800e422:	d402      	bmi.n	800e42a <_vfiprintf_r+0x2a>
 800e424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e426:	f7fe fb86 	bl	800cb36 <__retarget_lock_acquire_recursive>
 800e42a:	89ab      	ldrh	r3, [r5, #12]
 800e42c:	071b      	lsls	r3, r3, #28
 800e42e:	d501      	bpl.n	800e434 <_vfiprintf_r+0x34>
 800e430:	692b      	ldr	r3, [r5, #16]
 800e432:	b99b      	cbnz	r3, 800e45c <_vfiprintf_r+0x5c>
 800e434:	4629      	mov	r1, r5
 800e436:	4630      	mov	r0, r6
 800e438:	f7fe fa9a 	bl	800c970 <__swsetup_r>
 800e43c:	b170      	cbz	r0, 800e45c <_vfiprintf_r+0x5c>
 800e43e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e440:	07dc      	lsls	r4, r3, #31
 800e442:	d504      	bpl.n	800e44e <_vfiprintf_r+0x4e>
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	b01d      	add	sp, #116	@ 0x74
 800e44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44e:	89ab      	ldrh	r3, [r5, #12]
 800e450:	0598      	lsls	r0, r3, #22
 800e452:	d4f7      	bmi.n	800e444 <_vfiprintf_r+0x44>
 800e454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e456:	f7fe fb6f 	bl	800cb38 <__retarget_lock_release_recursive>
 800e45a:	e7f3      	b.n	800e444 <_vfiprintf_r+0x44>
 800e45c:	2300      	movs	r3, #0
 800e45e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e460:	2320      	movs	r3, #32
 800e462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e466:	f8cd 800c 	str.w	r8, [sp, #12]
 800e46a:	2330      	movs	r3, #48	@ 0x30
 800e46c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e61c <_vfiprintf_r+0x21c>
 800e470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e474:	f04f 0901 	mov.w	r9, #1
 800e478:	4623      	mov	r3, r4
 800e47a:	469a      	mov	sl, r3
 800e47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e480:	b10a      	cbz	r2, 800e486 <_vfiprintf_r+0x86>
 800e482:	2a25      	cmp	r2, #37	@ 0x25
 800e484:	d1f9      	bne.n	800e47a <_vfiprintf_r+0x7a>
 800e486:	ebba 0b04 	subs.w	fp, sl, r4
 800e48a:	d00b      	beq.n	800e4a4 <_vfiprintf_r+0xa4>
 800e48c:	465b      	mov	r3, fp
 800e48e:	4622      	mov	r2, r4
 800e490:	4629      	mov	r1, r5
 800e492:	4630      	mov	r0, r6
 800e494:	f7ff ffa1 	bl	800e3da <__sfputs_r>
 800e498:	3001      	adds	r0, #1
 800e49a:	f000 80a7 	beq.w	800e5ec <_vfiprintf_r+0x1ec>
 800e49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4a0:	445a      	add	r2, fp
 800e4a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 809f 	beq.w	800e5ec <_vfiprintf_r+0x1ec>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4b8:	f10a 0a01 	add.w	sl, sl, #1
 800e4bc:	9304      	str	r3, [sp, #16]
 800e4be:	9307      	str	r3, [sp, #28]
 800e4c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4c6:	4654      	mov	r4, sl
 800e4c8:	2205      	movs	r2, #5
 800e4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ce:	4853      	ldr	r0, [pc, #332]	@ (800e61c <_vfiprintf_r+0x21c>)
 800e4d0:	f7f1 fe7e 	bl	80001d0 <memchr>
 800e4d4:	9a04      	ldr	r2, [sp, #16]
 800e4d6:	b9d8      	cbnz	r0, 800e510 <_vfiprintf_r+0x110>
 800e4d8:	06d1      	lsls	r1, r2, #27
 800e4da:	bf44      	itt	mi
 800e4dc:	2320      	movmi	r3, #32
 800e4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4e2:	0713      	lsls	r3, r2, #28
 800e4e4:	bf44      	itt	mi
 800e4e6:	232b      	movmi	r3, #43	@ 0x2b
 800e4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4f2:	d015      	beq.n	800e520 <_vfiprintf_r+0x120>
 800e4f4:	9a07      	ldr	r2, [sp, #28]
 800e4f6:	4654      	mov	r4, sl
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	f04f 0c0a 	mov.w	ip, #10
 800e4fe:	4621      	mov	r1, r4
 800e500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e504:	3b30      	subs	r3, #48	@ 0x30
 800e506:	2b09      	cmp	r3, #9
 800e508:	d94b      	bls.n	800e5a2 <_vfiprintf_r+0x1a2>
 800e50a:	b1b0      	cbz	r0, 800e53a <_vfiprintf_r+0x13a>
 800e50c:	9207      	str	r2, [sp, #28]
 800e50e:	e014      	b.n	800e53a <_vfiprintf_r+0x13a>
 800e510:	eba0 0308 	sub.w	r3, r0, r8
 800e514:	fa09 f303 	lsl.w	r3, r9, r3
 800e518:	4313      	orrs	r3, r2
 800e51a:	9304      	str	r3, [sp, #16]
 800e51c:	46a2      	mov	sl, r4
 800e51e:	e7d2      	b.n	800e4c6 <_vfiprintf_r+0xc6>
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	1d19      	adds	r1, r3, #4
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	9103      	str	r1, [sp, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	bfbb      	ittet	lt
 800e52c:	425b      	neglt	r3, r3
 800e52e:	f042 0202 	orrlt.w	r2, r2, #2
 800e532:	9307      	strge	r3, [sp, #28]
 800e534:	9307      	strlt	r3, [sp, #28]
 800e536:	bfb8      	it	lt
 800e538:	9204      	strlt	r2, [sp, #16]
 800e53a:	7823      	ldrb	r3, [r4, #0]
 800e53c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e53e:	d10a      	bne.n	800e556 <_vfiprintf_r+0x156>
 800e540:	7863      	ldrb	r3, [r4, #1]
 800e542:	2b2a      	cmp	r3, #42	@ 0x2a
 800e544:	d132      	bne.n	800e5ac <_vfiprintf_r+0x1ac>
 800e546:	9b03      	ldr	r3, [sp, #12]
 800e548:	1d1a      	adds	r2, r3, #4
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	9203      	str	r2, [sp, #12]
 800e54e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e552:	3402      	adds	r4, #2
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e62c <_vfiprintf_r+0x22c>
 800e55a:	7821      	ldrb	r1, [r4, #0]
 800e55c:	2203      	movs	r2, #3
 800e55e:	4650      	mov	r0, sl
 800e560:	f7f1 fe36 	bl	80001d0 <memchr>
 800e564:	b138      	cbz	r0, 800e576 <_vfiprintf_r+0x176>
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	eba0 000a 	sub.w	r0, r0, sl
 800e56c:	2240      	movs	r2, #64	@ 0x40
 800e56e:	4082      	lsls	r2, r0
 800e570:	4313      	orrs	r3, r2
 800e572:	3401      	adds	r4, #1
 800e574:	9304      	str	r3, [sp, #16]
 800e576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e57a:	4829      	ldr	r0, [pc, #164]	@ (800e620 <_vfiprintf_r+0x220>)
 800e57c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e580:	2206      	movs	r2, #6
 800e582:	f7f1 fe25 	bl	80001d0 <memchr>
 800e586:	2800      	cmp	r0, #0
 800e588:	d03f      	beq.n	800e60a <_vfiprintf_r+0x20a>
 800e58a:	4b26      	ldr	r3, [pc, #152]	@ (800e624 <_vfiprintf_r+0x224>)
 800e58c:	bb1b      	cbnz	r3, 800e5d6 <_vfiprintf_r+0x1d6>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	3307      	adds	r3, #7
 800e592:	f023 0307 	bic.w	r3, r3, #7
 800e596:	3308      	adds	r3, #8
 800e598:	9303      	str	r3, [sp, #12]
 800e59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e59c:	443b      	add	r3, r7
 800e59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5a0:	e76a      	b.n	800e478 <_vfiprintf_r+0x78>
 800e5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	e7a8      	b.n	800e4fe <_vfiprintf_r+0xfe>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	3401      	adds	r4, #1
 800e5b0:	9305      	str	r3, [sp, #20]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	f04f 0c0a 	mov.w	ip, #10
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5be:	3a30      	subs	r2, #48	@ 0x30
 800e5c0:	2a09      	cmp	r2, #9
 800e5c2:	d903      	bls.n	800e5cc <_vfiprintf_r+0x1cc>
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d0c6      	beq.n	800e556 <_vfiprintf_r+0x156>
 800e5c8:	9105      	str	r1, [sp, #20]
 800e5ca:	e7c4      	b.n	800e556 <_vfiprintf_r+0x156>
 800e5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e7f0      	b.n	800e5b8 <_vfiprintf_r+0x1b8>
 800e5d6:	ab03      	add	r3, sp, #12
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	462a      	mov	r2, r5
 800e5dc:	4b12      	ldr	r3, [pc, #72]	@ (800e628 <_vfiprintf_r+0x228>)
 800e5de:	a904      	add	r1, sp, #16
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7fd fc15 	bl	800be10 <_printf_float>
 800e5e6:	4607      	mov	r7, r0
 800e5e8:	1c78      	adds	r0, r7, #1
 800e5ea:	d1d6      	bne.n	800e59a <_vfiprintf_r+0x19a>
 800e5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ee:	07d9      	lsls	r1, r3, #31
 800e5f0:	d405      	bmi.n	800e5fe <_vfiprintf_r+0x1fe>
 800e5f2:	89ab      	ldrh	r3, [r5, #12]
 800e5f4:	059a      	lsls	r2, r3, #22
 800e5f6:	d402      	bmi.n	800e5fe <_vfiprintf_r+0x1fe>
 800e5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5fa:	f7fe fa9d 	bl	800cb38 <__retarget_lock_release_recursive>
 800e5fe:	89ab      	ldrh	r3, [r5, #12]
 800e600:	065b      	lsls	r3, r3, #25
 800e602:	f53f af1f 	bmi.w	800e444 <_vfiprintf_r+0x44>
 800e606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e608:	e71e      	b.n	800e448 <_vfiprintf_r+0x48>
 800e60a:	ab03      	add	r3, sp, #12
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	462a      	mov	r2, r5
 800e610:	4b05      	ldr	r3, [pc, #20]	@ (800e628 <_vfiprintf_r+0x228>)
 800e612:	a904      	add	r1, sp, #16
 800e614:	4630      	mov	r0, r6
 800e616:	f7fd fe93 	bl	800c340 <_printf_i>
 800e61a:	e7e4      	b.n	800e5e6 <_vfiprintf_r+0x1e6>
 800e61c:	0800fc52 	.word	0x0800fc52
 800e620:	0800fc5c 	.word	0x0800fc5c
 800e624:	0800be11 	.word	0x0800be11
 800e628:	0800e3db 	.word	0x0800e3db
 800e62c:	0800fc58 	.word	0x0800fc58

0800e630 <__sflush_r>:
 800e630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e638:	0716      	lsls	r6, r2, #28
 800e63a:	4605      	mov	r5, r0
 800e63c:	460c      	mov	r4, r1
 800e63e:	d454      	bmi.n	800e6ea <__sflush_r+0xba>
 800e640:	684b      	ldr	r3, [r1, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	dc02      	bgt.n	800e64c <__sflush_r+0x1c>
 800e646:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dd48      	ble.n	800e6de <__sflush_r+0xae>
 800e64c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e64e:	2e00      	cmp	r6, #0
 800e650:	d045      	beq.n	800e6de <__sflush_r+0xae>
 800e652:	2300      	movs	r3, #0
 800e654:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e658:	682f      	ldr	r7, [r5, #0]
 800e65a:	6a21      	ldr	r1, [r4, #32]
 800e65c:	602b      	str	r3, [r5, #0]
 800e65e:	d030      	beq.n	800e6c2 <__sflush_r+0x92>
 800e660:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	0759      	lsls	r1, r3, #29
 800e666:	d505      	bpl.n	800e674 <__sflush_r+0x44>
 800e668:	6863      	ldr	r3, [r4, #4]
 800e66a:	1ad2      	subs	r2, r2, r3
 800e66c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e66e:	b10b      	cbz	r3, 800e674 <__sflush_r+0x44>
 800e670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e672:	1ad2      	subs	r2, r2, r3
 800e674:	2300      	movs	r3, #0
 800e676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e678:	6a21      	ldr	r1, [r4, #32]
 800e67a:	4628      	mov	r0, r5
 800e67c:	47b0      	blx	r6
 800e67e:	1c43      	adds	r3, r0, #1
 800e680:	89a3      	ldrh	r3, [r4, #12]
 800e682:	d106      	bne.n	800e692 <__sflush_r+0x62>
 800e684:	6829      	ldr	r1, [r5, #0]
 800e686:	291d      	cmp	r1, #29
 800e688:	d82b      	bhi.n	800e6e2 <__sflush_r+0xb2>
 800e68a:	4a2a      	ldr	r2, [pc, #168]	@ (800e734 <__sflush_r+0x104>)
 800e68c:	40ca      	lsrs	r2, r1
 800e68e:	07d6      	lsls	r6, r2, #31
 800e690:	d527      	bpl.n	800e6e2 <__sflush_r+0xb2>
 800e692:	2200      	movs	r2, #0
 800e694:	6062      	str	r2, [r4, #4]
 800e696:	04d9      	lsls	r1, r3, #19
 800e698:	6922      	ldr	r2, [r4, #16]
 800e69a:	6022      	str	r2, [r4, #0]
 800e69c:	d504      	bpl.n	800e6a8 <__sflush_r+0x78>
 800e69e:	1c42      	adds	r2, r0, #1
 800e6a0:	d101      	bne.n	800e6a6 <__sflush_r+0x76>
 800e6a2:	682b      	ldr	r3, [r5, #0]
 800e6a4:	b903      	cbnz	r3, 800e6a8 <__sflush_r+0x78>
 800e6a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e6a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6aa:	602f      	str	r7, [r5, #0]
 800e6ac:	b1b9      	cbz	r1, 800e6de <__sflush_r+0xae>
 800e6ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6b2:	4299      	cmp	r1, r3
 800e6b4:	d002      	beq.n	800e6bc <__sflush_r+0x8c>
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f7ff f8a6 	bl	800d808 <_free_r>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6c0:	e00d      	b.n	800e6de <__sflush_r+0xae>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	47b0      	blx	r6
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	1c50      	adds	r0, r2, #1
 800e6cc:	d1c9      	bne.n	800e662 <__sflush_r+0x32>
 800e6ce:	682b      	ldr	r3, [r5, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d0c6      	beq.n	800e662 <__sflush_r+0x32>
 800e6d4:	2b1d      	cmp	r3, #29
 800e6d6:	d001      	beq.n	800e6dc <__sflush_r+0xac>
 800e6d8:	2b16      	cmp	r3, #22
 800e6da:	d11e      	bne.n	800e71a <__sflush_r+0xea>
 800e6dc:	602f      	str	r7, [r5, #0]
 800e6de:	2000      	movs	r0, #0
 800e6e0:	e022      	b.n	800e728 <__sflush_r+0xf8>
 800e6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e6:	b21b      	sxth	r3, r3
 800e6e8:	e01b      	b.n	800e722 <__sflush_r+0xf2>
 800e6ea:	690f      	ldr	r7, [r1, #16]
 800e6ec:	2f00      	cmp	r7, #0
 800e6ee:	d0f6      	beq.n	800e6de <__sflush_r+0xae>
 800e6f0:	0793      	lsls	r3, r2, #30
 800e6f2:	680e      	ldr	r6, [r1, #0]
 800e6f4:	bf08      	it	eq
 800e6f6:	694b      	ldreq	r3, [r1, #20]
 800e6f8:	600f      	str	r7, [r1, #0]
 800e6fa:	bf18      	it	ne
 800e6fc:	2300      	movne	r3, #0
 800e6fe:	eba6 0807 	sub.w	r8, r6, r7
 800e702:	608b      	str	r3, [r1, #8]
 800e704:	f1b8 0f00 	cmp.w	r8, #0
 800e708:	dde9      	ble.n	800e6de <__sflush_r+0xae>
 800e70a:	6a21      	ldr	r1, [r4, #32]
 800e70c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e70e:	4643      	mov	r3, r8
 800e710:	463a      	mov	r2, r7
 800e712:	4628      	mov	r0, r5
 800e714:	47b0      	blx	r6
 800e716:	2800      	cmp	r0, #0
 800e718:	dc08      	bgt.n	800e72c <__sflush_r+0xfc>
 800e71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e722:	81a3      	strh	r3, [r4, #12]
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	4407      	add	r7, r0
 800e72e:	eba8 0800 	sub.w	r8, r8, r0
 800e732:	e7e7      	b.n	800e704 <__sflush_r+0xd4>
 800e734:	20400001 	.word	0x20400001

0800e738 <_fflush_r>:
 800e738:	b538      	push	{r3, r4, r5, lr}
 800e73a:	690b      	ldr	r3, [r1, #16]
 800e73c:	4605      	mov	r5, r0
 800e73e:	460c      	mov	r4, r1
 800e740:	b913      	cbnz	r3, 800e748 <_fflush_r+0x10>
 800e742:	2500      	movs	r5, #0
 800e744:	4628      	mov	r0, r5
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	b118      	cbz	r0, 800e752 <_fflush_r+0x1a>
 800e74a:	6a03      	ldr	r3, [r0, #32]
 800e74c:	b90b      	cbnz	r3, 800e752 <_fflush_r+0x1a>
 800e74e:	f7fd ffa1 	bl	800c694 <__sinit>
 800e752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d0f3      	beq.n	800e742 <_fflush_r+0xa>
 800e75a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e75c:	07d0      	lsls	r0, r2, #31
 800e75e:	d404      	bmi.n	800e76a <_fflush_r+0x32>
 800e760:	0599      	lsls	r1, r3, #22
 800e762:	d402      	bmi.n	800e76a <_fflush_r+0x32>
 800e764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e766:	f7fe f9e6 	bl	800cb36 <__retarget_lock_acquire_recursive>
 800e76a:	4628      	mov	r0, r5
 800e76c:	4621      	mov	r1, r4
 800e76e:	f7ff ff5f 	bl	800e630 <__sflush_r>
 800e772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e774:	07da      	lsls	r2, r3, #31
 800e776:	4605      	mov	r5, r0
 800e778:	d4e4      	bmi.n	800e744 <_fflush_r+0xc>
 800e77a:	89a3      	ldrh	r3, [r4, #12]
 800e77c:	059b      	lsls	r3, r3, #22
 800e77e:	d4e1      	bmi.n	800e744 <_fflush_r+0xc>
 800e780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e782:	f7fe f9d9 	bl	800cb38 <__retarget_lock_release_recursive>
 800e786:	e7dd      	b.n	800e744 <_fflush_r+0xc>

0800e788 <__swhatbuf_r>:
 800e788:	b570      	push	{r4, r5, r6, lr}
 800e78a:	460c      	mov	r4, r1
 800e78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e790:	2900      	cmp	r1, #0
 800e792:	b096      	sub	sp, #88	@ 0x58
 800e794:	4615      	mov	r5, r2
 800e796:	461e      	mov	r6, r3
 800e798:	da0d      	bge.n	800e7b6 <__swhatbuf_r+0x2e>
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7a0:	f04f 0100 	mov.w	r1, #0
 800e7a4:	bf14      	ite	ne
 800e7a6:	2340      	movne	r3, #64	@ 0x40
 800e7a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	6031      	str	r1, [r6, #0]
 800e7b0:	602b      	str	r3, [r5, #0]
 800e7b2:	b016      	add	sp, #88	@ 0x58
 800e7b4:	bd70      	pop	{r4, r5, r6, pc}
 800e7b6:	466a      	mov	r2, sp
 800e7b8:	f000 f862 	bl	800e880 <_fstat_r>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	dbec      	blt.n	800e79a <__swhatbuf_r+0x12>
 800e7c0:	9901      	ldr	r1, [sp, #4]
 800e7c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7ca:	4259      	negs	r1, r3
 800e7cc:	4159      	adcs	r1, r3
 800e7ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7d2:	e7eb      	b.n	800e7ac <__swhatbuf_r+0x24>

0800e7d4 <__smakebuf_r>:
 800e7d4:	898b      	ldrh	r3, [r1, #12]
 800e7d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7d8:	079d      	lsls	r5, r3, #30
 800e7da:	4606      	mov	r6, r0
 800e7dc:	460c      	mov	r4, r1
 800e7de:	d507      	bpl.n	800e7f0 <__smakebuf_r+0x1c>
 800e7e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	6123      	str	r3, [r4, #16]
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	6163      	str	r3, [r4, #20]
 800e7ec:	b003      	add	sp, #12
 800e7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7f0:	ab01      	add	r3, sp, #4
 800e7f2:	466a      	mov	r2, sp
 800e7f4:	f7ff ffc8 	bl	800e788 <__swhatbuf_r>
 800e7f8:	9f00      	ldr	r7, [sp, #0]
 800e7fa:	4605      	mov	r5, r0
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	4630      	mov	r0, r6
 800e800:	f7ff f876 	bl	800d8f0 <_malloc_r>
 800e804:	b948      	cbnz	r0, 800e81a <__smakebuf_r+0x46>
 800e806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80a:	059a      	lsls	r2, r3, #22
 800e80c:	d4ee      	bmi.n	800e7ec <__smakebuf_r+0x18>
 800e80e:	f023 0303 	bic.w	r3, r3, #3
 800e812:	f043 0302 	orr.w	r3, r3, #2
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	e7e2      	b.n	800e7e0 <__smakebuf_r+0xc>
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	6020      	str	r0, [r4, #0]
 800e81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e822:	81a3      	strh	r3, [r4, #12]
 800e824:	9b01      	ldr	r3, [sp, #4]
 800e826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e82a:	b15b      	cbz	r3, 800e844 <__smakebuf_r+0x70>
 800e82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e830:	4630      	mov	r0, r6
 800e832:	f000 f837 	bl	800e8a4 <_isatty_r>
 800e836:	b128      	cbz	r0, 800e844 <__smakebuf_r+0x70>
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	f023 0303 	bic.w	r3, r3, #3
 800e83e:	f043 0301 	orr.w	r3, r3, #1
 800e842:	81a3      	strh	r3, [r4, #12]
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	431d      	orrs	r5, r3
 800e848:	81a5      	strh	r5, [r4, #12]
 800e84a:	e7cf      	b.n	800e7ec <__smakebuf_r+0x18>

0800e84c <memmove>:
 800e84c:	4288      	cmp	r0, r1
 800e84e:	b510      	push	{r4, lr}
 800e850:	eb01 0402 	add.w	r4, r1, r2
 800e854:	d902      	bls.n	800e85c <memmove+0x10>
 800e856:	4284      	cmp	r4, r0
 800e858:	4623      	mov	r3, r4
 800e85a:	d807      	bhi.n	800e86c <memmove+0x20>
 800e85c:	1e43      	subs	r3, r0, #1
 800e85e:	42a1      	cmp	r1, r4
 800e860:	d008      	beq.n	800e874 <memmove+0x28>
 800e862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e86a:	e7f8      	b.n	800e85e <memmove+0x12>
 800e86c:	4402      	add	r2, r0
 800e86e:	4601      	mov	r1, r0
 800e870:	428a      	cmp	r2, r1
 800e872:	d100      	bne.n	800e876 <memmove+0x2a>
 800e874:	bd10      	pop	{r4, pc}
 800e876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e87e:	e7f7      	b.n	800e870 <memmove+0x24>

0800e880 <_fstat_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	4d07      	ldr	r5, [pc, #28]	@ (800e8a0 <_fstat_r+0x20>)
 800e884:	2300      	movs	r3, #0
 800e886:	4604      	mov	r4, r0
 800e888:	4608      	mov	r0, r1
 800e88a:	4611      	mov	r1, r2
 800e88c:	602b      	str	r3, [r5, #0]
 800e88e:	f7f5 fe8d 	bl	80045ac <_fstat>
 800e892:	1c43      	adds	r3, r0, #1
 800e894:	d102      	bne.n	800e89c <_fstat_r+0x1c>
 800e896:	682b      	ldr	r3, [r5, #0]
 800e898:	b103      	cbz	r3, 800e89c <_fstat_r+0x1c>
 800e89a:	6023      	str	r3, [r4, #0]
 800e89c:	bd38      	pop	{r3, r4, r5, pc}
 800e89e:	bf00      	nop
 800e8a0:	20001914 	.word	0x20001914

0800e8a4 <_isatty_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d06      	ldr	r5, [pc, #24]	@ (800e8c0 <_isatty_r+0x1c>)
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	4608      	mov	r0, r1
 800e8ae:	602b      	str	r3, [r5, #0]
 800e8b0:	f7f5 fe8c 	bl	80045cc <_isatty>
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d102      	bne.n	800e8be <_isatty_r+0x1a>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	b103      	cbz	r3, 800e8be <_isatty_r+0x1a>
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	20001914 	.word	0x20001914

0800e8c4 <_sbrk_r>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4d06      	ldr	r5, [pc, #24]	@ (800e8e0 <_sbrk_r+0x1c>)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	602b      	str	r3, [r5, #0]
 800e8d0:	f7f5 fe94 	bl	80045fc <_sbrk>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d102      	bne.n	800e8de <_sbrk_r+0x1a>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	b103      	cbz	r3, 800e8de <_sbrk_r+0x1a>
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	20001914 	.word	0x20001914

0800e8e4 <__assert_func>:
 800e8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8e6:	4614      	mov	r4, r2
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	4b09      	ldr	r3, [pc, #36]	@ (800e910 <__assert_func+0x2c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	68d8      	ldr	r0, [r3, #12]
 800e8f2:	b14c      	cbz	r4, 800e908 <__assert_func+0x24>
 800e8f4:	4b07      	ldr	r3, [pc, #28]	@ (800e914 <__assert_func+0x30>)
 800e8f6:	9100      	str	r1, [sp, #0]
 800e8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8fc:	4906      	ldr	r1, [pc, #24]	@ (800e918 <__assert_func+0x34>)
 800e8fe:	462b      	mov	r3, r5
 800e900:	f000 f870 	bl	800e9e4 <fiprintf>
 800e904:	f000 f880 	bl	800ea08 <abort>
 800e908:	4b04      	ldr	r3, [pc, #16]	@ (800e91c <__assert_func+0x38>)
 800e90a:	461c      	mov	r4, r3
 800e90c:	e7f3      	b.n	800e8f6 <__assert_func+0x12>
 800e90e:	bf00      	nop
 800e910:	20000140 	.word	0x20000140
 800e914:	0800fc6d 	.word	0x0800fc6d
 800e918:	0800fc7a 	.word	0x0800fc7a
 800e91c:	0800fca8 	.word	0x0800fca8

0800e920 <_calloc_r>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	fba1 5402 	umull	r5, r4, r1, r2
 800e926:	b934      	cbnz	r4, 800e936 <_calloc_r+0x16>
 800e928:	4629      	mov	r1, r5
 800e92a:	f7fe ffe1 	bl	800d8f0 <_malloc_r>
 800e92e:	4606      	mov	r6, r0
 800e930:	b928      	cbnz	r0, 800e93e <_calloc_r+0x1e>
 800e932:	4630      	mov	r0, r6
 800e934:	bd70      	pop	{r4, r5, r6, pc}
 800e936:	220c      	movs	r2, #12
 800e938:	6002      	str	r2, [r0, #0]
 800e93a:	2600      	movs	r6, #0
 800e93c:	e7f9      	b.n	800e932 <_calloc_r+0x12>
 800e93e:	462a      	mov	r2, r5
 800e940:	4621      	mov	r1, r4
 800e942:	f7fe f87b 	bl	800ca3c <memset>
 800e946:	e7f4      	b.n	800e932 <_calloc_r+0x12>

0800e948 <__ascii_mbtowc>:
 800e948:	b082      	sub	sp, #8
 800e94a:	b901      	cbnz	r1, 800e94e <__ascii_mbtowc+0x6>
 800e94c:	a901      	add	r1, sp, #4
 800e94e:	b142      	cbz	r2, 800e962 <__ascii_mbtowc+0x1a>
 800e950:	b14b      	cbz	r3, 800e966 <__ascii_mbtowc+0x1e>
 800e952:	7813      	ldrb	r3, [r2, #0]
 800e954:	600b      	str	r3, [r1, #0]
 800e956:	7812      	ldrb	r2, [r2, #0]
 800e958:	1e10      	subs	r0, r2, #0
 800e95a:	bf18      	it	ne
 800e95c:	2001      	movne	r0, #1
 800e95e:	b002      	add	sp, #8
 800e960:	4770      	bx	lr
 800e962:	4610      	mov	r0, r2
 800e964:	e7fb      	b.n	800e95e <__ascii_mbtowc+0x16>
 800e966:	f06f 0001 	mvn.w	r0, #1
 800e96a:	e7f8      	b.n	800e95e <__ascii_mbtowc+0x16>

0800e96c <_realloc_r>:
 800e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e970:	4607      	mov	r7, r0
 800e972:	4614      	mov	r4, r2
 800e974:	460d      	mov	r5, r1
 800e976:	b921      	cbnz	r1, 800e982 <_realloc_r+0x16>
 800e978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e97c:	4611      	mov	r1, r2
 800e97e:	f7fe bfb7 	b.w	800d8f0 <_malloc_r>
 800e982:	b92a      	cbnz	r2, 800e990 <_realloc_r+0x24>
 800e984:	f7fe ff40 	bl	800d808 <_free_r>
 800e988:	4625      	mov	r5, r4
 800e98a:	4628      	mov	r0, r5
 800e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e990:	f000 f841 	bl	800ea16 <_malloc_usable_size_r>
 800e994:	4284      	cmp	r4, r0
 800e996:	4606      	mov	r6, r0
 800e998:	d802      	bhi.n	800e9a0 <_realloc_r+0x34>
 800e99a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e99e:	d8f4      	bhi.n	800e98a <_realloc_r+0x1e>
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	f7fe ffa4 	bl	800d8f0 <_malloc_r>
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	b908      	cbnz	r0, 800e9b0 <_realloc_r+0x44>
 800e9ac:	4645      	mov	r5, r8
 800e9ae:	e7ec      	b.n	800e98a <_realloc_r+0x1e>
 800e9b0:	42b4      	cmp	r4, r6
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	bf28      	it	cs
 800e9b8:	4632      	movcs	r2, r6
 800e9ba:	f7fe f8be 	bl	800cb3a <memcpy>
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	f7fe ff21 	bl	800d808 <_free_r>
 800e9c6:	e7f1      	b.n	800e9ac <_realloc_r+0x40>

0800e9c8 <__ascii_wctomb>:
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	4608      	mov	r0, r1
 800e9cc:	b141      	cbz	r1, 800e9e0 <__ascii_wctomb+0x18>
 800e9ce:	2aff      	cmp	r2, #255	@ 0xff
 800e9d0:	d904      	bls.n	800e9dc <__ascii_wctomb+0x14>
 800e9d2:	228a      	movs	r2, #138	@ 0x8a
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9da:	4770      	bx	lr
 800e9dc:	700a      	strb	r2, [r1, #0]
 800e9de:	2001      	movs	r0, #1
 800e9e0:	4770      	bx	lr
	...

0800e9e4 <fiprintf>:
 800e9e4:	b40e      	push	{r1, r2, r3}
 800e9e6:	b503      	push	{r0, r1, lr}
 800e9e8:	4601      	mov	r1, r0
 800e9ea:	ab03      	add	r3, sp, #12
 800e9ec:	4805      	ldr	r0, [pc, #20]	@ (800ea04 <fiprintf+0x20>)
 800e9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f2:	6800      	ldr	r0, [r0, #0]
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	f7ff fd03 	bl	800e400 <_vfiprintf_r>
 800e9fa:	b002      	add	sp, #8
 800e9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea00:	b003      	add	sp, #12
 800ea02:	4770      	bx	lr
 800ea04:	20000140 	.word	0x20000140

0800ea08 <abort>:
 800ea08:	b508      	push	{r3, lr}
 800ea0a:	2006      	movs	r0, #6
 800ea0c:	f000 f834 	bl	800ea78 <raise>
 800ea10:	2001      	movs	r0, #1
 800ea12:	f7f5 fd7b 	bl	800450c <_exit>

0800ea16 <_malloc_usable_size_r>:
 800ea16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea1a:	1f18      	subs	r0, r3, #4
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	bfbc      	itt	lt
 800ea20:	580b      	ldrlt	r3, [r1, r0]
 800ea22:	18c0      	addlt	r0, r0, r3
 800ea24:	4770      	bx	lr

0800ea26 <_raise_r>:
 800ea26:	291f      	cmp	r1, #31
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	d904      	bls.n	800ea3a <_raise_r+0x14>
 800ea30:	2316      	movs	r3, #22
 800ea32:	6003      	str	r3, [r0, #0]
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	bd38      	pop	{r3, r4, r5, pc}
 800ea3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea3c:	b112      	cbz	r2, 800ea44 <_raise_r+0x1e>
 800ea3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea42:	b94b      	cbnz	r3, 800ea58 <_raise_r+0x32>
 800ea44:	4628      	mov	r0, r5
 800ea46:	f000 f831 	bl	800eaac <_getpid_r>
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	4628      	mov	r0, r5
 800ea50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea54:	f000 b818 	b.w	800ea88 <_kill_r>
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d00a      	beq.n	800ea72 <_raise_r+0x4c>
 800ea5c:	1c59      	adds	r1, r3, #1
 800ea5e:	d103      	bne.n	800ea68 <_raise_r+0x42>
 800ea60:	2316      	movs	r3, #22
 800ea62:	6003      	str	r3, [r0, #0]
 800ea64:	2001      	movs	r0, #1
 800ea66:	e7e7      	b.n	800ea38 <_raise_r+0x12>
 800ea68:	2100      	movs	r1, #0
 800ea6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	4798      	blx	r3
 800ea72:	2000      	movs	r0, #0
 800ea74:	e7e0      	b.n	800ea38 <_raise_r+0x12>
	...

0800ea78 <raise>:
 800ea78:	4b02      	ldr	r3, [pc, #8]	@ (800ea84 <raise+0xc>)
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	6818      	ldr	r0, [r3, #0]
 800ea7e:	f7ff bfd2 	b.w	800ea26 <_raise_r>
 800ea82:	bf00      	nop
 800ea84:	20000140 	.word	0x20000140

0800ea88 <_kill_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d07      	ldr	r5, [pc, #28]	@ (800eaa8 <_kill_r+0x20>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	4611      	mov	r1, r2
 800ea94:	602b      	str	r3, [r5, #0]
 800ea96:	f7f5 fd29 	bl	80044ec <_kill>
 800ea9a:	1c43      	adds	r3, r0, #1
 800ea9c:	d102      	bne.n	800eaa4 <_kill_r+0x1c>
 800ea9e:	682b      	ldr	r3, [r5, #0]
 800eaa0:	b103      	cbz	r3, 800eaa4 <_kill_r+0x1c>
 800eaa2:	6023      	str	r3, [r4, #0]
 800eaa4:	bd38      	pop	{r3, r4, r5, pc}
 800eaa6:	bf00      	nop
 800eaa8:	20001914 	.word	0x20001914

0800eaac <_getpid_r>:
 800eaac:	f7f5 bd16 	b.w	80044dc <_getpid>

0800eab0 <powf>:
 800eab0:	b508      	push	{r3, lr}
 800eab2:	ed2d 8b04 	vpush	{d8-d9}
 800eab6:	eeb0 8a60 	vmov.f32	s16, s1
 800eaba:	eeb0 9a40 	vmov.f32	s18, s0
 800eabe:	f000 f859 	bl	800eb74 <__ieee754_powf>
 800eac2:	eeb4 8a48 	vcmp.f32	s16, s16
 800eac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaca:	eef0 8a40 	vmov.f32	s17, s0
 800eace:	d63e      	bvs.n	800eb4e <powf+0x9e>
 800ead0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ead4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead8:	d112      	bne.n	800eb00 <powf+0x50>
 800eada:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae2:	d039      	beq.n	800eb58 <powf+0xa8>
 800eae4:	eeb0 0a48 	vmov.f32	s0, s16
 800eae8:	f000 f839 	bl	800eb5e <finitef>
 800eaec:	b378      	cbz	r0, 800eb4e <powf+0x9e>
 800eaee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf6:	d52a      	bpl.n	800eb4e <powf+0x9e>
 800eaf8:	f7fd fff2 	bl	800cae0 <__errno>
 800eafc:	2322      	movs	r3, #34	@ 0x22
 800eafe:	e014      	b.n	800eb2a <powf+0x7a>
 800eb00:	f000 f82d 	bl	800eb5e <finitef>
 800eb04:	b998      	cbnz	r0, 800eb2e <powf+0x7e>
 800eb06:	eeb0 0a49 	vmov.f32	s0, s18
 800eb0a:	f000 f828 	bl	800eb5e <finitef>
 800eb0e:	b170      	cbz	r0, 800eb2e <powf+0x7e>
 800eb10:	eeb0 0a48 	vmov.f32	s0, s16
 800eb14:	f000 f823 	bl	800eb5e <finitef>
 800eb18:	b148      	cbz	r0, 800eb2e <powf+0x7e>
 800eb1a:	eef4 8a68 	vcmp.f32	s17, s17
 800eb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb22:	d7e9      	bvc.n	800eaf8 <powf+0x48>
 800eb24:	f7fd ffdc 	bl	800cae0 <__errno>
 800eb28:	2321      	movs	r3, #33	@ 0x21
 800eb2a:	6003      	str	r3, [r0, #0]
 800eb2c:	e00f      	b.n	800eb4e <powf+0x9e>
 800eb2e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800eb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb36:	d10a      	bne.n	800eb4e <powf+0x9e>
 800eb38:	eeb0 0a49 	vmov.f32	s0, s18
 800eb3c:	f000 f80f 	bl	800eb5e <finitef>
 800eb40:	b128      	cbz	r0, 800eb4e <powf+0x9e>
 800eb42:	eeb0 0a48 	vmov.f32	s0, s16
 800eb46:	f000 f80a 	bl	800eb5e <finitef>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d1d4      	bne.n	800eaf8 <powf+0x48>
 800eb4e:	eeb0 0a68 	vmov.f32	s0, s17
 800eb52:	ecbd 8b04 	vpop	{d8-d9}
 800eb56:	bd08      	pop	{r3, pc}
 800eb58:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800eb5c:	e7f7      	b.n	800eb4e <powf+0x9e>

0800eb5e <finitef>:
 800eb5e:	ee10 3a10 	vmov	r3, s0
 800eb62:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800eb66:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800eb6a:	bfac      	ite	ge
 800eb6c:	2000      	movge	r0, #0
 800eb6e:	2001      	movlt	r0, #1
 800eb70:	4770      	bx	lr
	...

0800eb74 <__ieee754_powf>:
 800eb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb78:	ee10 4a90 	vmov	r4, s1
 800eb7c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800eb80:	ed2d 8b02 	vpush	{d8}
 800eb84:	ee10 6a10 	vmov	r6, s0
 800eb88:	eeb0 8a40 	vmov.f32	s16, s0
 800eb8c:	eef0 8a60 	vmov.f32	s17, s1
 800eb90:	d10c      	bne.n	800ebac <__ieee754_powf+0x38>
 800eb92:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800eb96:	0076      	lsls	r6, r6, #1
 800eb98:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800eb9c:	f240 8274 	bls.w	800f088 <__ieee754_powf+0x514>
 800eba0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800eba4:	ecbd 8b02 	vpop	{d8}
 800eba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebac:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ebb0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ebb4:	d802      	bhi.n	800ebbc <__ieee754_powf+0x48>
 800ebb6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ebba:	d908      	bls.n	800ebce <__ieee754_powf+0x5a>
 800ebbc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ebc0:	d1ee      	bne.n	800eba0 <__ieee754_powf+0x2c>
 800ebc2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ebc6:	0064      	lsls	r4, r4, #1
 800ebc8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ebcc:	e7e6      	b.n	800eb9c <__ieee754_powf+0x28>
 800ebce:	2e00      	cmp	r6, #0
 800ebd0:	da1f      	bge.n	800ec12 <__ieee754_powf+0x9e>
 800ebd2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ebd6:	f080 8260 	bcs.w	800f09a <__ieee754_powf+0x526>
 800ebda:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ebde:	d32f      	bcc.n	800ec40 <__ieee754_powf+0xcc>
 800ebe0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ebe4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ebe8:	fa49 f503 	asr.w	r5, r9, r3
 800ebec:	fa05 f303 	lsl.w	r3, r5, r3
 800ebf0:	454b      	cmp	r3, r9
 800ebf2:	d123      	bne.n	800ec3c <__ieee754_powf+0xc8>
 800ebf4:	f005 0501 	and.w	r5, r5, #1
 800ebf8:	f1c5 0502 	rsb	r5, r5, #2
 800ebfc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ec00:	d11f      	bne.n	800ec42 <__ieee754_powf+0xce>
 800ec02:	2c00      	cmp	r4, #0
 800ec04:	f280 8246 	bge.w	800f094 <__ieee754_powf+0x520>
 800ec08:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ec0c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ec10:	e7c8      	b.n	800eba4 <__ieee754_powf+0x30>
 800ec12:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ec16:	d111      	bne.n	800ec3c <__ieee754_powf+0xc8>
 800ec18:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ec1c:	f000 8234 	beq.w	800f088 <__ieee754_powf+0x514>
 800ec20:	d906      	bls.n	800ec30 <__ieee754_powf+0xbc>
 800ec22:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800ef38 <__ieee754_powf+0x3c4>
 800ec26:	2c00      	cmp	r4, #0
 800ec28:	bfa8      	it	ge
 800ec2a:	eeb0 0a68 	vmovge.f32	s0, s17
 800ec2e:	e7b9      	b.n	800eba4 <__ieee754_powf+0x30>
 800ec30:	2c00      	cmp	r4, #0
 800ec32:	f280 822c 	bge.w	800f08e <__ieee754_powf+0x51a>
 800ec36:	eeb1 0a68 	vneg.f32	s0, s17
 800ec3a:	e7b3      	b.n	800eba4 <__ieee754_powf+0x30>
 800ec3c:	2500      	movs	r5, #0
 800ec3e:	e7dd      	b.n	800ebfc <__ieee754_powf+0x88>
 800ec40:	2500      	movs	r5, #0
 800ec42:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ec46:	d102      	bne.n	800ec4e <__ieee754_powf+0xda>
 800ec48:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ec4c:	e7aa      	b.n	800eba4 <__ieee754_powf+0x30>
 800ec4e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ec52:	f040 8227 	bne.w	800f0a4 <__ieee754_powf+0x530>
 800ec56:	2e00      	cmp	r6, #0
 800ec58:	f2c0 8224 	blt.w	800f0a4 <__ieee754_powf+0x530>
 800ec5c:	eeb0 0a48 	vmov.f32	s0, s16
 800ec60:	ecbd 8b02 	vpop	{d8}
 800ec64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec68:	f000 bae6 	b.w	800f238 <__ieee754_sqrtf>
 800ec6c:	2d01      	cmp	r5, #1
 800ec6e:	d199      	bne.n	800eba4 <__ieee754_powf+0x30>
 800ec70:	eeb1 0a40 	vneg.f32	s0, s0
 800ec74:	e796      	b.n	800eba4 <__ieee754_powf+0x30>
 800ec76:	0ff0      	lsrs	r0, r6, #31
 800ec78:	3801      	subs	r0, #1
 800ec7a:	ea55 0300 	orrs.w	r3, r5, r0
 800ec7e:	d104      	bne.n	800ec8a <__ieee754_powf+0x116>
 800ec80:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ec84:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ec88:	e78c      	b.n	800eba4 <__ieee754_powf+0x30>
 800ec8a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ec8e:	d96d      	bls.n	800ed6c <__ieee754_powf+0x1f8>
 800ec90:	4baa      	ldr	r3, [pc, #680]	@ (800ef3c <__ieee754_powf+0x3c8>)
 800ec92:	4598      	cmp	r8, r3
 800ec94:	d808      	bhi.n	800eca8 <__ieee754_powf+0x134>
 800ec96:	2c00      	cmp	r4, #0
 800ec98:	da0b      	bge.n	800ecb2 <__ieee754_powf+0x13e>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	ecbd 8b02 	vpop	{d8}
 800eca0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca4:	f000 bac2 	b.w	800f22c <__math_oflowf>
 800eca8:	4ba5      	ldr	r3, [pc, #660]	@ (800ef40 <__ieee754_powf+0x3cc>)
 800ecaa:	4598      	cmp	r8, r3
 800ecac:	d908      	bls.n	800ecc0 <__ieee754_powf+0x14c>
 800ecae:	2c00      	cmp	r4, #0
 800ecb0:	dcf3      	bgt.n	800ec9a <__ieee754_powf+0x126>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	ecbd 8b02 	vpop	{d8}
 800ecb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecbc:	f000 bab0 	b.w	800f220 <__math_uflowf>
 800ecc0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ecc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ecc8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800ef44 <__ieee754_powf+0x3d0>
 800eccc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ecd0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ecd4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ecd8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ecdc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ece0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800ef48 <__ieee754_powf+0x3d4>
 800ece4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ece8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800ef4c <__ieee754_powf+0x3d8>
 800ecec:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ecf0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800ef50 <__ieee754_powf+0x3dc>
 800ecf4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ecf8:	eeb0 7a67 	vmov.f32	s14, s15
 800ecfc:	eea0 7a26 	vfma.f32	s14, s0, s13
 800ed00:	ee17 3a10 	vmov	r3, s14
 800ed04:	f36f 030b 	bfc	r3, #0, #12
 800ed08:	ee07 3a10 	vmov	s14, r3
 800ed0c:	eeb0 6a47 	vmov.f32	s12, s14
 800ed10:	eea0 6a66 	vfms.f32	s12, s0, s13
 800ed14:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ed18:	3d01      	subs	r5, #1
 800ed1a:	4305      	orrs	r5, r0
 800ed1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed20:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ed24:	f36f 040b 	bfc	r4, #0, #12
 800ed28:	bf18      	it	ne
 800ed2a:	eeb0 8a66 	vmovne.f32	s16, s13
 800ed2e:	ee06 4a90 	vmov	s13, r4
 800ed32:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ed36:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800ed3a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800ed3e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800ed42:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ed46:	ee17 1a10 	vmov	r1, s14
 800ed4a:	2900      	cmp	r1, #0
 800ed4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ed50:	f340 80dd 	ble.w	800ef0e <__ieee754_powf+0x39a>
 800ed54:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ed58:	f240 80ca 	bls.w	800eef0 <__ieee754_powf+0x37c>
 800ed5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ed60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed64:	bf4c      	ite	mi
 800ed66:	2001      	movmi	r0, #1
 800ed68:	2000      	movpl	r0, #0
 800ed6a:	e797      	b.n	800ec9c <__ieee754_powf+0x128>
 800ed6c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ed70:	bf01      	itttt	eq
 800ed72:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ef54 <__ieee754_powf+0x3e0>
 800ed76:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ed7a:	f06f 0317 	mvneq.w	r3, #23
 800ed7e:	ee17 7a90 	vmoveq	r7, s15
 800ed82:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800ed86:	bf18      	it	ne
 800ed88:	2300      	movne	r3, #0
 800ed8a:	3a7f      	subs	r2, #127	@ 0x7f
 800ed8c:	441a      	add	r2, r3
 800ed8e:	4b72      	ldr	r3, [pc, #456]	@ (800ef58 <__ieee754_powf+0x3e4>)
 800ed90:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ed94:	429f      	cmp	r7, r3
 800ed96:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800ed9a:	dd06      	ble.n	800edaa <__ieee754_powf+0x236>
 800ed9c:	4b6f      	ldr	r3, [pc, #444]	@ (800ef5c <__ieee754_powf+0x3e8>)
 800ed9e:	429f      	cmp	r7, r3
 800eda0:	f340 80a4 	ble.w	800eeec <__ieee754_powf+0x378>
 800eda4:	3201      	adds	r2, #1
 800eda6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800edaa:	2600      	movs	r6, #0
 800edac:	4b6c      	ldr	r3, [pc, #432]	@ (800ef60 <__ieee754_powf+0x3ec>)
 800edae:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800edb2:	ee07 1a10 	vmov	s14, r1
 800edb6:	edd3 5a00 	vldr	s11, [r3]
 800edba:	4b6a      	ldr	r3, [pc, #424]	@ (800ef64 <__ieee754_powf+0x3f0>)
 800edbc:	ee75 7a87 	vadd.f32	s15, s11, s14
 800edc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800edc4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800edc8:	1049      	asrs	r1, r1, #1
 800edca:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800edce:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800edd2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800edd6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800edda:	ee07 1a90 	vmov	s15, r1
 800edde:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ede2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ede6:	ee15 7a10 	vmov	r7, s10
 800edea:	401f      	ands	r7, r3
 800edec:	ee06 7a90 	vmov	s13, r7
 800edf0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800edf4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800edf8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800edfc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ee00:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ef68 <__ieee754_powf+0x3f4>
 800ee04:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ef6c <__ieee754_powf+0x3f8>
 800ee08:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ee0c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ef70 <__ieee754_powf+0x3fc>
 800ee10:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ee14:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ef44 <__ieee754_powf+0x3d0>
 800ee18:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ee1c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ef74 <__ieee754_powf+0x400>
 800ee20:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ee24:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ef78 <__ieee754_powf+0x404>
 800ee28:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ee2c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ee30:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ee34:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ee38:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ee3c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800ee40:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ee44:	eef0 5a67 	vmov.f32	s11, s15
 800ee48:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ee4c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ee50:	ee15 1a90 	vmov	r1, s11
 800ee54:	4019      	ands	r1, r3
 800ee56:	ee05 1a90 	vmov	s11, r1
 800ee5a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ee5e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ee62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee66:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ee6a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ee6e:	eeb0 6a67 	vmov.f32	s12, s15
 800ee72:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ee76:	ee16 1a10 	vmov	r1, s12
 800ee7a:	4019      	ands	r1, r3
 800ee7c:	ee06 1a10 	vmov	s12, r1
 800ee80:	eeb0 7a46 	vmov.f32	s14, s12
 800ee84:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ee88:	493c      	ldr	r1, [pc, #240]	@ (800ef7c <__ieee754_powf+0x408>)
 800ee8a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800ee8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee92:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ef80 <__ieee754_powf+0x40c>
 800ee96:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ef84 <__ieee754_powf+0x410>
 800ee9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee9e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ef88 <__ieee754_powf+0x414>
 800eea2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eea6:	ed91 7a00 	vldr	s14, [r1]
 800eeaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eeae:	ee07 2a10 	vmov	s14, r2
 800eeb2:	4a36      	ldr	r2, [pc, #216]	@ (800ef8c <__ieee754_powf+0x418>)
 800eeb4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800eeb8:	eeb0 7a67 	vmov.f32	s14, s15
 800eebc:	eea6 7a25 	vfma.f32	s14, s12, s11
 800eec0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800eec4:	ed92 5a00 	vldr	s10, [r2]
 800eec8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800eecc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eed0:	ee17 2a10 	vmov	r2, s14
 800eed4:	401a      	ands	r2, r3
 800eed6:	ee07 2a10 	vmov	s14, r2
 800eeda:	ee77 6a66 	vsub.f32	s13, s14, s13
 800eede:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800eee2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800eee6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eeea:	e715      	b.n	800ed18 <__ieee754_powf+0x1a4>
 800eeec:	2601      	movs	r6, #1
 800eeee:	e75d      	b.n	800edac <__ieee754_powf+0x238>
 800eef0:	d152      	bne.n	800ef98 <__ieee754_powf+0x424>
 800eef2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ef90 <__ieee754_powf+0x41c>
 800eef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eefa:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800eefe:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ef02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef06:	f73f af29 	bgt.w	800ed5c <__ieee754_powf+0x1e8>
 800ef0a:	2386      	movs	r3, #134	@ 0x86
 800ef0c:	e048      	b.n	800efa0 <__ieee754_powf+0x42c>
 800ef0e:	4a21      	ldr	r2, [pc, #132]	@ (800ef94 <__ieee754_powf+0x420>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d907      	bls.n	800ef24 <__ieee754_powf+0x3b0>
 800ef14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1c:	bf4c      	ite	mi
 800ef1e:	2001      	movmi	r0, #1
 800ef20:	2000      	movpl	r0, #0
 800ef22:	e6c7      	b.n	800ecb4 <__ieee754_powf+0x140>
 800ef24:	d138      	bne.n	800ef98 <__ieee754_powf+0x424>
 800ef26:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ef2a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	dbea      	blt.n	800ef0a <__ieee754_powf+0x396>
 800ef34:	e7ee      	b.n	800ef14 <__ieee754_powf+0x3a0>
 800ef36:	bf00      	nop
 800ef38:	00000000 	.word	0x00000000
 800ef3c:	3f7ffff3 	.word	0x3f7ffff3
 800ef40:	3f800007 	.word	0x3f800007
 800ef44:	3eaaaaab 	.word	0x3eaaaaab
 800ef48:	3fb8aa00 	.word	0x3fb8aa00
 800ef4c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ef50:	36eca570 	.word	0x36eca570
 800ef54:	4b800000 	.word	0x4b800000
 800ef58:	001cc471 	.word	0x001cc471
 800ef5c:	005db3d6 	.word	0x005db3d6
 800ef60:	0800febc 	.word	0x0800febc
 800ef64:	fffff000 	.word	0xfffff000
 800ef68:	3e6c3255 	.word	0x3e6c3255
 800ef6c:	3e53f142 	.word	0x3e53f142
 800ef70:	3e8ba305 	.word	0x3e8ba305
 800ef74:	3edb6db7 	.word	0x3edb6db7
 800ef78:	3f19999a 	.word	0x3f19999a
 800ef7c:	0800feac 	.word	0x0800feac
 800ef80:	3f76384f 	.word	0x3f76384f
 800ef84:	3f763800 	.word	0x3f763800
 800ef88:	369dc3a0 	.word	0x369dc3a0
 800ef8c:	0800feb4 	.word	0x0800feb4
 800ef90:	3338aa3c 	.word	0x3338aa3c
 800ef94:	43160000 	.word	0x43160000
 800ef98:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ef9c:	d96f      	bls.n	800f07e <__ieee754_powf+0x50a>
 800ef9e:	15db      	asrs	r3, r3, #23
 800efa0:	3b7e      	subs	r3, #126	@ 0x7e
 800efa2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800efa6:	4118      	asrs	r0, r3
 800efa8:	4408      	add	r0, r1
 800efaa:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800efae:	4a4e      	ldr	r2, [pc, #312]	@ (800f0e8 <__ieee754_powf+0x574>)
 800efb0:	3b7f      	subs	r3, #127	@ 0x7f
 800efb2:	411a      	asrs	r2, r3
 800efb4:	4002      	ands	r2, r0
 800efb6:	ee07 2a10 	vmov	s14, r2
 800efba:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800efbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800efc2:	f1c3 0317 	rsb	r3, r3, #23
 800efc6:	4118      	asrs	r0, r3
 800efc8:	2900      	cmp	r1, #0
 800efca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efce:	bfb8      	it	lt
 800efd0:	4240      	neglt	r0, r0
 800efd2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800efd6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f0ec <__ieee754_powf+0x578>
 800efda:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800f0f0 <__ieee754_powf+0x57c>
 800efde:	ee16 3a90 	vmov	r3, s13
 800efe2:	f36f 030b 	bfc	r3, #0, #12
 800efe6:	ee06 3a90 	vmov	s13, r3
 800efea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800efee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eff2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800eff6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f0f4 <__ieee754_powf+0x580>
 800effa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800effe:	eee0 7a87 	vfma.f32	s15, s1, s14
 800f002:	eeb0 7a67 	vmov.f32	s14, s15
 800f006:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f00a:	eef0 5a47 	vmov.f32	s11, s14
 800f00e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800f012:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f016:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f01a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800f0f8 <__ieee754_powf+0x584>
 800f01e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800f0fc <__ieee754_powf+0x588>
 800f022:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f026:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f100 <__ieee754_powf+0x58c>
 800f02a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f02e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800f104 <__ieee754_powf+0x590>
 800f032:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800f036:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f108 <__ieee754_powf+0x594>
 800f03a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f03e:	eeb0 6a47 	vmov.f32	s12, s14
 800f042:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800f046:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f04a:	ee67 5a06 	vmul.f32	s11, s14, s12
 800f04e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f052:	eee7 7a27 	vfma.f32	s15, s14, s15
 800f056:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f05a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f05e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f062:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f066:	ee10 3a10 	vmov	r3, s0
 800f06a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f06e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f072:	da06      	bge.n	800f082 <__ieee754_powf+0x50e>
 800f074:	f000 f854 	bl	800f120 <scalbnf>
 800f078:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f07c:	e592      	b.n	800eba4 <__ieee754_powf+0x30>
 800f07e:	2000      	movs	r0, #0
 800f080:	e7a7      	b.n	800efd2 <__ieee754_powf+0x45e>
 800f082:	ee00 3a10 	vmov	s0, r3
 800f086:	e7f7      	b.n	800f078 <__ieee754_powf+0x504>
 800f088:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f08c:	e58a      	b.n	800eba4 <__ieee754_powf+0x30>
 800f08e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800f10c <__ieee754_powf+0x598>
 800f092:	e587      	b.n	800eba4 <__ieee754_powf+0x30>
 800f094:	eeb0 0a48 	vmov.f32	s0, s16
 800f098:	e584      	b.n	800eba4 <__ieee754_powf+0x30>
 800f09a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f09e:	f43f adbb 	beq.w	800ec18 <__ieee754_powf+0xa4>
 800f0a2:	2502      	movs	r5, #2
 800f0a4:	eeb0 0a48 	vmov.f32	s0, s16
 800f0a8:	f000 f832 	bl	800f110 <fabsf>
 800f0ac:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f0b0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f0b4:	4647      	mov	r7, r8
 800f0b6:	d003      	beq.n	800f0c0 <__ieee754_powf+0x54c>
 800f0b8:	f1b8 0f00 	cmp.w	r8, #0
 800f0bc:	f47f addb 	bne.w	800ec76 <__ieee754_powf+0x102>
 800f0c0:	2c00      	cmp	r4, #0
 800f0c2:	bfbc      	itt	lt
 800f0c4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f0c8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f0cc:	2e00      	cmp	r6, #0
 800f0ce:	f6bf ad69 	bge.w	800eba4 <__ieee754_powf+0x30>
 800f0d2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f0d6:	ea58 0805 	orrs.w	r8, r8, r5
 800f0da:	f47f adc7 	bne.w	800ec6c <__ieee754_powf+0xf8>
 800f0de:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f0e2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f0e6:	e55d      	b.n	800eba4 <__ieee754_powf+0x30>
 800f0e8:	ff800000 	.word	0xff800000
 800f0ec:	3f317218 	.word	0x3f317218
 800f0f0:	3f317200 	.word	0x3f317200
 800f0f4:	35bfbe8c 	.word	0x35bfbe8c
 800f0f8:	b5ddea0e 	.word	0xb5ddea0e
 800f0fc:	3331bb4c 	.word	0x3331bb4c
 800f100:	388ab355 	.word	0x388ab355
 800f104:	bb360b61 	.word	0xbb360b61
 800f108:	3e2aaaab 	.word	0x3e2aaaab
 800f10c:	00000000 	.word	0x00000000

0800f110 <fabsf>:
 800f110:	ee10 3a10 	vmov	r3, s0
 800f114:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f118:	ee00 3a10 	vmov	s0, r3
 800f11c:	4770      	bx	lr
	...

0800f120 <scalbnf>:
 800f120:	ee10 3a10 	vmov	r3, s0
 800f124:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f128:	d02b      	beq.n	800f182 <scalbnf+0x62>
 800f12a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f12e:	d302      	bcc.n	800f136 <scalbnf+0x16>
 800f130:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f134:	4770      	bx	lr
 800f136:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f13a:	d123      	bne.n	800f184 <scalbnf+0x64>
 800f13c:	4b24      	ldr	r3, [pc, #144]	@ (800f1d0 <scalbnf+0xb0>)
 800f13e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f1d4 <scalbnf+0xb4>
 800f142:	4298      	cmp	r0, r3
 800f144:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f148:	db17      	blt.n	800f17a <scalbnf+0x5a>
 800f14a:	ee10 3a10 	vmov	r3, s0
 800f14e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f152:	3a19      	subs	r2, #25
 800f154:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f158:	4288      	cmp	r0, r1
 800f15a:	dd15      	ble.n	800f188 <scalbnf+0x68>
 800f15c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f1d8 <scalbnf+0xb8>
 800f160:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f1dc <scalbnf+0xbc>
 800f164:	ee10 3a10 	vmov	r3, s0
 800f168:	eeb0 7a67 	vmov.f32	s14, s15
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	bfb8      	it	lt
 800f170:	eef0 7a66 	vmovlt.f32	s15, s13
 800f174:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f178:	4770      	bx	lr
 800f17a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f1e0 <scalbnf+0xc0>
 800f17e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f182:	4770      	bx	lr
 800f184:	0dd2      	lsrs	r2, r2, #23
 800f186:	e7e5      	b.n	800f154 <scalbnf+0x34>
 800f188:	4410      	add	r0, r2
 800f18a:	28fe      	cmp	r0, #254	@ 0xfe
 800f18c:	dce6      	bgt.n	800f15c <scalbnf+0x3c>
 800f18e:	2800      	cmp	r0, #0
 800f190:	dd06      	ble.n	800f1a0 <scalbnf+0x80>
 800f192:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f196:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f19a:	ee00 3a10 	vmov	s0, r3
 800f19e:	4770      	bx	lr
 800f1a0:	f110 0f16 	cmn.w	r0, #22
 800f1a4:	da09      	bge.n	800f1ba <scalbnf+0x9a>
 800f1a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f1e0 <scalbnf+0xc0>
 800f1aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f1e4 <scalbnf+0xc4>
 800f1ae:	ee10 3a10 	vmov	r3, s0
 800f1b2:	eeb0 7a67 	vmov.f32	s14, s15
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	e7d9      	b.n	800f16e <scalbnf+0x4e>
 800f1ba:	3019      	adds	r0, #25
 800f1bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f1c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f1c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f1e8 <scalbnf+0xc8>
 800f1c8:	ee07 3a90 	vmov	s15, r3
 800f1cc:	e7d7      	b.n	800f17e <scalbnf+0x5e>
 800f1ce:	bf00      	nop
 800f1d0:	ffff3cb0 	.word	0xffff3cb0
 800f1d4:	4c000000 	.word	0x4c000000
 800f1d8:	7149f2ca 	.word	0x7149f2ca
 800f1dc:	f149f2ca 	.word	0xf149f2ca
 800f1e0:	0da24260 	.word	0x0da24260
 800f1e4:	8da24260 	.word	0x8da24260
 800f1e8:	33000000 	.word	0x33000000

0800f1ec <with_errnof>:
 800f1ec:	b510      	push	{r4, lr}
 800f1ee:	ed2d 8b02 	vpush	{d8}
 800f1f2:	eeb0 8a40 	vmov.f32	s16, s0
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	f7fd fc72 	bl	800cae0 <__errno>
 800f1fc:	eeb0 0a48 	vmov.f32	s0, s16
 800f200:	ecbd 8b02 	vpop	{d8}
 800f204:	6004      	str	r4, [r0, #0]
 800f206:	bd10      	pop	{r4, pc}

0800f208 <xflowf>:
 800f208:	b130      	cbz	r0, 800f218 <xflowf+0x10>
 800f20a:	eef1 7a40 	vneg.f32	s15, s0
 800f20e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f212:	2022      	movs	r0, #34	@ 0x22
 800f214:	f7ff bfea 	b.w	800f1ec <with_errnof>
 800f218:	eef0 7a40 	vmov.f32	s15, s0
 800f21c:	e7f7      	b.n	800f20e <xflowf+0x6>
	...

0800f220 <__math_uflowf>:
 800f220:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f228 <__math_uflowf+0x8>
 800f224:	f7ff bff0 	b.w	800f208 <xflowf>
 800f228:	10000000 	.word	0x10000000

0800f22c <__math_oflowf>:
 800f22c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f234 <__math_oflowf+0x8>
 800f230:	f7ff bfea 	b.w	800f208 <xflowf>
 800f234:	70000000 	.word	0x70000000

0800f238 <__ieee754_sqrtf>:
 800f238:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f23c:	4770      	bx	lr
	...

0800f240 <_init>:
 800f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f242:	bf00      	nop
 800f244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f246:	bc08      	pop	{r3}
 800f248:	469e      	mov	lr, r3
 800f24a:	4770      	bx	lr

0800f24c <_fini>:
 800f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24e:	bf00      	nop
 800f250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f252:	bc08      	pop	{r3}
 800f254:	469e      	mov	lr, r3
 800f256:	4770      	bx	lr
